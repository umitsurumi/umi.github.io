{
    "version": "https://jsonfeed.org/version/1",
    "title": "乌弥的小屋 • All posts by \"折腾\" category",
    "description": "乌弥的个人博客",
    "home_page_url": "https://www.umi.homes",
    "items": [
        {
            "id": "https://www.umi.homes/posts/2373/",
            "url": "https://www.umi.homes/posts/2373/",
            "title": "OMV+Jellyfin打造个人影视库",
            "date_published": "2022-10-09T16:00:00.000Z",
            "content_html": "<h2 id=\"关于-nas\"><a class=\"markdownIt-Anchor\" href=\"#关于-nas\">#</a> 关于 nas</h2>\n<p>NAS，全称 Network Attached Storage，翻译过来即为网络附属存储。简单来讲的话可以把它当作一个私人云盘来使用。<br>\nNAS 被定义为是一个以数据存储为中心的服务器，它首先具有数据集中存储和集中管理的功能，在这之上，它也可以做为一个私人专属的小服务器使用，实现诸如下载播放、家庭影院、软路由、虚拟机等功能。</p>\n<h3 id=\"为什么要入手-nas\"><a class=\"markdownIt-Anchor\" href=\"#为什么要入手-nas\">#</a> 为什么要入手 nas</h3>\n<p><s>当然是吃饱了没事干瞎折腾。</s><br>\n虽然但是每个人对 nas 的理解和需求都不一样，对我个人来讲主要是更换了笔记本电脑后释放存储空间的需要和考虑搭建个人影视库的方便，另外则是对于网盘的不信任（<i>谁知道存在网盘里面的内容哪天就会打不开了呢？而百度的下载限速……emmm</i>）。<br>\n对于爱折腾的人来说，折腾 nas 的这个过程本身也可以是很有趣的，尤其是花费时间和精力后，实现了自己想要的功能后的满足感。</p>\n<h3 id=\"成品机-or-diy\"><a class=\"markdownIt-Anchor\" href=\"#成品机-or-diy\">#</a> 成品机 or DIY？</h3>\n<h4 id=\"成品-nas\"><a class=\"markdownIt-Anchor\" href=\"#成品-nas\">#</a> 成品 nas</h4>\n<p>家用 nas 目前市面上其实已经有很多成熟的产品供人选择，且不说大家耳熟能详的群晖和威联通，新的产品还有万由云、极空间、绿联云等等，像是海康、联想、华为等厂商也推出了私人云产品。<br>\n成熟的 nas 产品，不仅是简单方便开箱即用，而且它们的功能和 app 适配也相对完善，售后服务等更是进一步提升了保障，省心省力。<br>\n当然，成品 nas 的缺点也很明显：一个是价格稍贵，另一个就是硬件上没有太多选择。像是<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pdGVtLmpkLmNvbS8xMDAwMTUwODc0MzEuaHRtbCNwcm9kdWN0LWRldGFpbA==\">群晖最入门的双盘位 DS220j</span>，京东目前售价在 1400 元，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pdGVtLmpkLmNvbS8xMDAwMTQxODcyODYuaHRtbCNwcm9kdWN0LWRldGFpbA==\">支持 Docker 的 DS220+</span>则翻了一倍的价格，近 2800 元，而它的配置仅仅才是 J4025+2GB DDR4，也难怪大家常说成品 nas 是 “买软件送硬件”。</p>\n<h4 id=\"diy\"><a class=\"markdownIt-Anchor\" href=\"#diy\">#</a> DIY</h4>\n<p>DIY 相对成品 nas 来说，在经济上有不小的优势。nas 本身也就是一台专门用于数据存储的电脑，一般家用电脑的配置也完全可以满足 nas 的要求，如果不介意使用二手硬件，去海鲜市场淘一下还能把硬件上的成本进一步降低。而且，基于不同的使用场景和不同的预算水平，DIY 的配置完全可以按需购入，而不是在 nas 厂家提供的选项中进行选择。<br>\n系统方面，DIY 除了使用破解版群晖系统 —— 也就是黑群晖外，较为常见的可供选择的开源系统有<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudHJ1ZW5hcy5jb20v\">TrueNas</span>和<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3Blbm1lZGlhdmF1bHQub3JnLw==\">OpenMediaVault</span>，还有最近较为火热的<span class=\"exturl\" data-url=\"aHR0cHM6Ly91bnJhaWQubmV0L3po\">UNRAID</span>。如果习惯 windows 系统，可以考虑 windows server 或者直接 windows 宿主机 + 虚拟机 nas 系统的方法。<br>\n显然，DIY 就是个费时费力的活。不仅需要时间精力的投入，还需要 DIY 玩家有一定的技术水平。另外，在 nas 的 DIY 过程中或是日后的使用中，遇见的问题也只能依靠自己。</p>\n<p>因此，如果只是需要一台基本功能的 nas，又不想太麻烦，同时经济上也相对较宽裕的，可以直接购买入门级的成品 nas。如果就是想折腾，用二手硬件甚至虚拟机先尝试一下 DIY 的 nas 系统也未尝不可。</p>\n<h3 id=\"个人方案\"><a class=\"markdownIt-Anchor\" href=\"#个人方案\">#</a> 个人方案</h3>\n<p>成品 nas 的性价比确实不太美丽，DIY 的系统在尝试过 TrueNas 和 OMV 之后最终选择了后者。<br>\n硬件上，因为一开始的目的是希望搭建个人影视库，所以在尝试了 J1900 的矿渣蜗牛后，升级成了 G6900+h610i+8G DDR4。主板上有 4 个 SATA3 和 1 个 M.2，在机箱空间足够的情况下可以放下 4 块 HDD 和 1 个 SSD，并且可以通过预留给显卡的 PCIe 转接进一步扩展。系统盘则是做在了 32G 的 U 盘里面，这样能从主板上解放一个固态位。</p>\n<h2 id=\"系统安装与设置\"><a class=\"markdownIt-Anchor\" href=\"#系统安装与设置\">#</a> 系统安装与设置</h2>\n<p>omv，全称为 openmediavault，是基于 Linux 内核的 Debian 构建的 nas 系统。omv 在安装上并没有太多困难的，但是因为它是系统与数据相分离的结构 —— 即系统要安装在独立的硬盘上，而我又不太想浪费一个 M.2 硬盘位来装一个 8G 都不到的系统，所以选择了用 U 盘安装。</p>\n<h3 id=\"启动盘制作\"><a class=\"markdownIt-Anchor\" href=\"#启动盘制作\">#</a> 启动盘制作</h3>\n<p>镜像文件直接从<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3Blbm1lZGlhdmF1bHQub3JnLw==\">OMV 官网</span>下载即可。<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/omv-download.2hbjzsq3p3c0.webp\"><br>\n写入 U 盘，这里用的是 rufus，也有用 BalenaEtcher 的。写入完成后，引导盘就做好了。<br>\n<img style=\"width:50%;\" data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/omv-rufus.1keqkhuw88f4.webp\"></p>\n<h3 id=\"安装流程\"><a class=\"markdownIt-Anchor\" href=\"#安装流程\">#</a> 安装流程</h3>\n<p>将做好的引导 U 盘和安装为系统的 U 盘插到 USB 接口上，开机选择引导盘安装。<br>\n语言地区直接选择中文，中国就可以。<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/omv-install.70gqi9uiha80.webp\"><br>\n安装过程中注意要插上网线。如果有多个网口会提示选择一个网口。<br>\n然后这里如果不进行修改的话可以直接回车，默认为 <code>openmediavault.local</code> 。<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/omv-install02.5o6y0v5b8qk0.webp\"><br>\n之后是设置 root 密码，如果直接回车的话则会禁用 root 账户。<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/omv-install03.5i684oqglnw0.webp\"><br>\n接下来如果有多个存储设备，会提示选择要安装的存储设备，这里选择需要安装的那个 U 盘。没有问题的话就开始系统的安装了。<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/omv-install04.3fo9h863so60.webp\"><br>\n系统安装完成后会提示选择镜像，国内可以选择清华源。<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/omv-install05.6j9leomryv00.webp\"><br>\n设置代理服务器，没有可以直接回车，然后等待安装完成。<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/omv-install06.5kci64bdon80.webp\"><br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/omv-install07.1fwkfwb70z1c.webp\"><br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/omv-install08.40k7sqcuzqw.webp\"><br>\n安装完成后，<strong>先不要拔出引导盘</strong>，直接重启系统，选择刚才安装的系统盘启动，进入到命令行界面，再拔出引导盘，完成安装。<br>\n这里如果设置了 root 账户可以用 root 登录。<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/omv-install09.26yo76wa4cys.webp\"><br>\n浏览器访问上面 IP 地址，如：192.168.70.128 即可进入 omv 管理界面。<br>\n默认账户 <code>admin</code> ，密码为 <code>openmediavault</code> 。<br>\n登录后配置仪表盘即如图所示。<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/omv-install10.51twito3vvo0.webp\"><br>\n可以看见 SSH 服务是启动了的，因此我们可以用 windows 的 openSSH 客户端远程连接刚刚安装了 omv 的 nas 进行管理。<br>\n用命令提示符或者 powershell，输入 <code>ssh 用户@IP地址</code> ，然后登录。比如这里是 <code>ssh root@192.168.70.128</code> <br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/omv-install11.1njdplb06jkw.webp\"></p>\n<h3 id=\"设置共享文件夹\"><a class=\"markdownIt-Anchor\" href=\"#设置共享文件夹\">#</a> 设置共享文件夹</h3>\n<p>登录 omv 管理页面后，在右上角更改 admin 密码、设置语言和配置仪表盘。<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/omv-admin.4jp6og2wyra0.webp\"><br>\n然后在<em>网络 - 接口</em>中，将 IPv4 从 DHCP 修改为静态 IP 方便访问。<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/omv-ip.6lyhea86p3o0.webp\"><br>\n所有存储设备可以在<em>存储器 - 磁盘</em>中找到，这里为方便演示使用的是虚拟机。<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/omv-disk.5zjdgg2xdoc0.webp\"><br>\n软 raid 个人因为只有两个硬盘所以做了镜像，可以按照自己实际情况选择。如果硬盘里面有内容会被格式化。<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/omv-raid.28l27jae23ms.webp\"><br>\n然后到<em>文件系统</em>，点击左上角的<em>新建 | 挂载</em>，选择<em>创建</em>将设备挂载上。<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/omv-file-1.5f6zy3ss2ik0.webp\"><br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/omv-file-2.1jnrbj8gxkps.webp\"><br>\n接着到<em>共享文件夹</em>，选择刚才挂载的文件系统进行共享。<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/omv-share-1.32r0r1tun720.webp\"><br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/omv-share-2.3nbyneld7x80.webp\"><br>\n在<em>服务</em>中打开<em> SMB/CIFS</em>，选择<em>共享</em>将刚才的共享文件夹创建上去。<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/omv-share-3.3yzf38f9tbo0.webp\"><br>\n为了方便管理，最好从<em>用户 - 用户</em>，新建一个用户使用共享文件。<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/omv-user.33neyiypd0i0.webp\"><br>\n最后，在自己电脑上将共享文件夹添加上去，就可以使用 omv 的共享文件夹了。</p>\n<h3 id=\"安装-clash\"><a class=\"markdownIt-Anchor\" href=\"#安装-clash\">#</a> 安装 Clash</h3>\n<h4 id=\"配置-clash\"><a class=\"markdownIt-Anchor\" href=\"#配置-clash\">#</a> 配置 Clash</h4>\n<p>在 Clash <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0RyZWFtYWNyby9jbGFzaC9yZWxlYXNlcw==\">release</span>页面下载对应版本，例如 <code>clash-linux-amd64-v3-v1.11.8.gz</code> :<br>\n <code># wget https://github.com/Dreamacro/clash/releases/download/v1.11.8/clash-linux-amd64-v3-v1.11.8.gz</code> <br>\n 然后解压缩并重命名为 <code>clash</code> ，添加可执行权限</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gunzip clash-linux-amd64-v3-v1.11.8.gz      <span class=\"token comment\">#解压缩</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">mv</span> clash-linux-amd64-v3-v1.11.8.gz clash    <span class=\"token comment\">#重命名</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">chmod</span> u+x clash     <span class=\"token comment\">#添加可执行权限</span></pre></td></tr></table></figure><p>之后通过 <code>./clash</code>  启动，第一次启动 clash 时会自动下载配置文件，位置在 <code>/.config/clash</code>  下。<br>\n使用网络服务商的服务，需要先找到提供的 clash 订阅链接，然后下载配置文件并保存到 <code>/.config/clash/config.yaml</code> 。</p>\n<h4 id=\"配置开机启动\"><a class=\"markdownIt-Anchor\" href=\"#配置开机启动\">#</a> 配置开机启动</h4>\n<p>Linux 系统使用 systemd 作为启动服务器管理机制，首先把 Clash 可执行文件拷贝到 <code>/usr/local/bin</code>  目录，相关配置拷贝到 <code>/etc/clash</code>  目录。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> /etc/clash</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">cp</span> clash /usr/local/bin</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">cp</span> config.yaml /etc/clash/</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">cp</span> Country.mmdb /etc/clash/</pre></td></tr></table></figure><p>创建 systemd 服务配置文件 <code>vim /etc/systemd/system/clash.service</code></p>\n<pre><code class=\"language-config\">[Unit]\nDescription=Clash daemon, A rule-based proxy in Go.\nAfter=network.target\n\n[Service]\nType=simple\nRestart=always\nExecStart=/usr/local/bin/clash -d /etc/clash\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>\n<p>使用 systemctl 开启 clash</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl <span class=\"token builtin class-name\">enable</span> clash      <span class=\"token comment\">#clash 开机自启动</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>systemctl start clash       <span class=\"token comment\">#开启 clash</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>systemctl status clash      <span class=\"token comment\">#查看 clash 日志</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>journalctl <span class=\"token parameter variable\">-xe</span></pre></td></tr></table></figure><h4 id=\"使用-webui\"><a class=\"markdownIt-Anchor\" href=\"#使用-webui\">#</a> 使用 webUI</h4>\n<p>如果要使用 webUI 进行管理，则将 clash dashboard 代码也克隆到 <code>/etc/clash</code>  目录<br>\n <code>git clone -b gh-pages --depth 1 https://github.com/Dreamacro/clash-dashboard /etc/clash/clash-dashboard </code> <br>\n同时修改 <code>config.yaml</code>  文件</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>external-controller: <span class=\"token number\">0.0</span>.0.0:9090       <span class=\"token comment\">#修改 ip 地址和端口；</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>external-ui: /etc/clash/clash-dashboard     <span class=\"token comment\">#clash-dashboard 的路径；</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>secret:<span class=\"token string\">'123456'</span>     <span class=\"token comment\">#连接的密钥，自行设置；</span></pre></td></tr></table></figure><p>完成后重启 clash： <code>systemctl restart clash </code> <br>\n之后访问 <code>本地地址:9090/ui</code> ，填写刚才设置的 host、端口和密钥即可。</p>\n<h3 id=\"omv-其他设置\"><a class=\"markdownIt-Anchor\" href=\"#omv-其他设置\">#</a> omv 其他设置</h3>\n<p>官方自带的插件可以在<em>系统 - 插件</em>中找到。<br>\n国内使用清华镜像源可以参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuL2hlbHAvb3Blbm1lZGlhdmF1bHQv\">官方设置</span>。</p>\n<h2 id=\"启用-docker\"><a class=\"markdownIt-Anchor\" href=\"#启用-docker\">#</a> 启用 docker</h2>\n<p>当然，仅靠 omv 自带的功能和系统插件，能实现的效果还是不够，这就需要使用 docker 了。</p>\n<h3 id=\"安装-omv-extras\"><a class=\"markdownIt-Anchor\" href=\"#安装-omv-extras\">#</a> 安装 omv-extras</h3>\n<p>omv 要启用 docker 并在 web 端进行管理的话需要安装 omv-extras。<br>\n官网地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9mb3J1bS5vcGVubWVkaWF2YXVsdC5vcmcvaW5kZXgucGhwP3RocmVhZC81NTQ5LW9tdi1leHRyYXMtb3JnLXBsdWdpbi8=\">https://forum.openmediavault.org/index.php?thread/5549-omv-extras-org-plugin/</span><br>\n 清华大学源：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuL09wZW5NZWRpYVZhdWx0L29wZW5tZWRpYXZhdWx0LXBsdWdpbi1kZXZlbG9wZXJzL3Bvb2wvbWFpbi9vL29wZW5tZWRpYXZhdWx0LW9tdmV4dHJhc29yZy8=\">https://mirrors.tuna.tsinghua.edu.cn/OpenMediaVault/openmediavault-plugin-developers/pool/main/o/openmediavault-omvextrasorg/</span><br>\n 国内还是选择清华大学源。选择对应版本的安装包下载。<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/omv-extras-1.32zh0cwg9vo.webp\"><br>\n命令行安装<br>\n <code>wget https://mirrors.tuna.tsinghua.edu.cn/OpenMediaVault/openmediavault-plugin-developers/pool/main/o/openmediavault-omvextrasorg/openmediavault-omvextrasorg_6.1.1_all.deb</code> <br>\n <code>dpkg -i openmediavault-omvextrasorg_6.1.1_all.deb</code> <br>\n 安装后会提示缺少依赖，按照提示继续输入<br>\n <code>apt --fix-broken install</code> <br>\n 修复依赖关系，然后把系统更新到最新。<br>\n <code>apt update &amp;&amp; apt upgrade</code> <br>\n 然后刷新 omv 网页管理界面，已经有 omv-extras 选项了。<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/omv-extras-2.3y09mp2chec0.webp\"></p>\n<h3 id=\"安装-docker\"><a class=\"markdownIt-Anchor\" href=\"#安装-docker\">#</a> 安装 docker</h3>\n<p>安装完成 omv-extras 可以直接在里面安装 docker 和 portainer，后者是一个可视化的 Docker 操作界面。<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/omv-docker-1.1l29r4p899wg.webp\"><br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/omv-docker-2.48vygos3biw0.webp\"><br>\n安装完成后在 omv 的 9000 端口打开，如此处 <code>192.168.70.128:9000</code> ，这里可以进行 docker 镜像和容器的管理。<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/omv-docker-3.74lbgs5a84c0.webp\"></p>\n<h2 id=\"jellyfin\"><a class=\"markdownIt-Anchor\" href=\"#jellyfin\">#</a> Jellyfin</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qZWxseWZpbi5vcmcv\">Jellyfin</span>是一套多媒体应用程序软件套装，旨在组织、管理和共享数字媒体文件，是 Emby 的一个自由开源分叉。<br>\n这里在服务端安装的 jellyfin 使用的是<span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9yL255YW5taXNha2EvamVsbHlmaW4=\">中国特供版的镜像</span>，它已经打包好了 Intel 驱动（用于使用 QSV 硬解转码）、jellyfin-ffmpeg、补丁、CJK 系统字体等，可以实现开箱即用，免去折腾驱动，中文字体等麻烦。</p>\n<h3 id=\"运行容器\"><a class=\"markdownIt-Anchor\" href=\"#运行容器\">#</a> 运行容器</h3>\n<p>首先拉取容器最新镜像 <code>docker pull nyanmisaka/jellyfin</code> <br>\n 然后这里采用 <code>portainer</code>  安装：<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/jellyfin-install.4wgpta3l9uw0.webp\"><br>\n然后参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qZWxseWZpbi5vcmcvZG9jcy9nZW5lcmFsL2FkbWluaXN0cmF0aW9uL2luc3RhbGxpbmcuaHRtbA==\">Jellyfin 官网</span>在 <code>docker compose file</code>  中填入：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>version: &quot;3.5&quot;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>services:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  jellyfin:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    image: nyanmisaka&#x2F;jellyfin:latest   #使用中国特供版镜像</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    container_name: jellyfin</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    environment:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      - PUID&#x3D;1000</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      - PGID&#x3D;100</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      - TZ&#x3D;Asia&#x2F;Shanghai    #时区使用 Asia&#x2F;Shanghai</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      - JELLYFIN_PublishedServerUrl&#x3D;192.168.0.5 #optional</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    volumes:    #修改磁盘映射</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      - &#x2F;path&#x2F;to&#x2F;config:&#x2F;config #对应配置文件</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      - &#x2F;path&#x2F;to&#x2F;cache:&#x2F;cache   #对应缓存</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      - &#x2F;path&#x2F;to&#x2F;media:&#x2F;media   #对应媒体文件</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      - &#x2F;path&#x2F;to&#x2F;media2:&#x2F;media2:ro</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    ports:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      - 8096:8096 #webUI 端口</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      - 8920:8920 #optional</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      - 7359:7359&#x2F;udp #optional</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      - 1900:1900&#x2F;udp #optional</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    devices:</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      - &#x2F;dev&#x2F;dri:&#x2F;dev&#x2F;dri   #Intel 集显驱动</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    restart: unless-stopped</pre></td></tr></table></figure><p>填写完成后点击 <code>Deploy the stack</code>  即可。<br>\n之后访问 <code>本地地址:8096</code>  端口，成功部署运行会进入 jellyfin 登录界面。</p>\n<h3 id=\"设置-jellyfin\"><a class=\"markdownIt-Anchor\" href=\"#设置-jellyfin\">#</a> 设置 jellyfin</h3>\n<p>进入 web 页面设置其实没什么好记录的，基本上按照顺序把媒体库设置好就可以了。<br>\n硬件转码在<em>控制台 - 播放</em>中开启。<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/jellyfin-set.ejnbskcbgvc.webp\"><br>\n需要注意的是，为了能正确搜刮到元数据的话，对应媒体库的命名尽量参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qZWxseWZpbi5vcmcvZG9jcy9nZW5lcmFsL3NlcnZlci9tZWRpYS9zaG93cy5odG1s\">Jellyfin 推荐命名</span>和<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGhlbW92aWVkYi5vcmcv\">TheMovieDB 剧集</span>来进行。<br>\n举例说明：<br>\n如路人女主是两季 TV + 剧场版，两季 TV 中各有一集 OVA。但是查询 themoviedb 发现 ova 剧集是单独放在特别篇中的：<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/jellyfin-metadata01.4xd0h5aq6lq0.webp\"><br>\n因此两季的 ova 应该被单独拿出来放在 <code>S00</code>  文件夹中，文件目录应该如下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>动画</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>└── 路人女主的养成方法</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ├── S00</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    │   ├── S00E01.mkv #第一季 ova</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    │   └── S00E02.mkv #第二季 ova</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ├── S01</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    │   ├── S01E01.mkv</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    │   ├── S01E02.mkv</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    │   ├── S01E03.mkv</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    │   └── ...</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    └── S02</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        ├── S02E01.mkv</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        └── S02E02.mkv</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        └── ...</pre></td></tr></table></figure><p>正确识别搜刮的元数据如下：<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/jellyfin-metadata02.50j4sdsl9280.webp\"><br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/jellyfin-metadata03.7gbfm29jmkc0.webp\"></p>\n<p>插件上除了使用官方的插件库外还有如下几个：</p>\n<pre><code>#用于从bangumi番组计划搜刮元数据\nhttps://jellyfin-plugin-bangumi.pages.dev/repository.json\n#用于从豆瓣搜刮元数据\nhttps://raw.githubusercontent.com/caryyu/jellyfin-plugin-repo/master/manifest-us.json\n#一个jellyfin主题管理插件\nhttps://raw.githubusercontent.com/danieladov/JellyfinPluginManifest/master/manifest.json\n</code></pre>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/jellyfin-plugin.6uxg0y7jskk0.webp\">\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\">#</a> 参考</h2>\n<ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wb3N0LnNtemRtLmNvbS9wL2F2N3oyNTY0Lw==\">OMV 安装：系统安装设置及一些功能的开启</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2hpcGhlbGwuY29tL3RocmVhZC0yMzc1Nzc3LTEtMS5odG1s\">] Jellyfin 中国特供版 + Docker 镜像，含驱动，免折腾开箱即用</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNjM2NTI4OTk=\">omv 家用 nas 搭建 [4]， jellyfin 部署</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaGltaWt1LmNvbS9hcmNoaXZlcy9kZXBsb3ktYS1tb3JlLWNvbWZvcnRhYmxlLWFuaW1hdGlvbi1saWJyYXJ5LXdpdGgtamVsbHlmaW4tYW5kLWJhbmd1bWkuaHRtbA==\">利用 Jellyfin + Bangumi 打造更舒适的动画媒体库</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qZWxseWZpbi5vcmcvZG9jcy9nZW5lcmFsL3NlcnZlci9tZWRpYS9zaG93cy5odG1s\">Jellyfin 节目命名指南</span></li>\n</ol>\n",
            "tags": [
                "omv",
                "jellyfin"
            ]
        },
        {
            "id": "https://www.umi.homes/posts/58410/",
            "url": "https://www.umi.homes/posts/58410/",
            "title": "gitpage笔记",
            "date_published": "2022-06-18T16:00:00.000Z",
            "content_html": "<h2 id=\"githubpage建站\"><a class=\"markdownIt-Anchor\" href=\"#githubpage建站\">#</a> githubpage 建站</h2>\n<p>主要参看<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vY24vcGFnZXMvcXVpY2tzdGFydA==\">github 的官方文档</span>。</p>\n<h3 id=\"创建站点\"><a class=\"markdownIt-Anchor\" href=\"#创建站点\">#</a> 创建站点</h3>\n<ol>\n<li>在 github 网站任何页面的右上角，使用 <code>+</code>  下拉菜单选择里面的 <code>New  repository</code>  新建仓库。</li>\n<li>输入 <code>username.github.io</code>  作为仓库名。<br>\n实际上不用 <code>username</code>  也可以，但是在后续设置的时候会有需要注意的地方。<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/create-page-1.qrl2d7cw6zk.webp\"></li>\n<li>在仓库中，点击 <code>Setting</code> ，在边栏的 <code>Code and automation</code>  部分，选择 <code>Pages</code> 。</li>\n<li>之后点击 <code>Choose a theme</code>  然后选择一个主题，选择完成后 <code>README.MD</code>  会自动打开，到这一步 gitpage 页面就已经生成了。<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/create-page-2.3ncjx27o20m0.webp\"></li>\n<li>访问 <code>username.github.io</code>  就可以看见刚才创建的站点了。<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/other_note/create-page-3.dbmuewwadm8.webp\"></li>\n</ol>\n<h2 id=\"使用hexo\"><a class=\"markdownIt-Anchor\" href=\"#使用hexo\">#</a> 使用 Hexo</h2>\n<p>使用 gitpage 创建站点还是很简单的，之后就是站点的主题美化和内容创作了。在比较了 <code>Jeklly</code>  和 <code>Hexo</code>  后，我选择了 <code>Hexo</code>  作为工具。</p>\n<h3 id=\"安装hexo\"><a class=\"markdownIt-Anchor\" href=\"#安装hexo\">#</a> 安装 Hexo</h3>\n<p>这部分内容主要参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mv\">Hexo 中文文档</span><br>\nHexo 是一个快速、简洁且高效的博客框架，利用 Markdown 解析文章，生成静态网页。</p>\n<h4 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\">#</a> 安装</h4>\n<ol>\n<li>安装前提\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==\">Node.js</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2dpdC1zY20uY29tLw==\">Git</span></li>\n</ul>\n</li>\n<li>安装 Hexo<br>\n 安装完成 Node.js 和 Git，使用 npm 安装 Hexo。<pre><code>$ npm install -g hexo-cli\n</code></pre>\n</li>\n</ol>\n<h4 id=\"初始化\"><a class=\"markdownIt-Anchor\" href=\"#初始化\">#</a> 初始化</h4>\n<p>Hexo 安装完成后，在我们需要创建博客文档的位置下，输入以下指令初始化博客：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo init <span class=\"token operator\">&lt;</span>blogfolder<span class=\"token operator\">></span>    //存放博客的文档</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> <span class=\"token operator\">&lt;</span>blogfolder<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>$ hexo new <span class=\"token builtin class-name\">test</span>    //生成测试博客</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>$ hexo g</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>$ hexo s    //启动服务器</pre></td></tr></table></figure><p>默认情况下访问 <code>localhost:4000</code>  就可以看见刚才部署完成的效果了</p>\n<h3 id=\"与gitpage关联\"><a class=\"markdownIt-Anchor\" href=\"#与gitpage关联\">#</a> 与 gitpage 关联</h3>\n<p>在刚才创建完成后，本地的文档情况应如下：</p>\n<pre><code>.\n├── _config.yml    //网站配置信息\n├── package.json    //应用程序信息\n├── scaffolds    //模板文件夹\n├── source    //用户资源信息\n│   ├── _drafts\n│   └── _posts //.md博客文档存放位置\n└── themes    //网站主题\n</code></pre>\n<p>在 <code>_config.yml</code>  文件中，找到最后的 <code># Deployment</code> ，并配置如下：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>deploy<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  type<span class=\"token operator\">:</span> git</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  repo<span class=\"token operator\">:</span> https<span class=\"token operator\">:</span><span class=\"token comment\">//github.com/umitsurumi/umitsurumi.github.io.git</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  branch<span class=\"token operator\">:</span> pages</pre></td></tr></table></figure><p>之后为 hexo 安装部署插件：</p>\n<pre><code>npm install hexo-deployer-git --save\n</code></pre>\n<p>然后通过以下三条命令完成部署：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo clean</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ hexo g</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$ hexo d</pre></td></tr></table></figure><p>之后通过之前的 gitpage 域名 <code>username.github.io</code>  就可以对部署好的博客网页进行访问了。</p>\n<h3 id=\"使用主题\"><a class=\"markdownIt-Anchor\" href=\"#使用主题\">#</a> 使用主题</h3>\n<p>Hexo 的主题可以参看<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3RoZW1lcy8=\">官网</span>提供的模板，也可以从 GitHub 仓库中查找。当然也可以自行创作。<br>\n以 <code>https://github.com/wayou/hexo-theme-gstyle</code>  主题为例：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//在博客文件夹下克隆仓库到本地</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token function\">git</span> clone https://github.com/wayou/hexo-theme-gstyle.git themes/gstyle</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//在配置文件_config.yml的theme中修改</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>$ theme: gstyle</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>//然后使用发布命令</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>$ hexo clean <span class=\"token operator\">&amp;&amp;</span> hexo g <span class=\"token operator\">&amp;&amp;</span> hexo d</pre></td></tr></table></figure><h3 id=\"开始写作\"><a class=\"markdownIt-Anchor\" href=\"#开始写作\">#</a> 开始写作</h3>\n<p>使用 <code>$ hexo new [layout] &lt;title&gt;</code>  命令创建一篇新文章或者新页面。</p>\n<pre><code>$ hexo new draft &quot;my-draft&quot;\n</code></pre>\n<p>就会使用 <code>scaffolds</code>  文件夹下面对应的布局文件来创建新文件。<br>\nHexo 有三种默认布局 <code>post</code> 、 <code>page</code>  和 <code>draft</code> ，它们都保存在 <code>scaffolds</code>  文件夹下。而创建这三种不同类型的文件时，它们也会分别保存到不同的路径。自定义的其他布局也和 <code>post</code>  相同，都存储在 <code>source/_posts</code>  文件夹中。</p>\n<h3 id=\"可能遇到的问题\"><a class=\"markdownIt-Anchor\" href=\"#可能遇到的问题\">#</a> 可能遇到的问题</h3>\n<p>可能有 Hexo 使用主题后不生效或者在本地服务器上查看生效而部署后则失效的情况。<br>\n这时候可以查看 <code>_config.yml</code>  文件中的 URL 看配置是否正确：</p>\n<pre><code>url: https://github.com/umitsurumi/umitsurumi.github.io/blog\nroot: /umitsurumi.github.io/\n</code></pre>\n",
            "tags": [
                "hexo"
            ]
        }
    ]
}