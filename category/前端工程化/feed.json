{
    "version": "https://jsonfeed.org/version/1",
    "title": "乌弥的小屋 • All posts by \"前端工程化\" category",
    "description": "乌弥的个人博客",
    "home_page_url": "https://www.umi.homes",
    "items": [
        {
            "id": "https://www.umi.homes/posts/5aa/",
            "url": "https://www.umi.homes/posts/5aa/",
            "title": "前端学习-Vue笔记之1",
            "date_published": "2022-11-20T08:10:35.000Z",
            "content_html": "<p>初学前端笔记整理，Vue 笔记参考自<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbi52dWVqcy5vcmcv\">Vue 官方文档</span></p>\n<h2 id=\"vue-的前置知识\"><a class=\"markdownIt-Anchor\" href=\"#vue-的前置知识\">#</a> Vue 的前置知识</h2>\n<h3 id=\"javascript-的模块化\"><a class=\"markdownIt-Anchor\" href=\"#javascript-的模块化\">#</a> JavaScript 的模块化</h3>\n<p>JavaScript 中最早并没有语言级模块语法，在 web 开发的早期阶段，虽然可以通过拆分为多个文件来解决一份 JavaScript 过长的问题，但是这又导致了更多的新问题：</p>\n<ol>\n<li>多份文件中的同名变量引起变量冲突</li>\n<li>大部分代码缺乏分割，需要整包引入到页面中</li>\n<li>由于整包引入大文件阻塞页面的渲染</li>\n<li>分给出的多份文件引起维护管理困难</li>\n<li>其他问题…</li>\n</ol>\n<p>为了解决这些问题，社区发明了许多方法来将代码组织到模块中，使得使用特殊的库可以按需加载模块。<br>\n模块化的原则就是 “单一职责”，即：一个完整业务的内部实现，不应该将所有代码耦合到一处，而是按实现的功能拆分为代码块，再将这些代码块进行组合。实现某个功能的代码块即为模块。</p>\n<p>模块化的实现有以下这些：</p>\n<table>\n<thead>\n<tr>\n<th>模块化方案</th>\n<th>全称</th>\n<th>适用范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CJS</td>\n<td>CommonJS</td>\n<td>Node 端</td>\n</tr>\n<tr>\n<td>AMD</td>\n<td>Async Module Definition</td>\n<td>浏览器</td>\n</tr>\n<tr>\n<td>CMD</td>\n<td>Common Module Definition</td>\n<td>浏览器</td>\n</tr>\n<tr>\n<td>UMD</td>\n<td>Universal Module Definition</td>\n<td>Node 端和浏览器</td>\n</tr>\n<tr>\n<td>ESM</td>\n<td>ES Module</td>\n<td>Node 端和浏览器</td>\n</tr>\n</tbody>\n</table>\n<p>AMD 是由 <code>require.js</code>  实现的最古老的模块系统之一。CMD 和 UMD 也已经属于过去式的模块化方案。<br>\nCJS（ <code>CommonJS</code> ）原本是服务端的模块化标准（设计之初也叫 <code>ServerJS</code> )，是为 JavaScript 设计的用于浏览器之外的一个模块化方案，Node.js 默认支持了该规范。从 Node12 开始，Node.js 已经支持最新的 <code>ES Module</code>  使用，但是由于历史原因，CJS 仍然是 Node 端较为流行的模块化方案。<br>\nESM（ <code>ES Module</code> ）是 2015 年后在 JavaScript 标准（ES6）中出现的语言级模块系统，经过发展之后已经得到了所有主流浏览器和 Node.js 的支持，可以作为浏览器和服务端通用的模块解决方案。</p>\n<h4 id=\"模块的一些特性\"><a class=\"markdownIt-Anchor\" href=\"#模块的一些特性\">#</a> 模块的一些特性</h4>\n<ol>\n<li>模块中的代码始终是严格模式。</li>\n<li>模块有各自的 “模块级作用域”，一个模块中的顶级作用域变量在另一个模块中是不可见的，需要通过导入 / 导出交换功能。</li>\n<li>模块代码仅在第一次导入时被解析，如果它在多个位置被导入，那么第二次以后的位置会使用第一次导入提供的内容。</li>\n</ol>\n<h4 id=\"commonjs-模块设计\"><a class=\"markdownIt-Anchor\" href=\"#commonjs-模块设计\">#</a> CommonJS 模块设计</h4>\n<p><code>.cjs</code>  文件格式是 Node 专门为 CommonJS 规范设计的，一个采用 CommonJS 的 Node 项目常见结构如下：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>node-cjs</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>│ <span class=\"token comment\"># 源码文件夹</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>├─src</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>│ │ <span class=\"token comment\"># 业务文件夹</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>│ └─cjs</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>│   │ <span class=\"token comment\"># 入口文件</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>│   ├─index.cjs</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>│   │ <span class=\"token comment\"># 模块文件</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>│   └─module.cjs</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>│ <span class=\"token comment\"># 项目清单</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>└─package.json</pre></td></tr></table></figure><p>CJS 使用 <code>module.exports</code>  语法导出模块，可以导出任何合法的 JavaScript 类型。<br>\n <code>require</code>  语法导入模块，当导入模块为 <code>.js</code>  文件时，可以只写文件名，而导入 <code>.cjs</code>  文件则需要全名。</p>\n<ul>\n<li>\n<p>默认导出和导入<br>\n默认导出意为着一个模块只包含一个值，默认导入意味着导入声明的变量即为对应的模块的值。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// src/cjs/module.cjs</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello from module.cjs!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// src/cjs/index.cjs</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> m <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/module.cjs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//package.json 文件中添加 \"scripts\":&#123;\"dev:cjs\": \"node src/cjs/index.cjs\"&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 命令行运行 npm run dev:cjs</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 输出结果为 Hello from module.cjs!</span></pre></td></tr></table></figure></li>\n<li>\n<p>命名导出和导入<br>\n默认导出时，一个模块只包含一个值，命名导出可以以对象的形式导出多个数据：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// src/cjs/module.cjs</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello from foo!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello from bar!\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  foo<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  bar<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// src/cjs/index.cjs</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">const</span> m <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./module.cjs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//m 是一个对象：&#123;foo: 'Hello from foo!', bar: [Function: bar] &#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 或者解构赋值的语法直接拿到变量</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// src/index/index.cjs</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> foo<span class=\"token punctuation\">,</span> bar <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./module.cjs\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>导入时重命名<br>\n如果在不同模块间存在冲突变量，可以通过导入时重命名的方法来解决：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// src/cjs/index.cjs</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> foo2<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 解构赋值导入模块时重命名</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  bar<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./module.cjs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">\"Hi from foo\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 不会产生冲突</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hi from foo</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hello from foo!</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"es-module-模块设计\"><a class=\"markdownIt-Anchor\" href=\"#es-module-模块设计\">#</a> ES Module 模块设计</h4>\n<p>ESM（ <code>ES Module</code> ）是新一代的模块化标准，它是在 ES6（ ECMAScript 2015 ）版本推出的，是原生 JavaScript 的一部分。<br>\n许多新的构建工具（如：Vite）默认只支持 ESM 方案，Node 端在 Node12 后也加入了 ESM 的支持。默认情况下，Node 端需要以 <code>.mjs</code>  扩展名支持 ESM, 一个 ESM 项目结构如下：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>node-esm</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>│ <span class=\"token comment\"># 源码文件夹</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>├─src</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>│ │ <span class=\"token comment\"># 业务文件夹</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>│ └─esm</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>│   │ <span class=\"token comment\"># 入口文件</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>│   ├─index.mjs</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>│   │ <span class=\"token comment\"># 模块文件</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>│   └─module.mjs</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>│ <span class=\"token comment\"># 项目清单</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>└─package.json</pre></td></tr></table></figure><p>ESM 使用 <code>export default</code>  语法默认导出， <code>export</code>  语法命名导出。和 CJS 一样，ESM 也可以导出任何合法的 JavaScript 类型。<br>\n <code>import ... from ...</code>  语法用于导入模块，对应 <code>.js</code>  结尾的文件同样可以省略扩展名。</p>\n<ul>\n<li>\n<p>默认导出和导入<br>\n ESM 的默认导出同样是一个模块包含一个值，导入时声明的变量名即对应模块的值。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// src/esm/module.mjs</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"Hello from module.mjs!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// src/esm/index.mjs</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> m <span class=\"token keyword\">from</span> <span class=\"token string\">\"module.mjs\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hello from module.mjs!</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//package.json 文件中添加 \"scripts\":&#123;\"dev:esm\": \"node src/esm/index.mjs\"&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>命名导出和导入<br>\n与 CJS 不同。ESM 命名导出需要对导出的数据使用 <code>export</code>  进行：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// src/esm/module.mjs</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello from foo!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello from bar!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 或者在声明后导出</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello from foo!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello from bar!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token punctuation\">&#123;</span> foo<span class=\"token punctuation\">,</span> bar <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// src/esm/index.mjs</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> foo<span class=\"token punctuation\">,</span> bar <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./module.mjs\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hello from foo!</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hello from bar!</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 或者使用 * as 变量名 将所有命名导出为一个对象</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> m <span class=\"token keyword\">from</span> <span class=\"token string\">\"./module.mjs\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['bar', 'foo']</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">/* 一般来讲，显式的分别导入比起将所有命名作为对象导入有以下优点：</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  1. 有利于打包工具的 “摇树”（tree-shaking），减小构建体积；</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  2. 明确的导入使名称更短；</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  3. 显示导入可以更好概述代码的结构，明确使用的内容和位置。</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>*/</span></pre></td></tr></table></figure></li>\n<li>\n<p>导出导入时重命名<br>\n ESM 重命名使用 <code>oldName as newName</code>  语法：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 导出时重命名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token punctuation\">&#123;</span> foo <span class=\"token keyword\">as</span> foo1<span class=\"token punctuation\">,</span> bar <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 导入时重命名</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> foo <span class=\"token keyword\">as</span> foo2<span class=\"token punctuation\">,</span> bar <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./module.mjs\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hello from foo!</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hello from bar!</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"浏览器中使用\"><a class=\"markdownIt-Anchor\" href=\"#浏览器中使用\">#</a> 浏览器中使用</h4>\n<p>浏览器中通过属性 <code>&lt;script type=&quot;module&quot;&gt;</code>  告诉浏览器此段脚本应该被当作模块对待。在浏览器中，模块只能通过 <code>http(s)</code>  工作，无法通过 <code>file://</code>  协议运行。</p>\n<ul>\n<li>\n<p>浏览器中模块的特性</p>\n<ol>\n<li>浏览器中模块总是被延迟的，与 <code>defer</code>  的影响相同（不阻塞 HTML 处理，会在文档完全准备就绪后执行，保持脚本的相对顺序）。</li>\n<li>外部的脚本只会执行一次，并且从另一个源获取的外部脚本需要 <code>CORS Header</code> 。</li>\n<li>必须给出绝对或相对 URL 路径，不允许裸模块。</li>\n</ol>\n</li>\n<li>\n<p>动态导入<br>\n <code>import(module)</code>  表达式加载模块并返回一个 <code>promise</code> ，它的 <code>resolve</code>  为一个包含其所有导出的模块对象，可以在代码中任意位置动态地使用它：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// module.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello from foo!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello from bar!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//index.html 动态导入</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 动态导入的 script 标签不需要 `type=\"module\"`</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./module.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"typescript-入门\"><a class=\"markdownIt-Anchor\" href=\"#typescript-入门\">#</a> TypeScript 入门</h3>\n<h4 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h4>\n<p>TypeScript 简称 TS，是 JavaScript 的一个超集，它在 JavaScript 的基础上增加了类型系统，并支持所有的 JavaScript 语法。在工程化开发中使用的 TypeScript，最终会在编译的时候去除特有的代码生成 js 文件。<br>\nTypeScript 的出现是为了弥补 JavaScript 过于灵活，没有类型约束的弊端，减少因为意料之外的类型转换带来的 BUG。</p>\n<h4 id=\"hello-typescript\"><a class=\"markdownIt-Anchor\" href=\"#hello-typescript\">#</a> Hello TypeScript</h4>\n<p>TypeScript 对应的文件扩展名为 <code>.ts</code> ，在 Node 端中使用 TypeScript 需要以下两个依赖：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-D</span> typescript ts-node</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#  package.json 文件中添加 \"scripts\":&#123;\"dev:ts\": \"ts-node src/ts/index.ts\"&#125;</span></pre></td></tr></table></figure><p>然后在 <code>/src/ts/index.ts</code>  中编辑：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span>msg<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello TypeScript!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/* 运行 npm run dev:ts 报错</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  Argument of type 'number' is not assignable to parameter of type'string'.</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  5 greeting (123);</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  不合法的数值类型（number）被检测出来了</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 去除后正常运行</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span>msg<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello TypeScript!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hello TypeScript!</span></pre></td></tr></table></figure><p><code>msg: string</code>  指定了入参的数据类型，不合法的数值类型导致报错，从而解决了由于 JavaScript 这种弱类型语言本身带来的一些缺陷。</p>\n<h4 id=\"常见-ts-类型定义\"><a class=\"markdownIt-Anchor\" href=\"#常见-ts-类型定义\">#</a> 常见 TS 类型定义</h4>\n<ol>\n<li>\n<p>原始数据类型<br>\n TypeScript 中的原始数据类型与 JavaScript 相同，定义时只需要在变量后加上类型声明：</p>\n<table>\n<thead>\n<tr>\n<th>原始数据类型</th>\n<th>JavaScript</th>\n<th>TypeScript</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>字符串</td>\n<td>String</td>\n<td>string</td>\n</tr>\n<tr>\n<td>数值</td>\n<td>Number</td>\n<td>number</td>\n</tr>\n<tr>\n<td>布尔值</td>\n<td>Boolean</td>\n<td>boolean</td>\n</tr>\n<tr>\n<td>大整数</td>\n<td>BigInt</td>\n<td>bigint</td>\n</tr>\n<tr>\n<td>符号</td>\n<td>Symbol</td>\n<td>symbol</td>\n</tr>\n<tr>\n<td>不存在</td>\n<td>Null</td>\n<td>null</td>\n</tr>\n<tr>\n<td>未定义</td>\n<td>Undefined</td>\n<td>undefined</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> str<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> num<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> bool<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 如果没有显示的声明也不会报错，TS 会根据声明变量时的赋值自动推导变量类型</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> isAdmin <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>数值<br>\n数组有两种定义方法：</p>\n<table>\n<thead>\n<tr>\n<th>数组里的数据</th>\n<th>类型写法 1</th>\n<th>类型写法 2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>字符串</td>\n<td>string[]</td>\n<td>Array&lt;string&gt;</td>\n</tr>\n<tr>\n<td>数值</td>\n<td>number[]</td>\n<td>Array&lt;number&gt;</td>\n</tr>\n<tr>\n<td>布尔值</td>\n<td>boolean[]</td>\n<td>Array&lt;boolean&gt;</td>\n</tr>\n<tr>\n<td>大整数</td>\n<td>bigint[]</td>\n<td>Array&lt;bigint&gt;</td>\n</tr>\n<tr>\n<td>符号</td>\n<td>symbol[]</td>\n<td>Array&lt;symbol&gt;</td>\n</tr>\n<tr>\n<td>不存在</td>\n<td>null[]</td>\n<td>Array&lt;null&gt;</td>\n</tr>\n<tr>\n<td>未定义</td>\n<td>undefined[]</td>\n<td>Array&lt;undefined&gt;</td>\n</tr>\n</tbody>\n</table>\n<p>类似的，如果数组在初始化的时候有初始数据，TS 会根据初始数据类型自动推导数组的类型。对于空数组，则必须显示的指定其类型，否则 TS 会认为其为 <code>any[]</code>  或 <code>never[]</code> 。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> nums<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//number [] 语法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> strArr<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Array&lt;string > 语法</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> strs<span class=\"token operator\">:</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Alex'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 根据初始值自动推断</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> objs<span class=\"token operator\">:</span> object<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 对象可以使用对象数组</span></pre></td></tr></table></figure></li>\n<li>\n<p>对象<br>\n对象类型定义有两种语法支持</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//type 写法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Object</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//interface 写法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Object</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>大部分情况下，两者并无太大的区别，这里以 <code>interface</code>  写法为例。<br>\n在 TypeScript 中，对象常推荐用大驼峰写法来以示区别。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义用户对象类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserItem</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  name<span class=\"token operator\">:</span> sting<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义属性的类型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  age<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ? 表示可选属性</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 声明对象时将其关联到类型上</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> user<span class=\"token operator\">:</span> UserItem <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  age<span class=\"token operator\">:</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果一些属性的结构和自身一直，也可以直接调用。<br>\n而使用 <code>extends</code>  关键词还可以实现继承：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserItem</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  enjoyFoods<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  friendList<span class=\"token operator\">:</span> UserItem<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这个属性引用了本身的类型</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> petter<span class=\"token operator\">:</span> UserItem <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token string\">\"Petter\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  age<span class=\"token operator\">:</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  enjoyFoods<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"rice\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"noodle\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pizza\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  friendList<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      name<span class=\"token operator\">:</span> <span class=\"token string\">\"Marry\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      age<span class=\"token operator\">:</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      enjoyFoods<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"pizza\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ice cream\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      friendList<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      name<span class=\"token operator\">:</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      age<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      enjoyFoods<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"chicken\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cake\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      friendList<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// Admin 继承了 UserItem 所有属性，并增加了一个权限等级</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Admin</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">UserItem</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  permissionLevel<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 继承时可以删除多余的属性</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">// type Omit&lt;T, K extends string | number | symbol></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">// T 代表已有的对象类型，K 代表要删除的属性名，多个属性用 | 隔开</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Admin</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Omit<span class=\"token operator\">&lt;</span>UserItem<span class=\"token punctuation\">,</span> <span class=\"token string\">\"enjoyFoodS\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"friendList\"</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  permissionLevel<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>类<br>\n通过类得到的变量，它的类型就是这个类：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 在 constructor 上的数据需要先定义类型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 入参也需要定义类型</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>userName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> userName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 而通过 new 得到的变量，它的类型就是这个类</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">const</span> petter<span class=\"token operator\">:</span> User <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"petter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>petter<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// petter</span></pre></td></tr></table></figure><p>类和类，类和对象（接口）之间可以通过 <code>extends</code>  继承：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">UserBase</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>userName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> userAge<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> userName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> userAge<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 类的继承</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Admin</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">UserBase</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  isAdmin<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 接口也可以继承自类</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Omit<span class=\"token operator\">&lt;</span>Admin<span class=\"token punctuation\">,</span> <span class=\"token string\">\"isAdmin\"</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>\n<p>联合类型与任意值<br>\n当一个变量可能出现多种类型值时，TypeScript 也允许使用联合类型来定义它，语法是在类型之间插入 <code>|</code>  符号分隔。<br>\n对于实在无法确定类型的变量，可以通过显示指定变量为任意值来解决，但是当使用时需要考虑程序的健壮性。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">The count is</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>count<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 无论是数字还是字符串都不会报错</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// The count is 1.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// The count is 2.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 显示指定为 any，因此以下代码也都可以正常运行</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">let</span> msg<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>msg <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>msg <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n<h4 id=\"typescript-函数\"><a class=\"markdownIt-Anchor\" href=\"#typescript-函数\">#</a> TypeScript 函数</h4>\n<ol>\n<li>\n<p>函数的基本写法<br>\n TypeScript 的函数写法对比 JavaScript 的函数，就是在入参和出参的位置限定数据类型：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 函数声明</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">sum1</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 2. 函数表达式</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sum2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 3. 箭头函数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">const</span> sum3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 4. 对象上写法</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token function\">sum4</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>可选参数与返回值</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 和接口类似，如果是可选参数可以用？来表示</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 但可选参数的位置必须要在必传参数的后面</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> isDouble<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">return</span> isDouble <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">:</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 有返回值的函数使用类型指定返回值，对于无返回值的函数使用 void 指定</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span>greeting<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>greeting<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hello, John!</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//void 与 null 和 undefined 不可混用，它们表达的是不同的含义</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 异步函数的返回值需要用 Promise&lt;T > 来定义</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">queryData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token function\">queryData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>函数的类型与重载<br>\n通常，对于箭头函数表达式声明的函数，TypeScript 会根据函数体自动推导变量的类型，如果有必要，也可以显示定义：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 自动推导的类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> sum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">number</span><span class=\"token operator\">:</span> x<span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token operator\">:</span> y<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 或者显示定义</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sum</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/* 实际上可以认为是三部分</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  const sum: (x: number, y: number) => number 是函数的名称和类型</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  = (x:number, y:number) 是声明了函数的入参和类型</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  : number => x + y 是函数返回值和类型</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> */</span></pre></td></tr></table></figure><p>当一个 API 有多个 TS 类型时，可以通过 <code>|</code>  接受多个类型，但更好的方法是利用函数的重载优化代码：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TS 类型，入参 string 时返回值也是 string</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TS 类型，入参 string [] 时返回值也是 string []</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 这段开始才是函数体</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Array</span><span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Welcome, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>n<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Welcome, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"编译为-javascript\"><a class=\"markdownIt-Anchor\" href=\"#编译为-javascript\">#</a> 编译为 JavaScript</h4>\n<p>在浏览器中运行时，所有 TypeScript 需要被编译为 JavaScript 代码才能正常运行。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//package.json 中添加以下字段对 ts 文件进行编译</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string-property property\">\"scripts\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token string-property property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc src/ts/index.ts --outDir dist\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/* --outDir 是指定输出目录的选项，运行 npm run build 会将编译后的 js 文件</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   --target es6 可以指定编译的 js 版本，如果是 es6 后，编译的多个 TS 模块会是 ESM 模块化风格，如果在 es6 之前，则编译的模块是 CJS 风格</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   --module 可以指定编译后是 CJS 还是 ESM 规范</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>*/</span></pre></td></tr></table></figure><p>TypeScript 项目，全局安装 <code>typescript</code>  后可以通过 <code>tsc --init</code>  初始化 <code>tsconfig.json</code>  文件。通过这个配置文件可以按照要求对 <code>.ts</code>  文件进行编译。<br>\n但在实际的项目中，一般情况下，通过借助脚手架工具的帮助，在创建项目时就可以配置好通用的模板选项，只有在不满足要求时，才需要去进行调整。</p>\n<h2 id=\"hello-vue3\"><a class=\"markdownIt-Anchor\" href=\"#hello-vue3\">#</a> Hello Vue3!</h2>\n<h3 id=\"vue-简介\"><a class=\"markdownIt-Anchor\" href=\"#vue-简介\">#</a> Vue 简介</h3>\n<p>Vue（发音 /vju:/，类似 view）是一款用于构建用户界面的 JavaScript 框架，它提供了一套声明式的、组件化的编程模型。</p>\n<h4 id=\"vue-特点\"><a class=\"markdownIt-Anchor\" href=\"#vue-特点\">#</a> Vue 特点</h4>\n<ul>\n<li>声明式：Vue 基于标准 HTML 扩展了一套模板语法，可以声明式地描述最终输出 HTML 和 JavaScript 之间的关系</li>\n<li>响应性：Vue 会自动跟踪 JavaScript 状态并在其发生变化时响应式地更新 DOM</li>\n<li>渐进式框架：Vue 设计注重灵活性和 “可以被逐步集成” 性，使得它可以被集成到任何场景</li>\n</ul>\n<h4 id=\"单文件组件\"><a class=\"markdownIt-Anchor\" href=\"#单文件组件\">#</a> 单文件组件</h4>\n<p>Vue 组件是一种单文件组件（Single-File Component，SFC），它会将一个组件的逻辑（JavaScript）、结构（HTML）和样式（CSS）封装到同一个文件里面：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>count++<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Count is: <span class=\"token comment\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token selector\">button</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> bold<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>单组件文件必须使用构建工具，但是它带来了很多优点：例如关注点的自然内聚、组件作用域的 CSS、热更新支持…… 等等。<br>\n任何单组件都将交由 <code>@vue/compiler-sfc</code>  编译为标准的 JavaScript 和 CSS，一个编译后的 SFC 就是一个标准的 ESM 的 JavaScript 模块，因此可以像导入其他模块一样导入它。 <code>style</code>  标签里的样式会被抽离并合并成一个单独的 CSS 文件。</p>\n<h4 id=\"api-风格\"><a class=\"markdownIt-Anchor\" href=\"#api-风格\">#</a> API 风格</h4>\n<p>Vue 组件有两种书写风格：选项式 API 和组合式 API：</p>\n<ul>\n<li>\n<p>选项式 API</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//data () 返回的属性都将成为响应式状态并暴露在 this 上</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//methods 是一些更改状态与触发更新的函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">//computed 是 vue 中一个计算属性的 API</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token function\">double</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">//mounted 是生命周期钩子，它会在组件生命周期的不同阶段被调用</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">The initial count is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>组合式 API<br>\n 组合式 API 常与 <code>&lt;script setup&gt;</code>  一同使用，Vue 在编译时会进行一些预处理，使得可以用更方便简洁的方式书写组合式 API:</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">setup</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ref<span class=\"token punctuation\">,</span> onMounted <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 响应式状态</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 修改触发更新的函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    count<span class=\"token punctuation\">.</span>value<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 生命周期钩子</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">onMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">The initial count is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ul>\n<p>两种 API 风格都是 Vue 推荐的，它们的底层实现相同，实际上选项式 API 是在组合式 API 的基础上实现的。在低复杂度、不需要使用构建工具的场景，Vue 推荐选项式 API；在使用 Vue 构建完整的单页面应用时，Vue 推荐组合式 API 和单文件组件。</p>\n<h3 id=\"创建-vue-应用\"><a class=\"markdownIt-Anchor\" href=\"#创建-vue-应用\">#</a> 创建 Vue 应用</h3>\n<p>安装最新版的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==\">Node.js</span>后，在命令行使用 <code>npm init vue</code>  创建一个 Vue 应用：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>✔ Project name: … <span class=\"token operator\">&lt;</span>your-project-name<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>✔ Add TypeScript? … No / Yes</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>✔ Add JSX Support? … No / Yes</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>✔ Add Vue Router <span class=\"token keyword\">for</span> Single Page Application development? … No / Yes</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>✔ Add Pinia <span class=\"token keyword\">for</span> state management? … No / Yes</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>✔ Add Vitest <span class=\"token keyword\">for</span> Unit testing? … No / Yes</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>✔ Add Cypress <span class=\"token keyword\">for</span> both Unit and End-to-End testing? … No / Yes</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>✔ Add ESLint <span class=\"token keyword\">for</span> code quality? … No / Yes</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>✔ Add Prettier <span class=\"token keyword\">for</span> code formatting? … No / Yes</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Scaffolding project <span class=\"token keyword\">in</span> ./<span class=\"token operator\">&lt;</span>your-project-name<span class=\"token operator\">></span><span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Done.</pre></td></tr></table></figure><p>这个命令会安装并执行 <code>create-vue</code> ，这是 Vue 官方推荐的脚手架工具。生成的项目中使用的是组合式 API。<br>\nTypeScript 是 JavaScript 的一个超集，为 JavaScript 增加了静态类型。<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yb3V0ZXIudnVlanMub3JnL3poLw==\">VueRouter</span> 是 Vue.js 的官方路由，Vue3 对应 v4.x 版本，Vue2 对应 v3.x 版本。<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9waW5pYS52dWVqcy5vcmcvemgvaW5kZXguaHRtbA==\">Pinia</span> 是支持 Vue3 的 Vue 状态管理库，另一个 Vue 状态管理库是 Vuex。<br>\nESlint 的主要功能包括代码格式化和代码质量的校验，Prettier 只包含对代码格式的校验。<br>\n对 Vue3 的项目来说，因为 Vue3 添加了对 TypeScript 的支持，所以推荐使用 Vue3+Vite+TS+Pinia+VueRouter 来进行。Vite 和 Pinia 也是官方推荐的构建工具和状态管理库。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 之后进入刚才的目录，按照提示运行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">npm</span> run dev</pre></td></tr></table></figure><p>一个 Vue 的 demo 项目就已经运行起来了。</p>\n",
            "tags": [
                "前端",
                "JavaScript",
                "Vue"
            ]
        }
    ]
}