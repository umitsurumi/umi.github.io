{
    "version": "https://jsonfeed.org/version/1",
    "title": "乌弥的小屋",
    "subtitle": "等待和希望，人类的智慧就包含在这两个词中",
    "icon": "https://www.umi.homes/images/favicon.ico",
    "description": "乌弥的个人博客",
    "home_page_url": "https://www.umi.homes",
    "items": [
        {
            "id": "https://www.umi.homes/posts/58bb/",
            "url": "https://www.umi.homes/posts/58bb/",
            "title": "MyBatis学习笔记",
            "date_published": "2023-08-19T16:00:00.000Z",
            "content_html": "<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h2>\n<p>MyBatis 是一款优秀的持久层框架，它最初是 Apache 的一个开源项目名为 iBatis，这一词来源于 internet 和<br>\n abatis 的组合。2010 年 6 月这个项目由 Apache Software Foundation 迁移到了 Google Code。随着开发团队转投<br>\n Google Code 旗下， iBatis3.x 正式更名为 MyBatis。代码于 2013 年 11 月迁移到 Github。</p>\n<p>特点：</p>\n<ul>\n<li>MyBatis 支持定制化 SQL、存储过程以及高级映射；</li>\n<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及结果集解析操作；</li>\n<li>Mybatis 可以使用简单的 XML 或注解来配置和映射原生类型、接口和 Java 的 POJO (Plain Old Java<br>\nObject，普通老式 Java 对象) 为数据库中的记录；</li>\n<li>Mybatis 是一个轻量级，半自动的 ORM（Object Relation Mapping）框架。</li>\n</ul>\n<p>对比：</p>\n<ul>\n<li>JDBC：\n<ul>\n<li>SQL 语句夹杂在 Java 代码中，耦合度高，硬编码不利于 SQL 语句修改</li>\n<li>代码冗长，开发效率低，但是运行效率较高</li>\n</ul>\n</li>\n<li>Hibernate：\n<ul>\n<li>内部自动生成 SQL 语句，不利于进行特殊优化，部分长难 SQL 需要绕过框架</li>\n<li>全映射的自动框架，操作简单，开发效率高，但是反射操作较多，导致性能下降</li>\n</ul>\n</li>\n<li>MyBatis：\n<ul>\n<li>SQL 语句与 Java 编码分开，功能边界清晰</li>\n<li>轻量级半自动框架，开发效率较 Hibernate 低</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"基本使用\"><a class=\"markdownIt-Anchor\" href=\"#基本使用\">#</a> 基本使用</h2>\n<h3 id=\"环境搭建\"><a class=\"markdownIt-Anchor\" href=\"#环境搭建\">#</a> 环境搭建</h3>\n<h4 id=\"新建-maven-项目\"><a class=\"markdownIt-Anchor\" href=\"#新建-maven-项目\">#</a> 新建 Maven 项目</h4>\n<p>引入 MyBatis 最简单的方法是使用 Maven 来搭建项目，并在 Maven 的 <code>pom.xml</code>  文件中引入相关依赖：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- pom.xml --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">&lt;!-- 引入 mybatis 依赖包 --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.5.13<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">&lt;!-- 引入 mysql 驱动，连接 mysql 数据库 --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-j<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>8.0.33<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">&lt;!-- 引入 lombok 依赖包，简化 pojo 类编写 --></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.18.28<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>provided<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">&lt;!-- 引入 junit 依赖包，便于进行单元测试 --></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.13.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token comment\">&lt;!-- 引入 log4j2 依赖包，用于获取日志信息 --></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.logging.log4j<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>log4j-core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.20.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"准备测试数据库\"><a class=\"markdownIt-Anchor\" href=\"#准备测试数据库\">#</a> 准备测试数据库</h4>\n<p>resources 目录下新建 sql 目录，用于放置数据库文件，并新建一张用户表，用于查询：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">database</span> mybatis<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">use</span> mybatis<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> t_user</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    u_id     <span class=\"token keyword\">int</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    u_name   <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>            <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">unique</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    u_age    <span class=\"token keyword\">int</span>                    <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">default</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    u_gender <span class=\"token keyword\">enum</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'MALE'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'FEMALE'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">default</span> <span class=\"token string\">'MALE'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>resources 目录下编写 <code>dev.properties</code>  文件，用于书写连接数据库的配置。因为可能 MyBatis<br>\n 中有不止一个数据库环境，所有增加前缀，如 <code>dev</code>  来进行区分：</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key attr-name\">dev.driver</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">com.mysql.cj.jdbc.Driver</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key attr-name\">dev.url</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">jdbc:mysql://localhost:3306/mybatis</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key attr-name\">dev.username</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">root</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key attr-name\">dev.password</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">123456</span></pre></td></tr></table></figure><h4 id=\"准备-java-代码\"><a class=\"markdownIt-Anchor\" href=\"#准备-java-代码\">#</a> 准备 Java 代码</h4>\n<ol>\n<li>\n<p>编写 pojo<br>\n 创建软件包 <code>com.example.mybatis.pojo</code> ，并编写 <code>User</code>  类：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@AllArgsConstructor</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@NoArgsConstructor</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> uId<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> uName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> uAge<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Gender</span> uGender<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>编写枚举类 <code>Gender</code>  表示用户性别：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Gender</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token constant\">MALE</span><span class=\"token punctuation\">,</span><span class=\"token constant\">FEMALE</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>编写 mapper<br>\n 创建软件包 <code>com.example.mybatis.mapper</code> ，并编写 <code>UserMapper</code>  接口：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserMapper</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token keyword\">int</span> <span class=\"token function\">insertUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token keyword\">int</span> <span class=\"token function\">deleteUserById</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token keyword\">int</span> <span class=\"token function\">updateUserById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token class-name\">User</span> <span class=\"token function\">selectUserById</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>MyBatis 中通过 Mapper 接口来进行数据库相关操作，Mapper 相当于 Dao 一层，但是与 Dao<br>\n 不同的是，这里只需要提供接口而不需要提供实现类。</p>\n</li>\n</ol>\n<h4 id=\"准备配置文件\"><a class=\"markdownIt-Anchor\" href=\"#准备配置文件\">#</a> 准备配置文件</h4>\n<ol>\n<li>\n<p>准备 MyBatis 核心配置文件<br>\n MyBatis 核心配置文件，或者称为 MyBatis 全局配置文件，习惯上命名为 <code>mybatis-config.xml</code> ，放在<br>\n src/main/resources 目录下。参考官网的简单示例如下：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">configuration</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//mybatis.org//DTD Config 3.0//EN\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"https://mybatis.org/dtd/mybatis-3-config.dtd\"</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">&lt;!-- properties 标签引入外部属性配置文件 --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span> <span class=\"token attr-name\">resource</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dev.properties<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">&lt;!-- environments 标签用于配置数据源环境 --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environments</span> <span class=\"token attr-name\">default</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dev<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">&lt;!-- environment 标签用于配置某一个具体的数据源环境 --></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environment</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dev<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token comment\">&lt;!-- 配置事务管理器 --></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>transactionManager</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>JDBC<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">&lt;!-- 配置数据源和各项连接信息 --></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dataSource</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>POOLED<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>driver<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;dev.driver&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;dev.url&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;dev.username&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;dev.password&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dataSource</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environment</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environments</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">&lt;!-- mappers 标签中注册映射文件信息 --></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mappers</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">&lt;!-- mapper 标签用于配置一个具体的映射文件 --></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">resource</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mapper/UserMapper.xml<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mappers</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>准备 mapper 映射配置文件<br>\n mapper 映射配置文件，命名应该与对应的 Mapper 接口保持一致，例如此处应为 <code>UserMapper.xml</code> <br>\n。路径应该与全局配置文件中的注册映射位置一致，例如此处应该为 resources/mapper 路径下：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">mapper</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token string\">\"https://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">&lt;!-- mapper 是根标签，namespace 属性中书写 mapper 接口的全类名 --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">namespace</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.mybatis.mapper.UserMapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">&lt;!--  子标签名与 sql 方法保持一致，id 指定 mapper 接口中的对应方法名，标签中书写具体 sql 语句  --></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>insert</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>insertUser<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        insert t_user(u_name,u_age,u_gender) values('john',28,'MALE')</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>insert</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>delete</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>deleteUserById<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        delete from t_user where u_id = 1</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>delete</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>update</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>updateUserById<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        update t_user set u_name = \"tom\" where u_id = 1</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>update</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">&lt;!--  resultType 指定查询结果要封装的 Java 实体类，属性和列名会自动进行映射  --></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectUserById<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.mybatis.pojo.User<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        select u_id uId,u_name Uname,u_age uAge,u_gender uGender from t_user where u_id = 1</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mapper</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>准备 log4j2 日志配置文件<br>\n log4j2 是 Apache 对 log4j 进行重构后的升级版本，是现目前最优秀的 Java<br>\n 日志框架。使用日志框架可以很方便地记录程序的运行信息，便于监控系统运行状况以及回溯系统故障。<br>\nlog4j2 默认情况下会在 ClassPath 路径下查找 <code>log4j2.xml</code>  的配置文件，这里也将配置文件放在 resources<br>\n 目录下：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Configuration</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ConfigTest<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">status</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>info<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">monitorInterval</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Appenders</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Console</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Console<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SYSTEM_OUT<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PatternLayout</span> <span class=\"token attr-name\">pattern</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Console</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Appenders</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Loggers</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Root</span> <span class=\"token attr-name\">level</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>debug<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>AppenderRef</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Console<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Root</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Loggers</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>这里配置了全局的 <code>debug</code>  级别日志输出，并且指定了输出路径是打印到控制台。</p>\n</li>\n</ol>\n<h4 id=\"编写测试类\"><a class=\"markdownIt-Anchor\" href=\"#编写测试类\">#</a> 编写测试类</h4>\n<p>在 test/java 目录下创建软件包 <code>com.example.mybatis.test</code> ，并创建 <code>UserMapperTest</code>  测试类，此时整个项目的路径如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>project<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>├── pom.xml</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>└── src</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ├── main</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    │   ├── <span class=\"token function\">java</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    │   │   └── com</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    │   │       └── example</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    │   │           └── mybatis</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    │   │               ├── mapper</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    │   │               │   └── UserMapper.java</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    │   │               └── pojo</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    │   │                   ├── Gender.java</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    │   │                   └── User.java</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    │   └── resources</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    │       ├── dev.properties</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    │       ├── log4j2.xml</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    │       ├── mapper</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    │       │   └── UserMapper.xml</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    │       ├── mybatis-config.xml</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    │       └── sql</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    │           └── t_user.sql</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    └── <span class=\"token builtin class-name\">test</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        └── <span class=\"token function\">java</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            └── com</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                └── example</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    └── mybatis</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                        └── <span class=\"token builtin class-name\">test</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                            └── UserMapperTest.java</pre></td></tr></table></figure><p>编写测试类 <code>UserMapperTest</code> ：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// @Log4j2 注解用于生成 log 日志</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Log4j2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserMapperTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token class-name\">SqlSession</span> sqlSession<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// @Before 指定每次执行 @Test 测试前操作</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token annotation punctuation\">@Before</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">InputStream</span> is<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token comment\">// 以输入流的形式，读取 MyBatis 的全局配置文件</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      is <span class=\"token operator\">=</span> <span class=\"token class-name\">Resources</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mybatis-config.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 创建 SqlSessionFactoryBuilder 对象</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">SqlSessionFactoryBuilder</span> factoryBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionFactoryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 基于读取的 MyBatis 配置文件流，创建 SqlSessionFactory 对象</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token class-name\">SqlSessionFactory</span> factory <span class=\"token operator\">=</span> factoryBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 使用 SqlSessionFactory 对象开启一个会话</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    sqlSession <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">// @After 指定每次执行 @Test 测试后操作</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token annotation punctuation\">@After</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 测试结束后，关闭 sqlSession</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sqlSession <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token comment\">// @Test 指定需要进行测试的方法</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertUserTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 根据 Mapper 接口类型获取 Mapper 接口类型的对象</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token class-name\">UserMapper</span> mapper <span class=\"token operator\">=</span> sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// 执行 mapper 接口的方法，完成对数据库的操作，这里因为 sql 语句中写死了插入的值，所以传入一个空的 user 对象就可以</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">insertUser</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">// 配置文件中配置了事务管理，增删改操作需要提交后才能生效</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行测试后，可以通过日志信息看见输出结果如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> DEBUG com.example.mybatis.mapper.UserMapper.insertUser - <span class=\"token operator\">==</span><span class=\"token operator\">></span>  Preparing: insert t_user<span class=\"token punctuation\">(</span>u_name,u_age,u_gender<span class=\"token punctuation\">)</span> values<span class=\"token punctuation\">(</span><span class=\"token string\">'john'</span>,28,<span class=\"token string\">'MALE'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> DEBUG com.example.mybatis.mapper.UserMapper.insertUser - <span class=\"token operator\">==</span><span class=\"token operator\">></span> Parameters:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> DEBUG com.example.mybatis.mapper.UserMapper.insertUser - <span class=\"token operator\">&lt;=</span><span class=\"token operator\">=</span>    Updates: <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> DEBUG org.apache.ibatis.transaction.jdbc.JdbcTransaction - Committing JDBC Connection <span class=\"token punctuation\">[</span>com.mysql.cj.jdbc.ConnectionImpl@72ba28ee<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.example.mybatis.test.UserMapperTest - <span class=\"token number\">1</span></pre></td></tr></table></figure><p>完成以上步骤，并成功运行，便搭建了一个基础的 MyBatis 项目环境。</p>\n<h3 id=\"单表操作\"><a class=\"markdownIt-Anchor\" href=\"#单表操作\">#</a> 单表操作</h3>\n<h4 id=\"sql-传参\"><a class=\"markdownIt-Anchor\" href=\"#sql-传参\">#</a> SQL 传参</h4>\n<p>给 sql 语句传参有两种方式，一种是使用 <code>$&#123;&#125;</code> ，另一种是使用 <code>#&#123;&#125;</code> ，它们区别如下：</p>\n<ol>\n<li><code>$&#123;&#125;</code>  形式</li>\n</ol>\n<ul>\n<li>底层使用字符串拼接，存在 sql 注入问题</li>\n<li>灵活性较高，使用动态数据库列名或表名时只能采用此方式</li>\n<li>示例：<br>\n更改 <code>UserMapper.xml</code>  中查询方法，使用 <code>$&#123;&#125;</code>  形式：<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectUserById<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.mybatis.pojo.User<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    select u_id uId,u_name Uname,u_age uAge,u_gender uGender from t_user where u_id = $&#123;uId&#125;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure>编写测试方法，传入查询值：<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">selectUserByIdTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token class-name\">UserMapper</span> mapper <span class=\"token operator\">=</span> sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectUserById</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>日志输出测试结果如下：<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> DEBUG com.example.mybatis.mapper.UserMapper.selectUserById - <span class=\"token operator\">==</span><span class=\"token operator\">></span>  Preparing: <span class=\"token keyword\">select</span> u_id uId,u_name Uname,u_age uAge,u_gender uGender from t_user where u_id <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> DEBUG com.example.mybatis.mapper.UserMapper.selectUserById - <span class=\"token operator\">==</span><span class=\"token operator\">></span> Parameters:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> DEBUG com.example.mybatis.mapper.UserMapper.selectUserById - <span class=\"token operator\">&lt;=</span><span class=\"token operator\">=</span>      Total: <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.example.mybatis.test.UserMapperTest - User<span class=\"token punctuation\">(</span>uId<span class=\"token operator\">=</span><span class=\"token number\">1</span>, <span class=\"token assign-left variable\">uName</span><span class=\"token operator\">=</span>john, <span class=\"token assign-left variable\">uAge</span><span class=\"token operator\">=</span><span class=\"token number\">28</span>, <span class=\"token assign-left variable\">uGender</span><span class=\"token operator\">=</span>MALE<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"2\">\n<li><code>#&#123;&#125;</code>  形式</li>\n</ol>\n<ul>\n<li>\n<p>底层使用</p>\n</li>\n<li>\n<p>能防止 sql 注入，安全性较高，开发中优先考虑此方式</p>\n</li>\n<li>\n<p>示例：<br>\n更改 <code>UserMapper.xml</code>  中查询方法，使用 <code>#&#123;&#125;</code>  形式：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectUserById<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.mybatis.pojo.User<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    select u_id uId,u_name Uname,u_age uAge,u_gender uGender from t_user where u_id = #&#123;uId&#125;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>测试方法与刚才完全相同，日志输出测试结果如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> DEBUG com.example.mybatis.mapper.UserMapper.selectUserById - <span class=\"token operator\">==</span><span class=\"token operator\">></span>  Preparing: <span class=\"token keyword\">select</span> u_id uId,u_name Uname,u_age uAge,u_gender uGender from t_user where u_id <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> DEBUG com.example.mybatis.mapper.UserMapper.selectUserById - <span class=\"token operator\">==</span><span class=\"token operator\">></span> Parameters:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> DEBUG com.example.mybatis.mapper.UserMapper.selectUserById - <span class=\"token operator\">&lt;=</span><span class=\"token operator\">=</span>      Total: <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.example.mybatis.test.UserMapperTest - User<span class=\"token punctuation\">(</span>uId<span class=\"token operator\">=</span><span class=\"token number\">1</span>, <span class=\"token assign-left variable\">uName</span><span class=\"token operator\">=</span>john, <span class=\"token assign-left variable\">uAge</span><span class=\"token operator\">=</span><span class=\"token number\">28</span>, <span class=\"token assign-left variable\">uGender</span><span class=\"token operator\">=</span>MALE<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>通过日志可看见，sql 语句经过了预处理被转换为 <code>?</code>  的形式，再进行的赋值。</p>\n</li>\n</ul>\n<h4 id=\"数据输入\"><a class=\"markdownIt-Anchor\" href=\"#数据输入\">#</a> 数据输入</h4>\n<ol>\n<li>\n<p>单个简单类型<br>\n只包含一个值的类型，包括基本数据类型和它们的包装类型，字符串类型。<br>\n对这种类型的参数，可以在 sql 语句中使用任意命名作为占位符，通常来说会与方法中的变量保持一致。</p>\n</li>\n<li>\n<p>单个复杂类型<br>\n包含多个值的类型，如集合、数组和实体类等。<br>\n对实体类型，可以使用它的字段名获取值，MyBatis 会自动调用相应的 <code>get</code>  方法来获取值：</p>\n<ul>\n<li>修改 <code>insert</code>  方法：<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>insert</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>insertUser<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  insert t_user(u_name,u_age,u_gender) values(#&#123;uName&#125;,#&#123;uAge&#125;,#&#123;uGender&#125;)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>insert</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>修改测试方法：<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertUserTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token class-name\">UserMapper</span> mapper <span class=\"token operator\">=</span> sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ming\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Gender</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MALE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">insertUser</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>日志打印结果：<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> DEBUG com.example.mybatis.mapper.UserMapper.insertUser - <span class=\"token operator\">==</span><span class=\"token operator\">></span>  Preparing: insert t_user<span class=\"token punctuation\">(</span>u_name,u_age,u_gender<span class=\"token punctuation\">)</span> values<span class=\"token punctuation\">(</span>?,?,?<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> DEBUG com.example.mybatis.mapper.UserMapper.insertUser - <span class=\"token operator\">==</span><span class=\"token operator\">></span> Parameters: ming<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span>, <span class=\"token number\">28</span><span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">)</span>, MALE<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> DEBUG com.example.mybatis.mapper.UserMapper.insertUser - <span class=\"token operator\">&lt;=</span><span class=\"token operator\">=</span>    Updates: <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> DEBUG org.apache.ibatis.transaction.jdbc.JdbcTransaction - Committing JDBC Connection <span class=\"token punctuation\">[</span>com.mysql.cj.jdbc.ConnectionImpl@2b87581<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.example.mybatis.test.UserMapperTest - <span class=\"token number\">1</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>多参数传值<br>\n对多个类型的参数，MyBatis 无法直接将参数与 sql 语句中的名称对应，这种情况下，如果参数较少，可以使用 <code>@Param(&quot;参数名&quot;)</code>  的注解，如果参数较多，可以考虑使用包装成 <code>map</code>  集合的方式传递。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 参数较少的情况</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 对应 xml 文件中使用 #&#123;name&#125; 和 #&#123;id&#125; 获取参数值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">updateUserNameById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 零散参数较多的情况</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 将参数封装成 map 集合，xml 文件中使用 map 的 key 来获取对应的 value 值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">updateUserById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> paramMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"数据输出\"><a class=\"markdownIt-Anchor\" href=\"#数据输出\">#</a> 数据输出</h4>\n<ol>\n<li>\n<p>简单类型<br>\n当 sql 查询返回简单类型时，可以在 xml 配置文件中，通过 <code>resultType</code>  指定返回值类型。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectUserCount<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>int<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> select count(*) from t_user;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>对常用的数据类型，MyBatis 都设置有相应的别名和类型处理器，即使省略，也可以正确完成类型的处理。</p>\n</li>\n<li>\n<p>实体类对象<br>\n返回实体类对象的方法相似，只需要在 <code>resultType</code>  属性中写出实体类的全限定类名。<br>\n对于数据库中列字段为下划线，而实体类中为小驼峰的情况，为了完成映射：</p>\n<ul>\n<li>可以在 sql 查询中设置别名</li>\n<li>也可以在全局配置中通过 <code>&lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;/&gt;</code>  自动完成映射</li>\n</ul>\n<p>当返回值是多个实体类对象的 List 集合时，如 <code>selectUserAll()</code> ，返回类型为 <code>List&lt;User&gt;</code> ，此时不需要任何特殊处理，仍然和返回实体类一样设置 <code>resultType</code>  即可。</p>\n</li>\n<li>\n<p>map 集合<br>\n对不便于封装为实体类的返回数据，可以设置 <code>resultType=&quot;map&quot;</code>  来返回 <code>map</code>  集合，但是这种方式使用情况较少，能包装成实体类时优先考虑实体类。</p>\n</li>\n<li>\n<p>返回主键</p>\n<ul>\n<li>\n<p>自增主键：<br>\n在 <code>insert</code>  标签上添加 <code>useGeneratedKeys=&quot;true&quot;</code>  并使用 <code>keyProperty</code>  指定主键的属性：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>insert</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>insertUser<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">useGeneratedKeys</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">keyProperty</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>uId<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  insert t_user(u_name,u_age,u_gender) values(#&#123;uName&#125;,#&#123;uAge&#125;,#&#123;uGender&#125;);</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>insert</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>非自增主键<br>\n非自增主键可以使用 <code>selectKey</code>  子标签来设置主键的值，然后再执行插入操作</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>insert</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>insertTest<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>selectKey</span> <span class=\"token attr-name\">keyColumn</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">keyProperty</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>string<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">order</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>BEFORE<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       select replace(uuid(), '-', '')</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>selectKey</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   insert into t_test(id,value) values (#&#123;id&#125;,#&#123;value&#125;);</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>insert</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>ResultMap<br>\n <code>resultMap</code>  标签可以设置属性名和字段之间的对应关系，并在之后的查询中直接引入，完成两者的映射：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 使用 resultMap 标签指定属性和列名的映射关系 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resultMap</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userMap<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.mybatis.pojo.User<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">&lt;!--  id 标签指定主键  --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>u_id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UId<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">&lt;!--  result 标签指定其他列  --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>u_name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>u_age<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UAge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>u_gender<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UGender<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resultMap</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">&lt;!-- select 标签中使用 resultMap=mapId 来进行使用 --></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectUserById<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultMap</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userMap<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   select u_id,u_name,u_age,u_gender from t_user where u_id = $&#123;id&#125;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>比起 <code>resultType</code> ， <code>resultMap</code>  很多时候使用起来更为方便，在多表中可以通过它来完成多表关系的映射。</p>\n</li>\n</ol>\n<h3 id=\"多表映射关联\"><a class=\"markdownIt-Anchor\" href=\"#多表映射关联\">#</a> 多表映射关联</h3>\n<p>数据库中的一张表对应一个 Java 实体类类型，当 Java 实体类之间存在关系时，意味着这多张表之间也存在关联关系，比如在学生和班级之间，一个学生对应一个班级，一个班级则对应多个学生。<br>\n一对一，一对多和多对一的关系，两张表就可以进行表示，而想表示两张表多对多的关系则需要用到第三张中间表。</p>\n<h4 id=\"准备工作\"><a class=\"markdownIt-Anchor\" href=\"#准备工作\">#</a> 准备工作</h4>\n<ul>\n<li>\n<p>准备 Java 对象</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Student.class</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>pojo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AllArgsConstructor</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Data</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NoArgsConstructor</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@AllArgsConstructor</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@NoArgsConstructor</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> stuId<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> stuName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> stuAge<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Class</span> tClass<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// StuClass.class</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>pojo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AllArgsConstructor</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Data</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NoArgsConstructor</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token annotation punctuation\">@AllArgsConstructor</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token annotation punctuation\">@NoArgsConstructor</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StuClass</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> stuClassId<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> stuClassName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>准备数据库</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">use</span> mydb<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> t_class</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    class_id   <span class=\"token keyword\">int</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    class_name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">insert</span> t_class <span class=\"token punctuation\">(</span>class_name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'第一班'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token string\">'第二班'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token string\">'第三班'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> t_stu</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    stu_id   <span class=\"token keyword\">int</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    stu_name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    stu_age  <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    class_id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">foreign</span> <span class=\"token keyword\">key</span> <span class=\"token punctuation\">(</span>class_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">references</span> t_class <span class=\"token punctuation\">(</span>class_id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">insert</span> t_stu <span class=\"token punctuation\">(</span>stu_name<span class=\"token punctuation\">,</span> stu_age<span class=\"token punctuation\">,</span> class_id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'刘一'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token string\">'陈二'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token string\">'李四'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token string\">'王五'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token string\">'赵六'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token string\">'孙七'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token string\">'周八'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token string\">'吴九'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token string\">'郑十'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token string\">'钱十一'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token string\">'吕十二'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token string\">'杨十三'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>创建测试类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>test</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>mapper<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StuClassMapper</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>mapper<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StudentMapper</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>pojo<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StuClass</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>pojo<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Student</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStream</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>log4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Log4j2</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Resources</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SqlSession</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SqlSessionFactory</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SqlSessionFactoryBuilder</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">After</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Before</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token annotation punctuation\">@Log4j2</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SCMapperTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token class-name\">SqlSession</span> sqlSession<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token annotation punctuation\">@Before</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token class-name\">InputStream</span> is <span class=\"token operator\">=</span> <span class=\"token class-name\">Resources</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mybatis-config.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token class-name\">SqlSessionFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionFactoryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    sqlSession <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token annotation punctuation\">@After</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sqlSession <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>注册 mapper<br>\n 准备好 <code>Student</code>  和 <code>StuClass</code>  的相应配置文件和持久层接口，当配置文件过多时，可以在 <code>mappers</code>  中使用 <code>package</code>  标签的 <code>name</code>  属性将指定包下的映射器文件全部进行注册：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- mybatis-config.xml --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mappers</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>package</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.mybatis.mapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mappers</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>当这样使用包名注册 mapper 配置文件时，需要注意文件名和文件夹的格式：</p>\n<ul>\n<li>Mapper 接口为 <code>UserMapper.java</code> ，配置文件需要命名为 <code>UserMapper.xml</code> 。</li>\n<li>mapper 配置文件需要和 Mapper 接口放在同一个包下。</li>\n<li>如果是 Maven 工程，配置文件需要放在 resources 目录下，且目录结构需要与 Mapper 接口所在的包的目录结构保持一致。</li>\n</ul>\n<p>比如，此时项目结构变为：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>project<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>├── pom.xml</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>└── src</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ├── main</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    │   ├── <span class=\"token function\">java</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    │   │   └── com</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    │   │       └── example</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    │   │           └── mybatis</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    │   │               ├── mapper</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    │   │               │   ├── StuClassMapper.java</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    │   │               │   ├── StudentMapper.java</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    │   │               │   └── UserMapper.java</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    │   │               └── pojo</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    │   │                   ├── Gender.java</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    │   │                   ├── StuClass.java</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    │   │                   ├── Student.java</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    │   │                   └── User.java</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    │   └── resources</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    │       ├── com</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    │       │   └── example</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    │       │       └── mybatis</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    │       │           └── mapper</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    │       │               ├── StuClassMapper.xml</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    │       │               ├── StudentMapper.xml</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    │       │               └── UserMapper.xml</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    │       ├── dev.properties</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    │       ├── log4j2.xml</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    │       ├── mybatis-config.xml</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    │       └── sql</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    │           ├── t_stu.sql</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    │           └── t_user.sql</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    └── <span class=\"token builtin class-name\">test</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        └── <span class=\"token function\">java</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            └── com</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                └── example</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    └── mybatis</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                        └── <span class=\"token builtin class-name\">test</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                            ├── SCMapperTest.java</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                            └── UserMapperTest.java</pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"对一的关系\"><a class=\"markdownIt-Anchor\" href=\"#对一的关系\">#</a> 对一的关系</h4>\n<p>在示例中，一个学生对应一个班级，因此学生对班级是一对一的关系。MyBatis 中，使用 <code>association</code>  标签来表示这种对一的关系。</p>\n<ul>\n<li>\n<p>配置文件：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- StudentMapper.xml --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">mapper</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token string\">\"https://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">namespace</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.mybatis.mapper.StudentMapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">&lt;!-- 使用 resultMap 设置对应关系 --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resultMap</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>resStudentMap<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.mybatis.pojo.Student<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">&lt;!-- 先配置 Student 自身的属性和字段关系 --></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stuId<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stu_id<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stuName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stu_name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stuAge<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stu_age<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">&lt;!-- association 配置对应其他类型的关系 --></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">&lt;!-- property 指定对一的属性名，javaType 配置对应类型的全限定类名 --></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>association</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stuClass<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">javaType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.mybatis.pojo.StuClass<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stuClassId<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>class_id<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stuClassName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>class_name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>association</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resultMap</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectAllStudentWithClass<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultMap</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>resStudentMap<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    select stu_id,stu_name,stu_age,s.class_id,class_name from t_stu s join t_class c on s.class_id =</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    c.class_id</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mapper</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>Mapper 接口：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>mapper</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>pojo<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Student</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">StudentMapper</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">selectAllStudentWithClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>测试方法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token class-name\">StudentMapper</span> mapper <span class=\"token operator\">=</span> sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StudentMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectAllStudentWithClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>log<span class=\"token operator\">::</span><span class=\"token function\">info</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>日志结果：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> DEBUG com.example.mybatis.mapper.StudentMapper.selectAllStudentWithClass - <span class=\"token operator\">==</span><span class=\"token operator\">></span>  Preparing: <span class=\"token keyword\">select</span> stu_id,stu_name,stu_age,s.class_id,class_name from t_stu s <span class=\"token function\">join</span> t_class c on s.class_id <span class=\"token operator\">=</span> c.class_id</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> DEBUG com.example.mybatis.mapper.StudentMapper.selectAllStudentWithClass - <span class=\"token operator\">==</span><span class=\"token operator\">></span> Parameters:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> DEBUG com.example.mybatis.mapper.StudentMapper.selectAllStudentWithClass - <span class=\"token operator\">&lt;=</span><span class=\"token operator\">=</span>      Total: <span class=\"token number\">13</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.example.mybatis.test.SCMapperTest - Student<span class=\"token punctuation\">(</span>stuId<span class=\"token operator\">=</span><span class=\"token number\">1</span>, <span class=\"token assign-left variable\">stuName</span><span class=\"token operator\">=</span>刘一, <span class=\"token assign-left variable\">stuAge</span><span class=\"token operator\">=</span><span class=\"token number\">16</span>, <span class=\"token assign-left variable\">StuClass</span><span class=\"token operator\">=</span>StuClass<span class=\"token punctuation\">(</span>stuClassId<span class=\"token operator\">=</span><span class=\"token number\">1</span>, <span class=\"token assign-left variable\">stuClassName</span><span class=\"token operator\">=</span>第一班, <span class=\"token assign-left variable\">students</span><span class=\"token operator\">=</span>null<span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.example.mybatis.test.SCMapperTest - Student<span class=\"token punctuation\">(</span>stuId<span class=\"token operator\">=</span><span class=\"token number\">2</span>, <span class=\"token assign-left variable\">stuName</span><span class=\"token operator\">=</span>陈二, <span class=\"token assign-left variable\">stuAge</span><span class=\"token operator\">=</span><span class=\"token number\">15</span>, <span class=\"token assign-left variable\">StuClass</span><span class=\"token operator\">=</span>StuClass<span class=\"token punctuation\">(</span>stuClassId<span class=\"token operator\">=</span><span class=\"token number\">1</span>, <span class=\"token assign-left variable\">stuClassName</span><span class=\"token operator\">=</span>第一班, <span class=\"token assign-left variable\">students</span><span class=\"token operator\">=</span>null<span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># ... 省略其他数据 ...</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.example.mybatis.test.SCMapperTest - Student<span class=\"token punctuation\">(</span>stuId<span class=\"token operator\">=</span><span class=\"token number\">10</span>, <span class=\"token assign-left variable\">stuName</span><span class=\"token operator\">=</span>郑十, <span class=\"token assign-left variable\">stuAge</span><span class=\"token operator\">=</span><span class=\"token number\">17</span>, <span class=\"token assign-left variable\">StuClass</span><span class=\"token operator\">=</span>StuClass<span class=\"token punctuation\">(</span>stuClassId<span class=\"token operator\">=</span><span class=\"token number\">3</span>, <span class=\"token assign-left variable\">stuClassName</span><span class=\"token operator\">=</span>第三班, <span class=\"token assign-left variable\">students</span><span class=\"token operator\">=</span>null<span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.example.mybatis.test.SCMapperTest - Student<span class=\"token punctuation\">(</span>stuId<span class=\"token operator\">=</span><span class=\"token number\">11</span>, <span class=\"token assign-left variable\">stuName</span><span class=\"token operator\">=</span>钱十一, <span class=\"token assign-left variable\">stuAge</span><span class=\"token operator\">=</span><span class=\"token number\">16</span>, <span class=\"token assign-left variable\">StuClass</span><span class=\"token operator\">=</span>StuClass<span class=\"token punctuation\">(</span>stuClassId<span class=\"token operator\">=</span><span class=\"token number\">3</span>, <span class=\"token assign-left variable\">stuClassName</span><span class=\"token operator\">=</span>第三班, <span class=\"token assign-left variable\">students</span><span class=\"token operator\">=</span>null<span class=\"token punctuation\">))</span></pre></td></tr></table></figure></li>\n</ul>\n<p>从结果可以看到，在查询出 <code>Student</code>  对象的同时，也查询出了对应的 <code>StuClass</code>  的信息。</p>\n<h4 id=\"对多的关系\"><a class=\"markdownIt-Anchor\" href=\"#对多的关系\">#</a> 对多的关系</h4>\n<p>学生对应班级是对一的关系，反过来班级对应学生，一个班级则对应多个学生。MyBatis 中使用 <code>collection</code>  标签表示对多的关系。</p>\n<ul>\n<li>\n<p>配置文件：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- StuClassMapper.xml --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">mapper</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token string\">\"https://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">namespace</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.mybatis.mapper.StuClassMapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">&lt;!-- 同样使用 resultMap 进行映射配置 --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resultMap</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>resStuClassMap<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.mybatis.pojo.StuClass<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stuClassId<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>class_id<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stuClassName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>class_name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">&lt;!-- collection 配置对多的关系 --></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">&lt;!-- property 指定对多的属性名，ofType 指定集合中元素的类型 --></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>collection</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>students<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ofType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.mybatis.pojo.Student<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stuId<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stu_id<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stuName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stu_name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stuAge<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stu_age<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>collection</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resultMap</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectAllClassWithStudents<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultMap</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>resStuClassMap<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    select c.class_id,class_name,stu_id,stu_name,stu_age from t_class c join t_stu s on c.class_id =</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    s.class_id;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mapper</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>Mapper 接口：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>mapper</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>pojo<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StuClass</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">StuClassMapper</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StuClass</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">selectAllClassWithStudents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>测试方法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token class-name\">StuClassMapper</span> mapper <span class=\"token operator\">=</span> sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StuClassMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StuClass</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectAllClassWithStudents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>aStuClass <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 首先打印班级信息</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>aStuClass<span class=\"token punctuation\">.</span><span class=\"token function\">getStuClassId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> aStuClass<span class=\"token punctuation\">.</span><span class=\"token function\">getStuClassName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 然后打印班级中每个学生信息</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    aStuClass<span class=\"token punctuation\">.</span><span class=\"token function\">getStudents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>log<span class=\"token operator\">::</span><span class=\"token function\">info</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>日志结果：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> DEBUG com.example.mybatis.mapper.StuClassMapper.selectAllClassWithStudents - <span class=\"token operator\">&lt;=</span><span class=\"token operator\">=</span>      Total: <span class=\"token number\">13</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.example.mybatis.test.SCMapperTest - <span class=\"token number\">1</span>第一班</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.example.mybatis.test.SCMapperTest - Student<span class=\"token punctuation\">(</span>stuId<span class=\"token operator\">=</span><span class=\"token number\">1</span>, <span class=\"token assign-left variable\">stuName</span><span class=\"token operator\">=</span>刘一, <span class=\"token assign-left variable\">stuAge</span><span class=\"token operator\">=</span><span class=\"token number\">16</span>, <span class=\"token assign-left variable\">StuClass</span><span class=\"token operator\">=</span>null<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.example.mybatis.test.SCMapperTest - Student<span class=\"token punctuation\">(</span>stuId<span class=\"token operator\">=</span><span class=\"token number\">2</span>, <span class=\"token assign-left variable\">stuName</span><span class=\"token operator\">=</span>陈二, <span class=\"token assign-left variable\">stuAge</span><span class=\"token operator\">=</span><span class=\"token number\">15</span>, <span class=\"token assign-left variable\">StuClass</span><span class=\"token operator\">=</span>null<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.example.mybatis.test.SCMapperTest - Student<span class=\"token punctuation\">(</span>stuId<span class=\"token operator\">=</span><span class=\"token number\">3</span>, <span class=\"token assign-left variable\">stuName</span><span class=\"token operator\">=</span>张三, <span class=\"token assign-left variable\">stuAge</span><span class=\"token operator\">=</span><span class=\"token number\">15</span>, <span class=\"token assign-left variable\">StuClass</span><span class=\"token operator\">=</span>null<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.example.mybatis.test.SCMapperTest - Student<span class=\"token punctuation\">(</span>stuId<span class=\"token operator\">=</span><span class=\"token number\">13</span>, <span class=\"token assign-left variable\">stuName</span><span class=\"token operator\">=</span>杨十三, <span class=\"token assign-left variable\">stuAge</span><span class=\"token operator\">=</span><span class=\"token number\">15</span>, <span class=\"token assign-left variable\">StuClass</span><span class=\"token operator\">=</span>null<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.example.mybatis.test.SCMapperTest - <span class=\"token number\">2</span>第二班</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.example.mybatis.test.SCMapperTest - Student<span class=\"token punctuation\">(</span>stuId<span class=\"token operator\">=</span><span class=\"token number\">4</span>, <span class=\"token assign-left variable\">stuName</span><span class=\"token operator\">=</span>李四, <span class=\"token assign-left variable\">stuAge</span><span class=\"token operator\">=</span><span class=\"token number\">17</span>, <span class=\"token assign-left variable\">StuClass</span><span class=\"token operator\">=</span>null<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.example.mybatis.test.SCMapperTest - Student<span class=\"token punctuation\">(</span>stuId<span class=\"token operator\">=</span><span class=\"token number\">5</span>, <span class=\"token assign-left variable\">stuName</span><span class=\"token operator\">=</span>王五, <span class=\"token assign-left variable\">stuAge</span><span class=\"token operator\">=</span><span class=\"token number\">16</span>, <span class=\"token assign-left variable\">StuClass</span><span class=\"token operator\">=</span>null<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.example.mybatis.test.SCMapperTest - Student<span class=\"token punctuation\">(</span>stuId<span class=\"token operator\">=</span><span class=\"token number\">7</span>, <span class=\"token assign-left variable\">stuName</span><span class=\"token operator\">=</span>孙七, <span class=\"token assign-left variable\">stuAge</span><span class=\"token operator\">=</span><span class=\"token number\">16</span>, <span class=\"token assign-left variable\">StuClass</span><span class=\"token operator\">=</span>null<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.example.mybatis.test.SCMapperTest - Student<span class=\"token punctuation\">(</span>stuId<span class=\"token operator\">=</span><span class=\"token number\">8</span>, <span class=\"token assign-left variable\">stuName</span><span class=\"token operator\">=</span>周八, <span class=\"token assign-left variable\">stuAge</span><span class=\"token operator\">=</span><span class=\"token number\">15</span>, <span class=\"token assign-left variable\">StuClass</span><span class=\"token operator\">=</span>null<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.example.mybatis.test.SCMapperTest - Student<span class=\"token punctuation\">(</span>stuId<span class=\"token operator\">=</span><span class=\"token number\">9</span>, <span class=\"token assign-left variable\">stuName</span><span class=\"token operator\">=</span>吴九, <span class=\"token assign-left variable\">stuAge</span><span class=\"token operator\">=</span><span class=\"token number\">16</span>, <span class=\"token assign-left variable\">StuClass</span><span class=\"token operator\">=</span>null<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.example.mybatis.test.SCMapperTest - Student<span class=\"token punctuation\">(</span>stuId<span class=\"token operator\">=</span><span class=\"token number\">12</span>, <span class=\"token assign-left variable\">stuName</span><span class=\"token operator\">=</span>吕十二, <span class=\"token assign-left variable\">stuAge</span><span class=\"token operator\">=</span><span class=\"token number\">17</span>, <span class=\"token assign-left variable\">StuClass</span><span class=\"token operator\">=</span>null<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.example.mybatis.test.SCMapperTest - <span class=\"token number\">3</span>第三班</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.example.mybatis.test.SCMapperTest - Student<span class=\"token punctuation\">(</span>stuId<span class=\"token operator\">=</span><span class=\"token number\">6</span>, <span class=\"token assign-left variable\">stuName</span><span class=\"token operator\">=</span>赵六, <span class=\"token assign-left variable\">stuAge</span><span class=\"token operator\">=</span><span class=\"token number\">17</span>, <span class=\"token assign-left variable\">StuClass</span><span class=\"token operator\">=</span>null<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.example.mybatis.test.SCMapperTest - Student<span class=\"token punctuation\">(</span>stuId<span class=\"token operator\">=</span><span class=\"token number\">10</span>, <span class=\"token assign-left variable\">stuName</span><span class=\"token operator\">=</span>郑十, <span class=\"token assign-left variable\">stuAge</span><span class=\"token operator\">=</span><span class=\"token number\">17</span>, <span class=\"token assign-left variable\">StuClass</span><span class=\"token operator\">=</span>null<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.example.mybatis.test.SCMapperTest - Student<span class=\"token punctuation\">(</span>stuId<span class=\"token operator\">=</span><span class=\"token number\">11</span>, <span class=\"token assign-left variable\">stuName</span><span class=\"token operator\">=</span>钱十一, <span class=\"token assign-left variable\">stuAge</span><span class=\"token operator\">=</span><span class=\"token number\">16</span>, <span class=\"token assign-left variable\">StuClass</span><span class=\"token operator\">=</span>null<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n<p>从结果可以看到，在查询出 <code>StuClass</code>  对象的同时，也查询出了其中包含的 <code>Student</code>  集合的信息。</p>\n<h4 id=\"分步查询\"><a class=\"markdownIt-Anchor\" href=\"#分步查询\">#</a> 分步查询</h4>\n<p>在查询班级表时，虽然它和学生表之间相互关联，但是并不一定每一次都需要查询学生表的信息，如果没有使用其数据又进行了相关的查询，实际上是多了一次不必要的查询。因此，可以考虑将查询拆为两步，并通过懒加载的方式进行，当实体类需要使用关联的属性时，再进行查询。</p>\n<ul>\n<li>\n<p>配置文件：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- StudentMapper.xml --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">&lt;!-- 仅查询 Student 的方法，mybatis 配置中开启自动转小驼峰 --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectStudentsByClassId<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.mybatis.pojo.Student<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  select stu_id,stu_name,stu_age from t_stu where class_id = #&#123;classId&#125;;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">&lt;!-- StuClassMapper.xml --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">&lt;!-- 更改 collection 标签 --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resultMap</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>resStuClassMap<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.mybatis.pojo.StuClass<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stuClassId<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>class_id<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stuClassName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>class_name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">&lt;!-- select 属性设置分步查询的 sql 片段 --></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">&lt;!-- column 属性设置分步查询建立关系依赖的字段 --></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>collection</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>students<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token attr-name\">select</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.mybatis.mapper.StudentMapper.selectStudentsByClassId<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>class_id<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resultMap</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectClassById<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultMap</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>resStuClassMap<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  select class_id,class_name from t_class where class_id = #&#123;classId&#125;;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>Mapper 接口：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// StudentMapper.class</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">selectStudentsByClassId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> classId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// StuClassMapper.class</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">StuClass</span> <span class=\"token function\">selectClassById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> classId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>测试方法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token class-name\">StuClassMapper</span> mapper <span class=\"token operator\">=</span> sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StuClassMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token class-name\">StuClass</span> stuClass <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectClassById</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>stuClass<span class=\"token punctuation\">.</span><span class=\"token function\">getStuClassId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> stuClass<span class=\"token punctuation\">.</span><span class=\"token function\">getStuClassName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  stuClass<span class=\"token punctuation\">.</span><span class=\"token function\">getStudents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>log<span class=\"token operator\">::</span><span class=\"token function\">info</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>日志结果：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> DEBUG com.example.mybatis.mapper.StuClassMapper.selectClassById - <span class=\"token operator\">==</span><span class=\"token operator\">></span>  Preparing: <span class=\"token keyword\">select</span> class_id,class_name from t_class where class_id <span class=\"token operator\">=</span> ?<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> DEBUG com.example.mybatis.mapper.StuClassMapper.selectClassById - <span class=\"token operator\">==</span><span class=\"token operator\">></span> Parameters: <span class=\"token number\">1</span><span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> DEBUG com.example.mybatis.mapper.StudentMapper.selectStudentsByClassId - <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">></span>  Preparing: <span class=\"token keyword\">select</span> stu_id,stu_name,stu_age from t_stu where class_id <span class=\"token operator\">=</span> ?<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> DEBUG com.example.mybatis.mapper.StudentMapper.selectStudentsByClassId - <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">></span> Parameters: <span class=\"token number\">1</span><span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> DEBUG com.example.mybatis.mapper.StudentMapper.selectStudentsByClassId - <span class=\"token operator\">&lt;=</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>      Total: <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> DEBUG com.example.mybatis.mapper.StuClassMapper.selectClassById - <span class=\"token operator\">&lt;=</span><span class=\"token operator\">=</span>      Total: <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.example.mybatis.test.SCMapperTest - <span class=\"token number\">1</span>第一班</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.example.mybatis.test.SCMapperTest - Student<span class=\"token punctuation\">(</span>stuId<span class=\"token operator\">=</span><span class=\"token number\">1</span>, <span class=\"token assign-left variable\">stuName</span><span class=\"token operator\">=</span>刘一, <span class=\"token assign-left variable\">stuAge</span><span class=\"token operator\">=</span><span class=\"token number\">16</span>, <span class=\"token assign-left variable\">StuClass</span><span class=\"token operator\">=</span>null<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.example.mybatis.test.SCMapperTest - Student<span class=\"token punctuation\">(</span>stuId<span class=\"token operator\">=</span><span class=\"token number\">2</span>, <span class=\"token assign-left variable\">stuName</span><span class=\"token operator\">=</span>陈二, <span class=\"token assign-left variable\">stuAge</span><span class=\"token operator\">=</span><span class=\"token number\">15</span>, <span class=\"token assign-left variable\">StuClass</span><span class=\"token operator\">=</span>null<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.example.mybatis.test.SCMapperTest - Student<span class=\"token punctuation\">(</span>stuId<span class=\"token operator\">=</span><span class=\"token number\">3</span>, <span class=\"token assign-left variable\">stuName</span><span class=\"token operator\">=</span>张三, <span class=\"token assign-left variable\">stuAge</span><span class=\"token operator\">=</span><span class=\"token number\">15</span>, <span class=\"token assign-left variable\">StuClass</span><span class=\"token operator\">=</span>null<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.example.mybatis.test.SCMapperTest - Student<span class=\"token punctuation\">(</span>stuId<span class=\"token operator\">=</span><span class=\"token number\">13</span>, <span class=\"token assign-left variable\">stuName</span><span class=\"token operator\">=</span>杨十三, <span class=\"token assign-left variable\">stuAge</span><span class=\"token operator\">=</span><span class=\"token number\">15</span>, <span class=\"token assign-left variable\">StuClass</span><span class=\"token operator\">=</span>null<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在日志结果可以看见，查询分别进行了两次，第一次是进行 <code>t_class</code>  表单的查询，第二次再进行的 <code>t_stu</code>  表的查询。</p>\n</li>\n<li>\n<p>懒加载配置：<br>\n使用懒加载需要在 MyBatis 的全局配置文件中增加这一条配置：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- mybatis-config.xml --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>settings</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">&lt;!-- 开启懒加载功能 --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lazyLoadingEnabled<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>settings</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>注释测试方法 <code>stuClass.getStudents().forEach(login::info)</code>  一行，此时只使用 StuClass 的信息，开启和关闭懒加载后分别查看日志：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 开启懒加载，只执行了第一次分步查询</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> DEBUG com.example.mybatis.mapper.StuClassMapper.selectClassById - <span class=\"token operator\">==</span><span class=\"token operator\">></span>  Preparing: <span class=\"token keyword\">select</span> class_id,class_name from t_class where class_id <span class=\"token operator\">=</span> ?<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> DEBUG com.example.mybatis.mapper.StuClassMapper.selectClassById - <span class=\"token operator\">==</span><span class=\"token operator\">></span> Parameters: <span class=\"token number\">1</span><span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> DEBUG com.example.mybatis.mapper.StuClassMapper.selectClassById - <span class=\"token operator\">&lt;=</span><span class=\"token operator\">=</span>      Total: <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.example.mybatis.test.SCMapperTest - <span class=\"token number\">1</span>第一班</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 关闭懒加载，两次分步查询均执行</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> DEBUG com.example.mybatis.mapper.StuClassMapper.selectClassById - <span class=\"token operator\">==</span><span class=\"token operator\">></span>  Preparing: <span class=\"token keyword\">select</span> class_id,class_name from t_class where class_id <span class=\"token operator\">=</span> ?<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> DEBUG com.example.mybatis.mapper.StuClassMapper.selectClassById - <span class=\"token operator\">==</span><span class=\"token operator\">></span> Parameters: <span class=\"token number\">1</span><span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> DEBUG com.example.mybatis.mapper.StudentMapper.selectStudentsByClassId - <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">></span>  Preparing: <span class=\"token keyword\">select</span> stu_id,stu_name,stu_age from t_stu where class_id <span class=\"token operator\">=</span> ?<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> DEBUG com.example.mybatis.mapper.StudentMapper.selectStudentsByClassId - <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">></span> Parameters: <span class=\"token number\">1</span><span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> DEBUG com.example.mybatis.mapper.StudentMapper.selectStudentsByClassId - <span class=\"token operator\">&lt;=</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>      Total: <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> DEBUG com.example.mybatis.mapper.StuClassMapper.selectClassById - <span class=\"token operator\">&lt;=</span><span class=\"token operator\">=</span>      Total: <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.example.mybatis.test.SCMapperTest - <span class=\"token number\">1</span>第一班</pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"其他配置\"><a class=\"markdownIt-Anchor\" href=\"#其他配置\">#</a> 其他配置</h3>\n<h4 id=\"类型别名\"><a class=\"markdownIt-Anchor\" href=\"#类型别名\">#</a> 类型别名</h4>\n<p>MyBatis 对 Java 中的各类型都配置了别名进行映射，而无需书写全限定类名：</p>\n<ol>\n<li>\n<p>基本类型</p>\n<table>\n<thead>\n<tr>\n<th>Java 类型</th>\n<th>类型别名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>byte</td>\n<td>_byte</td>\n</tr>\n<tr>\n<td>short</td>\n<td>_short</td>\n</tr>\n<tr>\n<td>int</td>\n<td>_int、_integer</td>\n</tr>\n<tr>\n<td>long</td>\n<td>_long</td>\n</tr>\n<tr>\n<td>float</td>\n<td>_float</td>\n</tr>\n<tr>\n<td>double</td>\n<td>_double</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>_boolean</td>\n</tr>\n<tr>\n<td>char</td>\n<td>_char、 _character</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>字符串，日期与包装类</p>\n<table>\n<thead>\n<tr>\n<th>Java 类型</th>\n<th>类型别名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>String</td>\n<td>string</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>date</td>\n</tr>\n<tr>\n<td>Byte</td>\n<td>byte</td>\n</tr>\n<tr>\n<td>Short</td>\n<td>short</td>\n</tr>\n<tr>\n<td>Integer</td>\n<td>int、integer</td>\n</tr>\n<tr>\n<td>Long</td>\n<td>long</td>\n</tr>\n<tr>\n<td>Float</td>\n<td>float</td>\n</tr>\n<tr>\n<td>Double</td>\n<td>double</td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>boolean</td>\n</tr>\n<tr>\n<td>Character</td>\n<td>char、character</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>数学与集合</p>\n<table>\n<thead>\n<tr>\n<th>Java 类型</th>\n<th>类型别名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>BigDecimal</td>\n<td>decimal、bigdecimal</td>\n</tr>\n<tr>\n<td>BigInteger</td>\n<td>biginteger</td>\n</tr>\n<tr>\n<td>Object</td>\n<td>object</td>\n</tr>\n<tr>\n<td>Map</td>\n<td>map</td>\n</tr>\n<tr>\n<td>HashMap</td>\n<td>hashmap</td>\n</tr>\n<tr>\n<td>List</td>\n<td>list</td>\n</tr>\n<tr>\n<td>ArrayList</td>\n<td>arraylist</td>\n</tr>\n<tr>\n<td>Collection</td>\n<td>collection</td>\n</tr>\n<tr>\n<td>Iterator</td>\n<td>iterator</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ol>\n<p>对自定义的实体类，可以在核心配置文件中配置类型别名，配置完成后，就可以使用别名而免去书写冗长的全限定类名：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeAliases</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeAlias</span> <span class=\"token attr-name\">alias</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Author<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.mybatis.pojo.Author<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeAlias</span> <span class=\"token attr-name\">alias</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>User<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.mybatis.pojo.User<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeAlias</span> <span class=\"token attr-name\">alias</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Blog<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.mybatis.pojo.Blog<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeAlias</span> <span class=\"token attr-name\">alias</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Comment<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.mybatis.pojo.Comment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeAlias</span> <span class=\"token attr-name\">alias</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Post<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.mybatis.pojo.Post<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeAlias</span> <span class=\"token attr-name\">alias</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Section<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.mybatis.pojo.Section<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeAlias</span> <span class=\"token attr-name\">alias</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Tag<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.mybatis.pojo.Tag<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>typeAliases</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>当实体类较多时，可以指定包名，MyBatis 会自动扫描这个包，搜索需要的实体类。此时这个实体类名就是它的别名，而不用书写全限定类名。书写时不区分大小写，但常用首字母大写的方式。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- mybatis 核心配置文件 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeAliases</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>package</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.mybatis.pojo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>typeAliases</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- mapper 配置文件 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectUserById<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>User<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  select u_id,u_username,u_password,u_email from t_user where u_id = #&#123;uId&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"类型处理器\"><a class=\"markdownIt-Anchor\" href=\"#类型处理器\">#</a> 类型处理器</h4>\n<p>MyBatis 在设置预处理语句（PreparedStatement）中的参数或从结果集中取出一个值时， 都会用类型处理器将获取到的值以合适的方式转换成<br>\n Java 类型。如下是 MyBatis 提供的一些内置的类型处理器：</p>\n<table>\n<thead>\n<tr>\n<th>类型处理器</th>\n<th>Java 类型</th>\n<th>JDBC 类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>BooleanTypeHandler</code></td>\n<td><code>java.lang.Boolean</code> ,  <code>boolean</code></td>\n<td>数据库兼容的  <code>BOOLEAN</code></td>\n</tr>\n<tr>\n<td><code>ByteTypeHandler</code></td>\n<td><code>java.lang.Byte</code> ,  <code>byte</code></td>\n<td>数据库兼容的  <code>NUMERIC</code>  或  <code>BYTE</code></td>\n</tr>\n<tr>\n<td><code>ShortTypeHandler</code></td>\n<td><code>java.lang.Short</code> ,  <code>short</code></td>\n<td>数据库兼容的  <code>NUMERIC</code>  或  <code>SMALLINT</code></td>\n</tr>\n<tr>\n<td><code>IntegerTypeHandler</code></td>\n<td><code>java.lang.Integer</code> ,  <code>int</code></td>\n<td>数据库兼容的  <code>NUMERIC</code>  或  <code>INTEGER</code></td>\n</tr>\n<tr>\n<td><code>LongTypeHandler</code></td>\n<td><code>java.lang.Long</code> ,  <code>long</code></td>\n<td>数据库兼容的  <code>NUMERIC</code>  或  <code>BIGINT</code></td>\n</tr>\n<tr>\n<td><code>FloatTypeHandler</code></td>\n<td><code>java.lang.Float</code> ,  <code>float</code></td>\n<td>数据库兼容的  <code>NUMERIC</code>  或  <code>FLOAT</code></td>\n</tr>\n<tr>\n<td><code>DoubleTypeHandler</code></td>\n<td><code>java.lang.Double</code> ,  <code>double</code></td>\n<td>数据库兼容的  <code>NUMERIC</code>  或  <code>DOUBLE</code></td>\n</tr>\n<tr>\n<td><code>BigDecimalTypeHandler</code></td>\n<td><code>java.math.BigDecimal</code></td>\n<td>数据库兼容的  <code>NUMERIC</code>  或  <code>DECIMAL</code></td>\n</tr>\n<tr>\n<td><code>StringTypeHandler</code></td>\n<td><code>java.lang.String</code></td>\n<td><code>CHAR</code> ,  <code>VARCHAR</code></td>\n</tr>\n</tbody>\n</table>\n<p>因为 JDK8 实现了全部的 JSR310 规范，MyBatis 从 3.4 开始，也提供了基于 JSR310<br>\n 编写的各种日期时间类型处理器，而无需再进行手动注册。</p>\n<p>当 MyBatis 的内置类型处理器无法识别的时候，可以通过 MyBatis 提供的自定义类型处理器来识别：</p>\n<ul>\n<li>自定义类型处理器实现 <code>org.apache.ibatis.type.TypeHandler</code> <br>\n 接口或者继承 <code>org.apache.ibatis.type.BaseTypeHandler</code>  类；</li>\n<li>指定自定义类型处理器映射的某个 JDBC 类型；</li>\n<li>在 MyBatis 核心配置文件中注册自定义类型处理器。</li>\n</ul>\n<p>如下是一个 <code>Address</code>  的类型处理器示例：</p>\n<ol>\n<li>创建自定义类型处理器</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@MappedTypes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Address</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 指定处理器映射的 Java 类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@MappedJdbcTypes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JdbcType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">VARCHAR</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 指定处理器映射的数据库类型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AddressTypeHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TypeHandler</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Address</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   * 从 Java 程序到插入数据库的处理方案</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   * @param ps 预编译的 SQL 语句</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   * @param i 插入参数的位置</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   * @param parameter 插入的参数</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   * @param jdbcType  对应 JDBC 类型</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   * @throws SQLException</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setParameter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PreparedStatement</span> ps<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Address</span> parameter<span class=\"token punctuation\">,</span> <span class=\"token class-name\">JdbcType</span> jdbcType<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    ps<span class=\"token punctuation\">.</span><span class=\"token function\">setObject</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> parameter<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   * 从数据库到 Java 程序中的处理方案</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   * @param rs 数据库查询的结果集</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   * @param columnName 结果集中指定的列名</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   * @return address 自定义处理后的 Address 类对象</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   * @throws SQLException</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Address</span> <span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultSet</span> rs<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> columnName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 从结果集中拿到 MyBatis 无法处理的列，并按照自定义规则处理</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> resArr <span class=\"token operator\">=</span> rs<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span>columnName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 返回自定义规则处理后的结果</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Address</span><span class=\"token punctuation\">(</span>resArr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> resArr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> resArr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Address</span> <span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultSet</span> rs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> columnIndex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Address</span> <span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CallableStatement</span> cs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> columnIndex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其中， <code>Address</code>  类的定义如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@AllArgsConstructor</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@NoArgsConstructor</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Address</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> province<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> city<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> district<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> province <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> city <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> district<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>注册自定义类型处理器</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeHandlers</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeHandler</span> <span class=\"token attr-name\">handler</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.mybatis.typehandler.AddressTypeHandler<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>typeHandlers</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>编写的测试类如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Log4j2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBatisTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token class-name\">SqlSession</span> sqlSession<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token annotation punctuation\">@Before</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">inti</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 加载 mybatis 核心配置文件</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">InputStream</span> is<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      is <span class=\"token operator\">=</span> <span class=\"token class-name\">Resources</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mybatis-config.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 获取 sqlSessionFactoryBuilder</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">SqlSessionFactoryBuilder</span> factoryBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionFactoryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 获取 sqlSessionFactory</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">SqlSessionFactory</span> factory <span class=\"token operator\">=</span> factoryBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 获取 sqlSession</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    sqlSession <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testInsert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token class-name\">UserMapper</span> mapper <span class=\"token operator\">=</span> sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token class-name\">Address</span> address <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Address</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"上海\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"上海\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"奉贤\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token class-name\">User</span> admin <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"passwd\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">insertUser</span><span class=\"token punctuation\">(</span>admin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>admin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testFindByName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token class-name\">UserMapper</span> mapper <span class=\"token operator\">=</span> sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token annotation punctuation\">@After</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sqlSession <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看到，在测试结果中，插入数据库和从数据库中读取的 <code>Address</code>  都通过自定义类型进行了正确的处理：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.example.mybatis.test.MyBatisTest - <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.example.mybatis.test.MyBatisTest - User<span class=\"token punctuation\">(</span>id<span class=\"token operator\">=</span><span class=\"token number\">1</span>, <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span>admin, <span class=\"token assign-left variable\">password</span><span class=\"token operator\">=</span>passwd, <span class=\"token assign-left variable\">age</span><span class=\"token operator\">=</span><span class=\"token number\">24</span>, <span class=\"token assign-left variable\">address</span><span class=\"token operator\">=</span>上海,上海,奉贤<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.example.mybatis.test.MyBatisTest - User<span class=\"token punctuation\">(</span>id<span class=\"token operator\">=</span><span class=\"token number\">1</span>, <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span>admin, <span class=\"token assign-left variable\">password</span><span class=\"token operator\">=</span>passwd, <span class=\"token assign-left variable\">age</span><span class=\"token operator\">=</span><span class=\"token number\">24</span>, <span class=\"token assign-left variable\">address</span><span class=\"token operator\">=</span>上海,上海,奉贤<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"进阶使用\"><a class=\"markdownIt-Anchor\" href=\"#进阶使用\">#</a> 进阶使用</h2>\n<h3 id=\"动态-sol\"><a class=\"markdownIt-Anchor\" href=\"#动态-sol\">#</a> 动态 SOL</h3>\n<p>动态 sql 是指根据条件进行动态 sql 语句拼接，MyBatis 中提供了动态标签来进行动态 sql 的支持，免去了 JDBC 中的动态字符串拼接。常用的动态 sql 标签如下：</p>\n<h4 id=\"if-和-where-标签\"><a class=\"markdownIt-Anchor\" href=\"#if-和-where-标签\">#</a> if 和 where 标签</h4>\n<p><code>if</code>  和 <code>where</code>  标签用于条件判断，满足条件后才会插入 <code>if</code>  标签中的 sql 语句，而 <code>where</code>  标签会格式化 <code>if</code>  标签插入的 sql 语句，去除多余的 <code>and</code>  或者 <code>or</code> ：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectStudentByDynamic<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultMap</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>resStudentMap<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    select stu_id,stu_name,stu_age from t_stu</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">&lt;!-- where 会自动去除标签体前多余的 and/or --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>where</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">&lt;!-- if 标签中可以访问实体类的属性，通过 test 的判断才执行相应 sql --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>if</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>classId != null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        and class_id = #&#123;classId&#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>if</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>if</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stuAge != null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        and stu_age > #&#123;stuAge&#125;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>if</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>where</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">&lt;!--</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      两个条件都满足时，where class_id = ? and stu_age > ?</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      只满足一个条件时，where class_id = ? 或者 where stu_age > ?</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      当所有条件都不满足时，就不会有 where 子句</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    --></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"set-标签\"><a class=\"markdownIt-Anchor\" href=\"#set-标签\">#</a> set 标签</h4>\n<p><code>set</code>  和 <code>if</code>  标签结合使用，可以通过条件来进行动态字段更新，与 <code>where</code>  标签类似，它也会自动进行格式化，去除多余的逗号：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>update</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>updateStudentByDynamic<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    update t_stu</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>set</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>if</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stuName != null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        stu_name = #&#123;stuName&#125;,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>if</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>if</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stuAge != null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        stu_age = #&#123;stuAge&#125;,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>if</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>set</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    where stu_id = #&#123;stuId&#125;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">&lt;!--</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      两个条件都满足时，set 子句为 set stu_name = ?, stu_age = ?</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      只满足一个条件时，set 子句为 set stu_name = ? 或 set stu_age = ?</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      当所有条件都不满足时，不会有 set 子句，会导致 update 语句的 sql 语法报错</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    --></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>update</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"trim-标签\"><a class=\"markdownIt-Anchor\" href=\"#trim-标签\">#</a> trim 标签</h4>\n<p><code>trim</code>  标签可以替代 <code>where</code>  标签和 <code>set</code>  标签，它可以动态控制 sql 语句两端是否包含某些字符：</p>\n<ul>\n<li><code>prefix</code>  属性：指定整个 <code>trim</code>  标签中 sql 语句要动态添加的前缀</li>\n<li><code>suffix</code>  属性：指定整个 <code>trim</code>  标签中 sql 语句要动态删除的前缀</li>\n<li><code>prefixOverrides</code>  属性：指定 <code>trim</code>  标签中每条 sql 语句要动态去掉的前缀</li>\n<li><code>suffixOverrides</code>  属性：指定 <code>trim</code>  标签中每条 sql 语句要动态去掉的后缀</li>\n</ul>\n<p>如上的使用 <code>where</code>  标签的动态 sql 可以更改为：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectStudentByDynamic<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultMap</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>resHandle<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    select stu_id,stu_name,stu_age from t_stu</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>trim</span> <span class=\"token attr-name\">prefix</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>where<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefixOverrides</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>and<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>if</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>classId != null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        and class_id = #&#123;classId&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>if</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>if</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stuAge != null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        and stu_age > #&#123;stuAge&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>if</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>trim</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"choosewhenotherwise-标签\"><a class=\"markdownIt-Anchor\" href=\"#choosewhenotherwise-标签\">#</a> choose/when/otherwise 标签</h4>\n<p><code>choose/when/otherwise</code>  标签类似 Java 中的 <code>switch...case...default</code>  语句。<br>\n当满足 <code>when</code>  分支的条件时，执行 <code>when</code>  中的 sql 语句，并忽略其他的语句；当所有 <code>when</code>  分支都不满足的时候，执行 <code>otherwise</code>  中的语句。</p>\n<h4 id=\"foreach-标签\"><a class=\"markdownIt-Anchor\" href=\"#foreach-标签\">#</a> foreach 标签</h4>\n<p><code>foreach</code>  标签用于批量操作，常用属性如：</p>\n<ul>\n<li><code>collection</code>  属性：要遍历的集合</li>\n<li><code>item</code>  属性：遍历集合中的每个对象</li>\n<li><code>separator</code>  属性：指定每个动态 sql 字符串间的分隔符</li>\n<li><code>open</code>  属性：循环完成后，整体 sql 前面要添加的字符串</li>\n<li><code>close</code>  属性：循环完成后，整体 sql 后面要添加的字符串</li>\n<li><code>index</code>  属性： <code>List</code>  集合中表示索引值， <code>Map</code>  集合中表示 <code>key</code>  值</li>\n</ul>\n<h3 id=\"缓存策略\"><a class=\"markdownIt-Anchor\" href=\"#缓存策略\">#</a> 缓存策略</h3>\n<h4 id=\"缓存简介\"><a class=\"markdownIt-Anchor\" href=\"#缓存简介\">#</a> 缓存简介</h4>\n<p>缓存（Cache）是一种用于存储临时数据的机制，通常位于内存中。在数据库查询过程中，频繁地与数据库进行交互可能导致性能下降。为了提高查询效率并减少系统开销，可以将经常被查询的数据存放在缓存中，这样在查询时就可以直接从缓存中获取数据，而无需在数据库中进行查找。</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/computerscience/java-note/mybatis.315m74o7bczk.webp\" alt=\"缓存机制\"></p>\n<p>MyBatis 内置了一个强大的事务性查询缓存机制，它可以非常方便地配置和定制，并且可以极大地提升查询效率。MyBatis 的缓存机制定义了两级缓存，一级缓存是默认开启的，二级缓存需要手动开始和配置，通过实现 MyBatis 定义的 Cache 接口，还可以自定义二级缓存。</p>\n<h4 id=\"使用缓存\"><a class=\"markdownIt-Anchor\" href=\"#使用缓存\">#</a> 使用缓存</h4>\n<p>一级缓存是默认开启的，而二级缓存需要在配置文件中增加 <code>cache</code>  标签：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">namespace</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.mybatis.UserMapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">&lt;!-- 其他配置 --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">&lt;!-- 启用二级缓存 --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>cache</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mapper</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>实体类需要实现序列化接口：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token annotation punctuation\">@Serial</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">6053350575990592925L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>通过日志可以查询到二级缓存的缓存命中率，计算方式为： <code>缓存命中率=命中缓存数/查询总次数</code> 。</p>\n<p>MyBatis 中，二级缓存的作用域是 <code>SqlSessionFactory</code>  级别，范围是整个 <code>Application</code> ，一级缓存是 <code>SqlSession</code>  级别，范围在一次 <code>sqlSession</code>  中。</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/computerscience/java-note/mybatis2.6zudva42oakg.webp\" alt=\"一级和二级缓存\"></p>\n<p>当开启二级缓存时，查询会先进行查询二级缓存，因为二级缓存中可能已经有其他 <code>sqlSession</code>  查询的缓存。如果二级缓存没有命中，再查询一级缓存，一级缓存也没有命中的情况下，才会再去查询数据库。</p>\n<ul>\n<li>一级缓存失效：\n<ul>\n<li>不是同一个 <code>sqlsession</code></li>\n<li>同一个 <code>sqlsession</code>  但查询条件发生了变化</li>\n<li>同一个 <code>sqlsession</code>  但是两次查询期间执行了增删改或提交了事务</li>\n<li>同一个 <code>sqlsession</code>  但是两次查询期间清空了缓存（clear 或 flush 方法）</li>\n</ul>\n</li>\n</ul>\n<p><code>sqlSession</code>  关闭之前或者提交了事务时，会将其中的数据写入二级缓存，增删该操作或者手动清理缓存同样会使二级缓存失效。</p>\n<h4 id=\"ehcache\"><a class=\"markdownIt-Anchor\" href=\"#ehcache\">#</a> EHCache</h4>\n<p>整合 EHCache 需要先引入依赖：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.caches/mybatis-ehcache --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mybatis.caches<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-ehcache<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.2.3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>然后在启用了二级缓存的配置文件中，更改为使用 EHCache：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">namespace</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.mybatis.UserMapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">&lt;!-- 其他配置 --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">&lt;!-- 使用 EHCache 缓存 --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>cache</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.mybatis.caches.ehcache.EhcacheCache<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 缓存配置，可选的 --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 缓存前后两次访问时间间隔，超过则会删除缓存 --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>timeToIdleSeconds<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>3600<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 缓存的有效生命期，默认是 0., 也就是 element 存活时间无穷大 --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>timeToLiveSeconds<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>3600<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 在内存中缓存的最大数目 --></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>maxEntriesLocalHeap<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1000<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 在磁盘中缓存的最大数目 --></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>maxEntriesLocalDisk<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10000000<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 当内存缓存最大时，有新的缓存进入，移除缓存的策略 --></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>memoryStoreEvictionPolicy<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>LRU<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>cache</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mapper</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>也可以通过 <code>ehcache.xml</code>  配置文件进行统一配置，配置文件应该在 <code>resources</code>  目录下，EHCache 会使用 <code>dafaultCache</code>  标签中指定的管理策略：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- ehcache.xml --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ehcache</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>noNamespaceSchemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://ehcache.org/ehcache.xsd<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token attr-name\">updateCheck</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">&lt;!-- 定义磁盘缓存路径 --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>diskStore</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/path/to/ehcache<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">&lt;!-- 默认缓存策略 --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>defaultCache</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token attr-name\">maxElementsInMemory</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10000<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token attr-name\">maxElementsOnDisk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10000000<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token attr-name\">eternal</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token attr-name\">timeToIdleSeconds</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>120<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token attr-name\">timeToLiveSeconds</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>120<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token attr-name\">diskExpiryThreadIntervalSeconds</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>120<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token attr-name\">memoryStoreEvictionPolicy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>LRU<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>persistence</span> <span class=\"token attr-name\">strategy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>localTempSwap<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>defaultCache</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 缓存可配置属性</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      name: 缓存名称。</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      maxElementsInMemory：缓存最大数目</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      maxElementsOnDisk：硬盘最大缓存个数。</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      eternal：对象是否永久有效，一但设置了，timeout 将不起作用。</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      overflowToDisk：当系统当机时是否保存到磁盘</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      timeToIdleSeconds：设置对象在失效前的允许闲置时间（单位：秒）。仅当 eternal=false 时使用，可选属性，默认为 0，可闲置时间无穷大。</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      timeToLiveSeconds: 设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当 eternal=false 对时使用，默认是 0.，对象存活时间无穷大。</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      diskPersistent：是否缓存虚拟机重启期数据。</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      diskSpoolBufferSizeMB：设置 DiskStore（磁盘缓存）的缓存区大，默认是 30MB。每个 Cache 都应该有自己的一个缓冲区。</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是 120 秒。</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      clearOnFlush：内存数量最大时是否清除。</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      memoryStoreEvictionPolicy：当达到 maxElementsInMemory 限制时，将会根据指定的策略去清理内存，可选策略有 LRU、LFU、FIFO</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    --></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ehcache</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>LRU，即 Least Recently Used，意为最近最少使用或最近最久使用，在执行缓存回收时，删除近期访问数量最低的数据或删除近期闲置时间最长的数据。<br>\n其他淘汰策略还包括 LFU，最近最不经常使用策略，或 FIFO, 先进，先出策略等。</p>\n<h4 id=\"缓存原理\"><a class=\"markdownIt-Anchor\" href=\"#缓存原理\">#</a> 缓存原理</h4>\n<p><code>org.apache.ibatis.cache.Cache</code>  是 MyBatis 的缓存接口，所有缓存都需要实现的顶级接口：<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/computerscience/java-note/cache.6ttripmxub9c.webp\" alt=\"cache接口\"></p>\n<p>在 <code>Cache</code>  中，定义了缓存操作的方法：</p>\n<ul>\n<li><code>putObject</code> ：将对象存入缓存</li>\n<li><code>getObject</code> ：从缓存中取出对象</li>\n<li><code>removeObject</code> ：从缓存中删除对象</li>\n</ul>\n<p><code>org.apache.ibatis.cache.impl.PerpetualCache</code>  是 MyBatis 的默认缓存，也是缓存接口的默认实现，它的本质是一个 HashMap 集合，MyBatis 的一级缓存和二级缓存都是通过 <code>PerpetualCache</code>  来操作缓存数据的。</p>\n<ul>\n<li>一级缓存：由 <code>BaseExecutor</code>  调用 <code>PerpetualCache</code></li>\n<li>二级缓存：由 <code>CachingExecutor</code>  调用 <code>PerpetualCache</code> ， <code>CachingExecutor</code>  可以看作是对 <code>BaseExecutor</code>  的装饰。</li>\n</ul>\n<h3 id=\"插件机制\"><a class=\"markdownIt-Anchor\" href=\"#插件机制\">#</a> 插件机制</h3>\n<p>MyBatis 的四大对象指 <code>Executor</code> 、 <code>ParameterHandler</code> 、 <code>StatementHandler</code>  和 <code>ResultSetHandler</code> 。</p>\n<ul>\n<li><code>Executor</code> ：MyBatis 的执行器，用于执行增删改查操作</li>\n<li><code>ParameterHandler</code> ：处理 SQL 的参数对象</li>\n<li><code>StatementHandler</code> ：数据库的处理对象，用于执行 SQL 语句</li>\n<li><code>ResultSetHandler</code> ：处理 SQL 的返回结果集</li>\n</ul>\n<p>MyBatis 执行的大致流程为：</p>\n<ol>\n<li><code>Executor</code>  发起 sql 执行任务；</li>\n<li>调用 <code>StatementHandler</code>  中的 <code>prepare()</code>  方法进行 SQL 编译，然后调用 <code>parameterize()</code>  方法设置参数；</li>\n<li>设置参数时，实际上是调用 <code>ParameterHandler</code>  中的 <code>setparameters()</code>  方法，该方法会通过 <code>typeHandler</code>  进行类型的转换；</li>\n<li>执行 <code>query/update</code>  方法，返回的结果通过 <code>ResultHandler</code>  进行封装并返回。</li>\n</ol>\n<p>MyBatis 提供了插件机制，可以通过实现 <code>org.apache.ibatis.plugin.Interceptor</code>  接口，利用动态代理的方式，介入 MyBatis 四大对象中的任何一个方法执行过程中，更改 MyBatis 的一些核心行为，最常用的插件有分页插件 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYWdlaGVscGVyLmdpdGh1Yi5pby8=\">PageHelper</span>。</p>\n<h3 id=\"逆向工程\"><a class=\"markdownIt-Anchor\" href=\"#逆向工程\">#</a> 逆向工程</h3>\n<p>MyBatis 还支持逆向工程，这是一种先创建数据库，再由框架根据数据库表生成 Java 实体类、Mapper 接口和配置文件搭建工程的方式。反过来，先创建 Java 实体类，再由框架根据实体类生成数据库表，这种方式就是正向工程，如 Hibernate 框架。</p>\n<p>MyBatis 逆向工程通过 Maven 插件实现，配置 <code>pom.xml</code>  如下：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- Maven 在构建过程中相关配置 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 构建过程中用到的插件 --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">&lt;!-- 逆向工程的插件 --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mybatis.generator<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-generator-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.3.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 插件的依赖 --></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          <span class=\"token comment\">&lt;!-- 逆向工程的核心依赖 --></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mybatis.generator<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-generator-core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.3.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          <span class=\"token comment\">&lt;!-- mysql 数据库驱动 --></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-j<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>8.0.33<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token comment\">&lt;!-- 项目依赖中引入 MyBatis --></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">&lt;!-- MyBatis 核心包 --></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.5.7<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 其他项目依赖…… --></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>然后在 resources 目录下新建 <code>generatorConfig.xml</code>  文件，配置逆向工程的生成设置：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- generatorConfig.xml --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">generatorConfiguration</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token string\">\"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\"</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>generatorConfiguration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">&lt;!--</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    targetRuntime: 执行生成的逆向工程的版本</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    MyBatis3Simple: 生成基本的 CRUD</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    MyBatis3: 生成带条件的 CRUD</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   --></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>context</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>DB2Tables<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">targetRuntime</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MyBatis3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 数据库的连接信息 --></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>jdbcConnection</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token attr-name\">driverClass</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.mysql.cj.jdbc.Driver<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token attr-name\">connectionURL</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbc:mysql://localhost:3306/mydb<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token attr-name\">userId</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token attr-name\">password</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>123456<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">&lt;!-- javaBean 的生成策略 --></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>javaModelGenerator</span> <span class=\"token attr-name\">targetPackage</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.mybatis.pojo<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">targetProject</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./src/main/java<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>enableSubPackages<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>trimStrings<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>javaModelGenerator</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 映射文件的生成策略 --></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>sqlMapGenerator</span> <span class=\"token attr-name\">targetPackage</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.mybatis.mapper<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">targetProject</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./src/main/java<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>enableSubPackages<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>sqlMapGenerator</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">&lt;!-- Mapper 接口的生成策略 --></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>javaClientGenerator</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>XMLMAPPER<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">targetPackage</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.mybatis.mapper<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token attr-name\">targetProject</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./src/main/java<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>enableSubPackages<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>javaClientGenerator</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 逆向分析的表 --></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">&lt;!-- tableName 设置为 * 号，可以对应所有表，此时不写 domainObjectName --></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">&lt;!-- domainObjectName 属性指定生成出来的实体类的类名 --></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span> <span class=\"token attr-name\">tableName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>t_class<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">domainObjectName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>StuClass<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span> <span class=\"token attr-name\">tableName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>t_stu<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">domainObjectName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Student<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>context</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>generatorConfiguration</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>此时，项目目录如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>project<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>├── pom.xml</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>└── src</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ├── main</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    │   ├── <span class=\"token function\">java</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    │   └── resources</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    │       └── generatorConfig.xml</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    └── <span class=\"token builtin class-name\">test</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        └── <span class=\"token function\">java</span></pre></td></tr></table></figure><p>然后执行 mybatis-generator 逆向工程插件，生成代码：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>project<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>├── pom.xml</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>└── src</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ├── main</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    │   ├── <span class=\"token function\">java</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    │   │   └── com</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    │   │       └── example</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    │   │           └── mybatis</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    │   │               ├── mapper</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    │   │               │   ├── StuClassMapper.java</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    │   │               │   ├── StuClassMapper.xml</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    │   │               │   ├── StudentMapper.java</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    │   │               │   └── StudentMapper.xml</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    │   │               └── pojo</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    │   │                   ├── StuClassExample.java</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    │   │                   ├── StuClass.java</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    │   │                   ├── StudentExample.java</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    │   │                   └── Student.java</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    │   └── resources</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    │       └── generatorConfig.xml</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    └── <span class=\"token builtin class-name\">test</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        └── <span class=\"token function\">java</span></pre></td></tr></table></figure><p>在生成的 pojo 包中，除了 <code>Student</code>  和 <code>StuClass</code> ，还生成了一个 <code>StudentExample</code>  和 <code>StuClassExample</code> ，这两个类中封装的是 MyBatis 的 QBC 查询方法。</p>\n<p>QBC，全称 Query By Criteria，最大的特点是将 SQL 语句中的子句进行组建化封装，使用时可以通过调用 Criteria 对象的方法来进行 SQL 条件的拼接：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建 Example 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token class-name\">StudentExample</span> example <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StudentExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 创建 Criteria 对象并通过 QBC 方式添加查询条件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token class-name\">StudentExample<span class=\"token punctuation\">.</span>Criteria</span> criteria <span class=\"token operator\">=</span> example<span class=\"token punctuation\">.</span><span class=\"token function\">createCriteria</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  criteria<span class=\"token punctuation\">.</span><span class=\"token function\">andStuAgeBetween</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 通过 example 对象进行查询</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token class-name\">StudentMapper</span> mapper <span class=\"token operator\">=</span> sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StudentMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectByExample</span><span class=\"token punctuation\">(</span>example<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "编程学习",
                "学习笔记",
                "学习笔记",
                "MyBatis"
            ]
        },
        {
            "id": "https://www.umi.homes/posts/b34c/",
            "url": "https://www.umi.homes/posts/b34c/",
            "title": "MySQL学习笔记",
            "date_published": "2023-05-19T16:00:00.000Z",
            "content_html": "<h2 id=\"数据库概述\"><a class=\"markdownIt-Anchor\" href=\"#数据库概述\">#</a> 数据库概述</h2>\n<p>数据库是按照数据结构来组织、存储和管理数据的仓库，可以形象地将数据库视作是一个电子化的文件柜。</p>\n<h3 id=\"数据库简介\"><a class=\"markdownIt-Anchor\" href=\"#数据库简介\">#</a> 数据库简介</h3>\n<ul>\n<li>数据库（DataBase，DB）是一个长期存储在计算机内的、有组织的、有共享的、统一管理的数据集合。它是一个按数据结构来存储和管理数据的计算机软件系统。数据库既包含保管数据的仓库也包含数据管理的方法和技术。</li>\n<li>数据库管理系统（DataBase Management System，DBMS）是用于管理数据库的软件。DBMS 能定义数据存储结构，提供数据的操作机制，维护数据库的安全性、完整性和可靠性。</li>\n<li>表（Table）：表是数据库中的一个基本组织单位，用于存储数据。表由行（Row）和列（Column）组成，每一行代表一个记录，包含了特定实体的相关数据，每一列代表一个数据字段，表示特定类型的数据。</li>\n</ul>\n<h3 id=\"数据库的分类\"><a class=\"markdownIt-Anchor\" href=\"#数据库的分类\">#</a> 数据库的分类</h3>\n<p>常用的数据库模型可以分为关系型数据库和非关系型数据库。</p>\n<h4 id=\"关系型数据库\"><a class=\"markdownIt-Anchor\" href=\"#关系型数据库\">#</a> 关系型数据库</h4>\n<p>关系型数据库模型可以将复杂的数据结构归结为简单的二元关系，即二维的表格形式。<br>\n在关系型数据库中，对数据的操作几乎全部建立在一个或多个关系表格上，通过对这些关联的表格进行分类、合并、连接或选取等运算来实现对数据的管理。<br>\n关系型数据库可以通过结构化查询语句（SQL，Structure Query Language）来管理。<br>\n目前最常用的关系型数据库包括 Oracle 数据库、MySQL 和 PostgreSQL 等。</p>\n<h4 id=\"非关系型数据库\"><a class=\"markdownIt-Anchor\" href=\"#非关系型数据库\">#</a> 非关系型数据库</h4>\n<p>非关系型数据库也称为 NoSQL 数据库，意味 “Not Only SQL”，非关系型数据库诞生的目的是作为传统关系型数据库的一个补充。<br>\n非关系型数据库是为了适应高灵活、高性能和高并发的需求而产生的，它的数据存储不需要固定的表结构，通常也不存在连接操作，在大数据存取上具备关系型数据库无法比拟的性能优势。<br>\n非关系型数据库没有标准的查询语句，通常使用 REST 式数据接口或查询 API。<br>\n常见的非关系型数据库包括使用键值存储的 Redis，面向文档的 MongoDB，图型数据库 Neo4j 等。</p>\n<h3 id=\"mysql-简介\"><a class=\"markdownIt-Anchor\" href=\"#mysql-简介\">#</a> MySQL 简介</h3>\n<p>MySQL 是一个开源的中小型关系数据库管理系统，由于它具有体积小、速度快、成本低等特点，使得它成为了世界上最受欢迎的开源数据库。官网给出的使用 MySQL 的理由：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubXlzcWwuY29tL3doeS1teXNxbC8=\">Why MySQL? </span></p>\n<h4 id=\"mariadb\"><a class=\"markdownIt-Anchor\" href=\"#mariadb\">#</a> MariaDB</h4>\n<p>MySQL 现在由 Oracle 公司拥有。MariaDB 是 MySQL 的一个开源分支，它诞生的原因是为了避免 MySQL 被闭源的潜在风险。MariaDB 兼容 MySQL 的 API 和命令行，可以轻松成为 MySQL 的替代品，它也被广泛安装在各 Linux 发行版中。</p>\n<h4 id=\"mysql-安装\"><a class=\"markdownIt-Anchor\" href=\"#mysql-安装\">#</a> MySQL 安装</h4>\n<p>MySQL 提供了社区版和企业版两个版本，社区版完全免费，遵循 GPL 协议，官方不提供技术支持；企业版需要付费使用，不遵循 GPL 协议，官方会提供相应的技术服务。MySQL 版本中，MySQL5.7 是前一代的稳定版本，默认只会有漏洞修复和安全修复，MySQL8 是当前的稳定版本，比起前一代版本增加了一系列新功能。<br>\n安装 MySQL 可以在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYubXlzcWwuY29tL2Rvd25sb2Fkcy8=\"> MySQL 官网</span>进行下载安装，官网提供了 Windows 安装包、Yum、APT 还有 SUSE 的仓库，也可以<span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9fL215c3FsLw==\">通过 docker 进行安装</span>。<br>\n官网还提供了 MySQL Workbench 这个可视化工具。当然也可以使用其他的可视化管理工具，如 Navicat、DBeaver，SQLyog 等。<br>\n安装完成后需要启动 MySQL 服务，如在 Windows 的 cmd 中通过 <code>net start MySQL</code>  启动，linux 下可以使用 <code>systemctl start mysqld.service</code>  来启动，docker 安装需要使用 <code>docker run -itd --name mysql-test -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</code>  命令运行容器。</p>\n<p>MySQL 的默认端口号为 3306，启动服务后可以在命令行使用以下命令进行连接：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysql <span class=\"token parameter variable\">-h</span> <span class=\"token function\">hostname</span> <span class=\"token parameter variable\">-u</span> root <span class=\"token parameter variable\">-p</span></pre></td></tr></table></figure><p><code>hostname</code>  默认为 <code>localhost</code> ，可以省略不写。回车确定后会提示输入密码，使用安装过程中配置的 root 密码进行登陆。登陆成功后，命令行会打印出 MySQL 的版本信息，光标左侧提示符也会变成 <code>mysql&gt;</code> 。</p>\n<h2 id=\"sql-语句简介\"><a class=\"markdownIt-Anchor\" href=\"#sql-语句简介\">#</a> SQL 语句简介</h2>\n<p>虽然有图形化的 MySQL 管理工具，但大多数情况下，操作数据库使用到的是 SQL 语句。<br>\n结构化查询语句（SQL，Structure Query Language）是所有关系型数据库的标准语言，几乎所有的关系型数据库都支持 SQL。在遵循 SQL 语法规则的情况下，不同的数据库还有一些个别的语法，这被称之为数据库方言。<br>\nSQL 语句非常简洁灵活，往往是由描述性很强的英语单词组成，这使得它易于学习。而联合嵌套的 SQL 语句，又能够完成各种非常高级和复杂的数据库操作。</p>\n<h3 id=\"分类\"><a class=\"markdownIt-Anchor\" href=\"#分类\">#</a> 分类</h3>\n<p>SQL 语句可以分为以下这些类别：</p>\n<ol>\n<li>数据定义语言<br>\n数据定义语言（DDL，Data Definition Language）主要用于对数据表进行创建、修改或删除等操作，常用操作语句如： <code>create</code> 、 <code>drop</code> 、 <code>alter</code> 。</li>\n<li>数据操作语言<br>\n数据操作语言（DML，Data Manipulation Language）主要用于对数据进行增删改查操作，常用操作语句如： <code>update</code> 、 <code>insert</code> 、 <code>delete</code> 。</li>\n<li>数据控制语言<br>\n数据控制语言（DCL，Data Control Language）主要用于管理用户对数据库和数据表的访问和操作权限，常用操作语句如： <code>grant</code> 、 <code>revoke</code> 。</li>\n<li>数据查询语言<br>\n数据查询语言（Data Query Language），作用是从数据表中获得数据，关键字如 <code>select</code> ，是使用最为频繁的语言。</li>\n</ol>\n<h3 id=\"数据类型\"><a class=\"markdownIt-Anchor\" href=\"#数据类型\">#</a> 数据类型</h3>\n<p>数据库的数据类型需要在定义数据表结构的时候一同进行定义，SQL 有一些通用的数据类型，但是不同数据库之间也存在一定的差异，这里以 MySQL 为例：</p>\n<h4 id=\"数值型\"><a class=\"markdownIt-Anchor\" href=\"#数值型\">#</a> 数值型</h4>\n<p>MySQL 中的数值包括整数、浮点数和定点数三种。</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>tinyint</code></td>\n<td>很小的整数，占用 1 字节</td>\n</tr>\n<tr>\n<td><code>smallint</code></td>\n<td>小整数，占用 2 字节</td>\n</tr>\n<tr>\n<td><code>mediumint</code></td>\n<td>中等大整数，占用 3 字节</td>\n</tr>\n<tr>\n<td><code>int/integer</code></td>\n<td>普通整数，占用 4 字节</td>\n</tr>\n<tr>\n<td><code>bigint</code></td>\n<td>大整数，占用 8 字节</td>\n</tr>\n<tr>\n<td><code>float</code></td>\n<td>单精度浮点数，占用 4 字节</td>\n</tr>\n<tr>\n<td><code>double</code></td>\n<td>双精度浮点数，占用 8 字节</td>\n</tr>\n<tr>\n<td><code>decimal(m,d)</code></td>\n<td>定点数， <code>m</code>  表示有效位数， <code>d</code>  表示小数位数</td>\n</tr>\n</tbody>\n</table>\n<p>整数类型中，大部分情况下使用的都是 <code>int</code>  类型，浮点数用于表示小数，但是因为存在精度损失问题，当需要准确表示小数数值的会使用定点数 <code>decimal</code>  来表示。<br>\n另外，因为 MySQL 中不存在布尔类型，当需要表示 <code>true/false</code>  的时候，往往也会使用 <code>1/0</code>  的整数来表示。</p>\n<h4 id=\"字符型\"><a class=\"markdownIt-Anchor\" href=\"#字符型\">#</a> 字符型</h4>\n<p>字符串实质上就是一串字符，MySQL 中使用单引号 <code>'</code>  或双引号 <code>&quot;</code>  包裹。</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>char(m)</code></td>\n<td>定长字符串，占用 <code>m</code>  个字节</td>\n</tr>\n<tr>\n<td><code>varchar(m)</code></td>\n<td>可变字符串，占用长度 <code>l+1</code>  个字节</td>\n</tr>\n<tr>\n<td><code>tinytext</code></td>\n<td>短文本， 最大长度为 255 个字符</td>\n</tr>\n<tr>\n<td><code>text</code></td>\n<td>文本字符串，最大长度为 66535 个字符</td>\n</tr>\n<tr>\n<td><code>meduimtext</code></td>\n<td>中等长度文本，最大长度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>24</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{24}-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> 个字符</td>\n</tr>\n<tr>\n<td><code>longtext</code></td>\n<td>长文本，最大长度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{32}-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> 个字符</td>\n</tr>\n<tr>\n<td><code>enum</code></td>\n<td>枚举类型，限定字段只能在枚举列表取值</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"日期型\"><a class=\"markdownIt-Anchor\" href=\"#日期型\">#</a> 日期型</h4>\n<p>日期型用于表示日期（年月日）和时间数据（时分秒）。</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>date</code></td>\n<td>日期，格式 <code>YYYY-MM-DD</code></td>\n</tr>\n<tr>\n<td><code>time</code></td>\n<td>时间，格式 <code>HH:MM:SS</code></td>\n</tr>\n<tr>\n<td><code>datetime</code></td>\n<td>日期时间，格式 <code>YYYY-MM-DD HH:MM:SS</code></td>\n</tr>\n<tr>\n<td><code>year</code></td>\n<td>年份，格式 <code>YYYY</code></td>\n</tr>\n<tr>\n<td><code>timestamp</code></td>\n<td>时间戳，格式 <code>YYYYMMDD HHMMSS</code></td>\n</tr>\n</tbody>\n</table>\n<p>MySQL 中输入日期时间数据，必须符合定义类型的格式，否则不能正确输入。每个类型都有合法的取值范围，当指定不合法的值时，系统会将 0 插入数据库中。</p>\n<h4 id=\"二进制\"><a class=\"markdownIt-Anchor\" href=\"#二进制\">#</a> 二进制</h4>\n<p>二进制类型可以用于存储图像音乐、格式文本、程序文件等二进制数据。</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>bt(m)</code></td>\n<td>位字段类型</td>\n</tr>\n<tr>\n<td><code>binary(m)</code></td>\n<td>固定长度的二进制</td>\n</tr>\n<tr>\n<td><code>varbinary(m)</code></td>\n<td>可变长度的二进制</td>\n</tr>\n<tr>\n<td><code>tinyblob(m)</code></td>\n<td>二进制类型的短文本</td>\n</tr>\n<tr>\n<td><code>blob(m)</code></td>\n<td>二进制类型的普通文本</td>\n</tr>\n<tr>\n<td><code>mediumblob(m)</code></td>\n<td>二进制类型的中文本</td>\n</tr>\n<tr>\n<td><code>longblob(m)</code></td>\n<td>二进制类型的长文本</td>\n</tr>\n</tbody>\n</table>\n<p>实际开发中，并不建议在数据库中存储二进制数据，因为二进制数据往往很大并占据较多的存储空间，影响了数据库的性能。</p>\n<h3 id=\"语法规则\"><a class=\"markdownIt-Anchor\" href=\"#语法规则\">#</a> 语法规则</h3>\n<p>SQL 的语法规则相对来说比较简单：</p>\n<ol>\n<li>SQL 语法中，对表名、列名、关键字等不区分大小写</li>\n<li>SQL 语句可以一行或多行书写，以 <code>;</code>  作为每条完整的 SQL 语句结束</li>\n<li>SQL 语句的标点符号必须是英文半角符号，字符串和日期类型建议使用单引号包裹</li>\n<li>标识符命名不建议使用关键字，若不小心使用，可以使用反引号包裹</li>\n<li>同一个数据库系统中，数据库不能重名；同一个库中，表不能重名；同一张表中，字段不能重名</li>\n<li>可以使用 <code>#</code> 或 <code>--</code>  表示单行注释， <code>/*...*/</code>  中书写多行注释</li>\n</ol>\n<h2 id=\"基本操作\"><a class=\"markdownIt-Anchor\" href=\"#基本操作\">#</a> 基本操作</h2>\n<p>了解了 SQL 语句后，就可以使用它来对 MySQL 数据进行一些简单操作了。<br>\n最基本的 MySQL 操作包括数据库和数据表的建立、数据的增删改和简单查询。</p>\n<h3 id=\"创建库与表\"><a class=\"markdownIt-Anchor\" href=\"#创建库与表\">#</a> 创建库与表</h3>\n<p>创建数据库与数据表属于 DDL 操作，DDL 操作还包括数据库和数据表的删除和修改，对应的关键字分别是 <code>create</code> 、 <code>drop</code>  和 <code>alter</code> 。</p>\n<h4 id=\"创建数据库\"><a class=\"markdownIt-Anchor\" href=\"#创建数据库\">#</a> 创建数据库</h4>\n<p>创建数据库的命令是 <code>create database 数据库名</code> 。<br>\n在命令行中，可以使用 <code>show databases</code>  和 <code>show tables</code>  来查看当前数据库系统中的数据库和当前数据库中表的信息，使用 <code>use 数据库名</code> 来使用一个数据库。</p>\n<p>基本操作的语句如下：</p>\n<ul>\n<li>查看： <code>show databases;</code> ，查看数据库； <code>show tables</code> ，查看数据表。</li>\n<li>使用： <code>use 数据库名</code> ，切换当前使用数据库。</li>\n<li>创建： <code>create database 数据库名</code> ，创建一个数据库。</li>\n<li>删除： <code>drop database 数据库名</code> ，删除一个数据库； <code>drop table 数据表名</code> ，删除一张数据表。</li>\n</ul>\n<p>数据库的操作示例如下。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>none<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">create</span> <span class=\"token keyword\">database</span> demo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Query OK<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token keyword\">row</span> affected <span class=\"token punctuation\">(</span><span class=\"token number\">0.009</span> sec<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>none<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">show</span> <span class=\"token keyword\">databases</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">--------------------+</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">|</span> <span class=\"token keyword\">Database</span>           <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">--------------------+</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">|</span> demo               <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">|</span> information_schema <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">|</span> mysql              <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">|</span> performance_schema <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">|</span> sys                <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">--------------------+</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">5</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.002</span> sec<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>none<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">drop</span> <span class=\"token keyword\">database</span> demo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Query OK<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token keyword\">rows</span> affected <span class=\"token punctuation\">(</span><span class=\"token number\">0.011</span> sec<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>较早版本（如 5.7）的 MySQL 在创建数据库时默认字符集是 latin1，如果不进行修改会出现中文乱码的情况。MySQL8 默认编码使用 utf8mb4，它是 utf8 的超集，完全兼容 uft8, 能够用四个字节存储更多的字符，不必担心汉字的乱码问题。如果不希望使用默认的编码，可以在创建数据库的时候指定，也可以在创建完成后进行修改：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 可以在创建时指定</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>none<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">create</span> <span class=\"token keyword\">database</span> demo <span class=\"token keyword\">charset</span> uft8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Query OK<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token keyword\">row</span> affected<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> warning <span class=\"token punctuation\">(</span><span class=\"token number\">0.009</span> sec<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 又或者在创建后修改</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>none<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">alter</span> <span class=\"token keyword\">database</span> demo <span class=\"token keyword\">charset</span> utf8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Query OK<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token keyword\">row</span> affected<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> warning <span class=\"token punctuation\">(</span><span class=\"token number\">0.010</span> sec<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"创建数据表\"><a class=\"markdownIt-Anchor\" href=\"#创建数据表\">#</a> 创建数据表</h4>\n<p>建立数据表的之前候需要先指定使用的数据库，然后在当前使用的数据库下建立。建立数据表的语法如下：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> 数据表名<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   字段名<span class=\"token number\">1</span> 数据类型 <span class=\"token punctuation\">[</span>约束条件<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   字段名<span class=\"token number\">2</span> 数据类型 <span class=\"token punctuation\">[</span>约束条件<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   字段名<span class=\"token number\">3</span> 数据类型 <span class=\"token punctuation\">[</span>约束条件<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">-- constrain 区域</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>[]</code>  中的内容可写可不写，每一列之间使用 <code>,</code>  隔开，如果是最后一列则不用书写。最后一列和右括号之间的区域称为 <code>constrain</code>  区域，可以在这里书写约束条件。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> mytable<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   age <span class=\"token keyword\">int</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>查询创建结果如下， <code>desc 数据表名</code> 可以查看表结构：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span>demo<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">show</span> <span class=\"token keyword\">tables</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">----------------+</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">|</span> Tables_in_demo <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">----------------+</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">|</span> mytable        <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">----------------+</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token keyword\">row</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.002</span> sec<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span>demo<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">desc</span> mytable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">-------+-------------+------+-----+---------+-------+</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">|</span> Field <span class=\"token operator\">|</span> <span class=\"token keyword\">Type</span>        <span class=\"token operator\">|</span> <span class=\"token boolean\">Null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">Key</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">Default</span> <span class=\"token operator\">|</span> Extra <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">-------+-------------+------+-----+---------+-------+</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">|</span> id    <span class=\"token operator\">|</span> <span class=\"token keyword\">int</span>         <span class=\"token operator\">|</span> YES  <span class=\"token operator\">|</span>     <span class=\"token operator\">|</span> <span class=\"token boolean\">NULL</span>    <span class=\"token operator\">|</span>       <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">|</span> name  <span class=\"token operator\">|</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> YES  <span class=\"token operator\">|</span>     <span class=\"token operator\">|</span> <span class=\"token boolean\">NULL</span>    <span class=\"token operator\">|</span>       <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">|</span> age   <span class=\"token operator\">|</span> <span class=\"token keyword\">int</span>         <span class=\"token operator\">|</span> YES  <span class=\"token operator\">|</span>     <span class=\"token operator\">|</span> <span class=\"token boolean\">NULL</span>    <span class=\"token operator\">|</span>       <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">-------+-------------+------+-----+---------+-------+</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">3</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.002</span> sec<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>然后使用 <code>drop table 数据表名</code> 就可以删除相应的数据表。</p>\n<h4 id=\"修改数据表\"><a class=\"markdownIt-Anchor\" href=\"#修改数据表\">#</a> 修改数据表</h4>\n<p>已经创建完成的数据表可以使用 <code>alter</code>  关键字进行修改：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. 添加列</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> 表名 <span class=\"token keyword\">add</span> 字段名 数据类型 <span class=\"token punctuation\">[</span>约束条件<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 2. 删除列</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> 表名 <span class=\"token keyword\">drop</span> 字段名<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 3. 修改列</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> 表名 <span class=\"token keyword\">modify</span> 字段名 数据类型 <span class=\"token punctuation\">[</span>约束条件<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">-- MySQL 中还可以使用以下语句重命名一个列</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> 表名 change 旧字段名 新字段名 数据类型 <span class=\"token punctuation\">[</span>约束条件<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> 表名 <span class=\"token keyword\">rename</span> <span class=\"token keyword\">column</span> 旧字段名 <span class=\"token keyword\">to</span> 新字段名<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">-- 4. 重命名表</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> 旧表名 <span class=\"token keyword\">rename</span> <span class=\"token keyword\">to</span> 新表名<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">rename</span> <span class=\"token keyword\">table</span> 旧表名 <span class=\"token keyword\">to</span> 新表名<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"表的约束\"><a class=\"markdownIt-Anchor\" href=\"#表的约束\">#</a> 表的约束</h3>\n<p>表的约束是对数据表的行或列的数据做出约束，保证数据的正确性、完整性和唯一性。<br>\n表的约束可以在创建表的时候定义，也可以在创建后指定，例如：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 创建表时指定</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   uid <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span>约束条件<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   uname <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 在约束区指定</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   uid <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   uname <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token punctuation\">[</span><span class=\"token keyword\">constraint</span> 约束名<span class=\"token punctuation\">]</span> 约束条件 <span class=\"token punctuation\">(</span>约束字段<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">-- 在建立表之后修改</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   uid <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   uname <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">add</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">constraint</span> 约束名<span class=\"token punctuation\">]</span> 约束条件 <span class=\"token punctuation\">(</span>约束字段<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>一般来讲，表约束在创建表的时候一同指定，常见约束如下：</p>\n<h4 id=\"主键约束-primary-key\"><a class=\"markdownIt-Anchor\" href=\"#主键约束-primary-key\">#</a> 主键约束 primary key</h4>\n<p>主键，即主码，其数值唯一且不能为空。主键能够唯一地标识表中的一条数据，<strong>每张表只能有一个主键</strong>。数据表没有主键并不会报错，但通常要求一张表应该有一个主键。<br>\n可以使用单列作为主键，也可以多列一起作为一个主键，称为联合主键。联合主键要求多个列不能完全相同，它的声明语法是 <code>primary key (field1,field2,...)</code> 。</p>\n<p>使用主键约束：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   uid <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   uname <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">constraint</span> user_id <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token punctuation\">(</span>uid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>查询创建的表如下：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span>demo<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">desc</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">-------+-------------+------+-----+---------+-------+</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">|</span> Field <span class=\"token operator\">|</span> <span class=\"token keyword\">Type</span>        <span class=\"token operator\">|</span> <span class=\"token boolean\">Null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">Key</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">Default</span> <span class=\"token operator\">|</span> Extra <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">-------+-------------+------+-----+---------+-------+</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">|</span> uid   <span class=\"token operator\">|</span> <span class=\"token keyword\">int</span>         <span class=\"token operator\">|</span> <span class=\"token keyword\">NO</span>   <span class=\"token operator\">|</span> PRI <span class=\"token operator\">|</span> <span class=\"token boolean\">NULL</span>    <span class=\"token operator\">|</span>       <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">|</span> uname <span class=\"token operator\">|</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> YES  <span class=\"token operator\">|</span>     <span class=\"token operator\">|</span> <span class=\"token boolean\">NULL</span>    <span class=\"token operator\">|</span>       <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">-------+-------------+------+-----+---------+-------+</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">2</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.002</span> sec<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>使用 <code>alter table 表名 drop primary key</code>  即可删除主键约束，但是因为主键不能为空，所以对字段的非空约束仍然存在：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span>demo<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">drop</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Query OK<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token keyword\">rows</span> affected <span class=\"token punctuation\">(</span><span class=\"token number\">0.070</span> sec<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Records: <span class=\"token number\">0</span>  Duplicates: <span class=\"token number\">0</span>  <span class=\"token keyword\">Warnings</span>: <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span>demo<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">desc</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">-------+-------------+------+-----+---------+-------+</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">|</span> Field <span class=\"token operator\">|</span> <span class=\"token keyword\">Type</span>        <span class=\"token operator\">|</span> <span class=\"token boolean\">Null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">Key</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">Default</span> <span class=\"token operator\">|</span> Extra <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">-------+-------------+------+-----+---------+-------+</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">|</span> uid   <span class=\"token operator\">|</span> <span class=\"token keyword\">int</span>         <span class=\"token operator\">|</span> <span class=\"token keyword\">NO</span>   <span class=\"token operator\">|</span>     <span class=\"token operator\">|</span> <span class=\"token boolean\">NULL</span>    <span class=\"token operator\">|</span>       <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">|</span> uname <span class=\"token operator\">|</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> YES  <span class=\"token operator\">|</span>     <span class=\"token operator\">|</span> <span class=\"token boolean\">NULL</span>    <span class=\"token operator\">|</span>       <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">-------+-------------+------+-----+---------+-------+</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">2</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.002</span> sec<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"非空约束-not-null\"><a class=\"markdownIt-Anchor\" href=\"#非空约束-not-null\">#</a> 非空约束 not null</h4>\n<p>被非空约束的字段值不能为空。</p>\n<h4 id=\"默认约束-default\"><a class=\"markdownIt-Anchor\" href=\"#默认约束-default\">#</a> 默认约束 default</h4>\n<p>指定默认约束的语句为 <code>default 默认值</code> 。指定了默认约束的字段，当新增记录没有为这个字段赋值时，系统会使用这个默认值。</p>\n<h4 id=\"唯一约束-unique\"><a class=\"markdownIt-Anchor\" href=\"#唯一约束-unique\">#</a> 唯一约束 unique</h4>\n<p>唯一约束要求该字段的值唯一。与主键约束不同，唯一约束的值可以为 <code>NULL</code> ，同一张表中也可以有多个唯一约束，它仅仅要求被约束的这一字段的值不重复。</p>\n<h4 id=\"自增约束-auto_increment\"><a class=\"markdownIt-Anchor\" href=\"#自增约束-auto_increment\">#</a> 自增约束 auto_increment</h4>\n<p>自增约束的字段可以是任何整数类型。MySQL 中，自增约束字段的初始值为 1，每当新增一条记录时，该字段的值会自动加 1。<br>\n一张表中只能有一个自增约束，因为<strong>自增约束字段必须是主键的一部分</strong>（作为主键或者联合主键中的一个字段）。<br>\n使用主键约束和自增约束的时候，需先删除自增约束，才能删除主键约束。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span>demo<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">desc</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">-------+-------------+------+-----+---------+----------------+</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">|</span> Field <span class=\"token operator\">|</span> <span class=\"token keyword\">Type</span>        <span class=\"token operator\">|</span> <span class=\"token boolean\">Null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">Key</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">Default</span> <span class=\"token operator\">|</span> Extra          <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">-------+-------------+------+-----+---------+----------------+</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">|</span> uid   <span class=\"token operator\">|</span> <span class=\"token keyword\">int</span>         <span class=\"token operator\">|</span> <span class=\"token keyword\">NO</span>   <span class=\"token operator\">|</span> PRI <span class=\"token operator\">|</span> <span class=\"token boolean\">NULL</span>    <span class=\"token operator\">|</span> <span class=\"token keyword\">auto_increment</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">|</span> uname <span class=\"token operator\">|</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> YES  <span class=\"token operator\">|</span>     <span class=\"token operator\">|</span> <span class=\"token boolean\">NULL</span>    <span class=\"token operator\">|</span>                <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">-------+-------------+------+-----+---------+----------------+</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">2</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.003</span> sec<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">-- 尝试删除主键约束，失败</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span>demo<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">drop</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>ERROR <span class=\"token number\">1075</span> <span class=\"token punctuation\">(</span><span class=\"token number\">42000</span><span class=\"token punctuation\">)</span>: Incorrect <span class=\"token keyword\">table</span> definition<span class=\"token punctuation\">;</span> there can be only one auto <span class=\"token keyword\">column</span> <span class=\"token operator\">and</span> it must be defined <span class=\"token keyword\">as</span> a <span class=\"token keyword\">key</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">-- 删除自增约束</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span>demo<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">modify</span> uid <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Query OK<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token keyword\">rows</span> affected <span class=\"token punctuation\">(</span><span class=\"token number\">0.043</span> sec<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Records: <span class=\"token number\">0</span>  Duplicates: <span class=\"token number\">0</span>  <span class=\"token keyword\">Warnings</span>: <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">-- 再删除主键约束，成功</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span>demo<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">drop</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Query OK<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token keyword\">rows</span> affected <span class=\"token punctuation\">(</span><span class=\"token number\">0.045</span> sec<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>Records: <span class=\"token number\">0</span>  Duplicates: <span class=\"token number\">0</span>  <span class=\"token keyword\">Warnings</span>: <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span>demo<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">desc</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">-------+-------------+------+-----+---------+-------+</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token operator\">|</span> Field <span class=\"token operator\">|</span> <span class=\"token keyword\">Type</span>        <span class=\"token operator\">|</span> <span class=\"token boolean\">Null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">Key</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">Default</span> <span class=\"token operator\">|</span> Extra <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">-------+-------------+------+-----+---------+-------+</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token operator\">|</span> uid   <span class=\"token operator\">|</span> <span class=\"token keyword\">int</span>         <span class=\"token operator\">|</span> <span class=\"token keyword\">NO</span>   <span class=\"token operator\">|</span>     <span class=\"token operator\">|</span> <span class=\"token boolean\">NULL</span>    <span class=\"token operator\">|</span>       <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token operator\">|</span> uname <span class=\"token operator\">|</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> YES  <span class=\"token operator\">|</span>     <span class=\"token operator\">|</span> <span class=\"token boolean\">NULL</span>    <span class=\"token operator\">|</span>       <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">-------+-------------+------+-----+---------+-------+</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token number\">2</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.002</span> sec<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"外键约束-foreign-key\"><a class=\"markdownIt-Anchor\" href=\"#外键约束-foreign-key\">#</a> 外键约束 foreign key</h4>\n<p>外键约束用来在多个表之间建立连接，一个表可以没有外键，也可以有多个外键。如果它有外键，那么它的每一个<strong>外键值必须等于另一个表中主键的某个值</strong>。<br>\n外键的作用是保证数据引用的完整性，<strong>定义外键后不允许删除在另一个表中具有关联关系的行</strong>。<br>\n两个具有关联关系的表中，相关联字段中主键所在的那个表称为主表，相关联字段中外键所在的那个表称为从表。</p>\n<p>外键定义语句为 <code>[constraint 外键名] foreign key 从表名 (字段名) references 主表名 (主键列)</code> ，示例如下：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 建立两张表结构，并设置外键约束</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> class<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      cid <span class=\"token keyword\">int</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      cname <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> class <span class=\"token punctuation\">(</span>cname<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'class1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   uid <span class=\"token keyword\">int</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   uname <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   uage <span class=\"token keyword\">int</span> <span class=\"token keyword\">default</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   uclass <span class=\"token keyword\">int</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token keyword\">constraint</span> uc_fk <span class=\"token keyword\">foreign</span> <span class=\"token keyword\">key</span> <span class=\"token punctuation\">(</span>uclass<span class=\"token punctuation\">)</span> <span class=\"token keyword\">references</span> class <span class=\"token punctuation\">(</span>cid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">-- 外键约束可以如上创建表的时候在约束区指定，也可以使用 alter 语句</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">add</span> <span class=\"token keyword\">constraint</span> uc_fk <span class=\"token keyword\">foreign</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">user</span> <span class=\"token punctuation\">(</span>uclass<span class=\"token punctuation\">)</span> <span class=\"token keyword\">references</span> class <span class=\"token punctuation\">(</span>cid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>尝试查看表状态并添加一些记录：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span>demo<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">desc</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">--------+-------------+------+-----+---------+----------------+</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">|</span> Field  <span class=\"token operator\">|</span> <span class=\"token keyword\">Type</span>        <span class=\"token operator\">|</span> <span class=\"token boolean\">Null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">Key</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">Default</span> <span class=\"token operator\">|</span> Extra          <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">--------+-------------+------+-----+---------+----------------+</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">|</span> uid    <span class=\"token operator\">|</span> <span class=\"token keyword\">int</span>         <span class=\"token operator\">|</span> <span class=\"token keyword\">NO</span>   <span class=\"token operator\">|</span> PRI <span class=\"token operator\">|</span> <span class=\"token boolean\">NULL</span>    <span class=\"token operator\">|</span> <span class=\"token keyword\">auto_increment</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">|</span> uname  <span class=\"token operator\">|</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> YES  <span class=\"token operator\">|</span>     <span class=\"token operator\">|</span> <span class=\"token boolean\">NULL</span>    <span class=\"token operator\">|</span>                <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">|</span> uage   <span class=\"token operator\">|</span> <span class=\"token keyword\">int</span>         <span class=\"token operator\">|</span> YES  <span class=\"token operator\">|</span>     <span class=\"token operator\">|</span> <span class=\"token number\">20</span>      <span class=\"token operator\">|</span>                <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">|</span> uclass <span class=\"token operator\">|</span> <span class=\"token keyword\">int</span>         <span class=\"token operator\">|</span> <span class=\"token keyword\">NO</span>   <span class=\"token operator\">|</span> MUL <span class=\"token operator\">|</span> <span class=\"token boolean\">NULL</span>    <span class=\"token operator\">|</span>                <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">--------+-------------+------+-----+---------+----------------+</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">4</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.001</span> sec<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span>demo<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">user</span> <span class=\"token punctuation\">(</span>uname<span class=\"token punctuation\">,</span> uage<span class=\"token punctuation\">,</span> uclass<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'ming'</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hong'</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Query OK<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token keyword\">rows</span> affected <span class=\"token punctuation\">(</span><span class=\"token number\">0.034</span> sec<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Records: <span class=\"token number\">2</span>  Duplicates: <span class=\"token number\">0</span>  <span class=\"token keyword\">Warnings</span>: <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span>demo<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">user</span> <span class=\"token punctuation\">(</span>uname<span class=\"token punctuation\">,</span> uage<span class=\"token punctuation\">,</span> uclass<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'wang'</span><span class=\"token punctuation\">,</span><span class=\"token number\">21</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>ERROR <span class=\"token number\">1452</span> <span class=\"token punctuation\">(</span><span class=\"token number\">23000</span><span class=\"token punctuation\">)</span>: Cannot <span class=\"token keyword\">add</span> <span class=\"token operator\">or</span> <span class=\"token keyword\">update</span> a child <span class=\"token keyword\">row</span>: a <span class=\"token keyword\">foreign</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">constraint</span> fails <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>demo<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>user<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">CONSTRAINT</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>uc_fk<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">FOREIGN</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>uclass<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">REFERENCES</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>class<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>cid<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>当插入的值符合外键约束时，插入操作成功了；<br>\n当插入的值不在外键约束范围时，报错信息很明确的展示了插入失败的原因。</p>\n<p>外键约束相当于在主表和从表之间形成了一对多的关系。如果两张表是多对多的关系，需要新建一张中间表，专门用于外键的存放。</p>\n<h3 id=\"数据操作\"><a class=\"markdownIt-Anchor\" href=\"#数据操作\">#</a> 数据操作</h3>\n<p>使用数据表，最简单常用的操作无非就是对表中的记录进增删改查。</p>\n<p>操作所使用的示例数据库如下：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span>demo<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">-</span><span class=\"token operator\">></span> uid <span class=\"token keyword\">int</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">-</span><span class=\"token operator\">></span> uname <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">-</span><span class=\"token operator\">></span> uage <span class=\"token keyword\">int</span> <span class=\"token keyword\">default</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Query OK<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token keyword\">rows</span> affected <span class=\"token punctuation\">(</span><span class=\"token number\">0.025</span> sec<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span>demo<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">desc</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">-------+-------------+------+-----+---------+----------------+</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">|</span> Field <span class=\"token operator\">|</span> <span class=\"token keyword\">Type</span>        <span class=\"token operator\">|</span> <span class=\"token boolean\">Null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">Key</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">Default</span> <span class=\"token operator\">|</span> Extra          <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">-------+-------------+------+-----+---------+----------------+</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">|</span> uid   <span class=\"token operator\">|</span> <span class=\"token keyword\">int</span>         <span class=\"token operator\">|</span> <span class=\"token keyword\">NO</span>   <span class=\"token operator\">|</span> PRI <span class=\"token operator\">|</span> <span class=\"token boolean\">NULL</span>    <span class=\"token operator\">|</span> <span class=\"token keyword\">auto_increment</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">|</span> uname <span class=\"token operator\">|</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">NO</span>   <span class=\"token operator\">|</span>     <span class=\"token operator\">|</span> <span class=\"token boolean\">NULL</span>    <span class=\"token operator\">|</span>                <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">|</span> uage  <span class=\"token operator\">|</span> <span class=\"token keyword\">int</span>         <span class=\"token operator\">|</span> YES  <span class=\"token operator\">|</span>     <span class=\"token operator\">|</span> <span class=\"token number\">20</span>      <span class=\"token operator\">|</span>                <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">-------+-------------+------+-----+---------+----------------+</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">3</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.003</span> sec<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"插入操作\"><a class=\"markdownIt-Anchor\" href=\"#插入操作\">#</a> 插入操作</h4>\n<p>插入操作的基本语句如下：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> 表名 <span class=\"token punctuation\">(</span>字段<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 字段<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span>值<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 值<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其中， <code>into</code>  字段可以省略。值列表需要和字段列表一一对应，为对应字段添加值。如果值列表包含并对应所有字段列表，则可以省略字段列表，比如只有三列字段：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> 表名 <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span>值<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 值<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> 值<span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>还可以一次在表中插入多组数据：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span>demo<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">insert</span> <span class=\"token keyword\">user</span> <span class=\"token punctuation\">(</span>uname<span class=\"token punctuation\">,</span>uage<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'ming'</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hong'</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">'liang'</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Query OK<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token keyword\">rows</span> affected <span class=\"token punctuation\">(</span><span class=\"token number\">0.008</span> sec<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Records: <span class=\"token number\">3</span>  Duplicates: <span class=\"token number\">0</span>  <span class=\"token keyword\">Warnings</span>: <span class=\"token number\">0</span></pre></td></tr></table></figure><p>同时插入多条记录时，MySQL 会返回一些额外信息：</p>\n<ul>\n<li>Records：表明插入的记录条数</li>\n<li>Duplicates：表明插入时被忽略的记录，原因可能是这些记录包含了重复的主键值</li>\n<li>Warnings：表明有问题的数据值，例如发生数据类型转换</li>\n</ul>\n<h4 id=\"删除操作\"><a class=\"markdownIt-Anchor\" href=\"#删除操作\">#</a> 删除操作</h4>\n<p>删除操作的基本语句如下：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">delete</span> <span class=\"token keyword\">from</span> 表名 <span class=\"token punctuation\">[</span><span class=\"token keyword\">where</span> 条件<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其中， <code>where</code>  后面接指定的删除条件，如果没有指定 <code>where</code>  则会将表中的数据都删除。<br>\nMySQL 中的条件判断与大多数编程语言中条件判断相似，它使用 <code>=</code>  判段相等，使用 <code>!=</code>  或 <code>&lt;&gt;</code>  判断不等。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span>demo<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">delete</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">where</span> uid <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Query OK<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token keyword\">row</span> affected <span class=\"token punctuation\">(</span><span class=\"token number\">0.007</span> sec<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>使用 <code>truncate</code>  语句也可以删除表，它和 <code>delete</code>  的区别是，它会直接删除原来的表并新建一张。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span>demo<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">truncate</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Query OK<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token keyword\">rows</span> affected <span class=\"token punctuation\">(</span><span class=\"token number\">0.027</span> sec<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>因为 <code>truncate</code>  是直接删除表，所以在结合自增约束使用时， <code>truncate</code>  后会重新编号，而 <code>delete</code>  后新增记录还会按照之前的自增序号编号。</p>\n<h4 id=\"更新操作\"><a class=\"markdownIt-Anchor\" href=\"#更新操作\">#</a> 更新操作</h4>\n<p>更新操作的基本语句如下：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">update</span> 表名 <span class=\"token keyword\">set</span> 字段名 <span class=\"token operator\">=</span> 新值 <span class=\"token punctuation\">[</span><span class=\"token keyword\">where</span> 条件<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>同样的，如果省略 <code>where</code>  后面的条件，会将表中指定字段全更改为新值。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span>demo<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">insert</span> <span class=\"token keyword\">user</span> <span class=\"token punctuation\">(</span>uname<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'小明'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">'小红'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Query OK<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token keyword\">rows</span> affected <span class=\"token punctuation\">(</span><span class=\"token number\">0.008</span> sec<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Records: <span class=\"token number\">2</span>  Duplicates: <span class=\"token number\">0</span>  <span class=\"token keyword\">Warnings</span>: <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span>demo<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">-----+--------+------+</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">|</span> uid <span class=\"token operator\">|</span> uname  <span class=\"token operator\">|</span> uage <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">-----+--------+------+</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">1</span> <span class=\"token operator\">|</span> 小明   <span class=\"token operator\">|</span>   <span class=\"token number\">20</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">2</span> <span class=\"token operator\">|</span> 小红   <span class=\"token operator\">|</span>   <span class=\"token number\">20</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">-----+--------+------+</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">2</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.001</span> sec<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span>demo<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">update</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">set</span> uage <span class=\"token operator\">=</span> <span class=\"token number\">25</span> <span class=\"token keyword\">where</span> uname <span class=\"token operator\">=</span> <span class=\"token string\">'小明'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Query OK<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token keyword\">row</span> affected <span class=\"token punctuation\">(</span><span class=\"token number\">0.007</span> sec<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">Rows</span> <span class=\"token keyword\">matched</span>: <span class=\"token number\">1</span>  Changed: <span class=\"token number\">1</span>  <span class=\"token keyword\">Warnings</span>: <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span>demo<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">-----+--------+------+</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token operator\">|</span> uid <span class=\"token operator\">|</span> uname  <span class=\"token operator\">|</span> uage <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">-----+--------+------+</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">1</span> <span class=\"token operator\">|</span> 小明   <span class=\"token operator\">|</span>   <span class=\"token number\">25</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">2</span> <span class=\"token operator\">|</span> 小红   <span class=\"token operator\">|</span>   <span class=\"token number\">20</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">-----+--------+------+</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token number\">2</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.001</span> sec<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>如上述语句，可以将 <code>uname = '小明'</code>  这条记录的 <code>uage</code>  属性更新为了新的值。</p>\n<h2 id=\"数据查询\"><a class=\"markdownIt-Anchor\" href=\"#数据查询\">#</a> 数据查询</h2>\n<p>数据查询是数据库的重要功能，它不仅要求数据库能返回其中存储的数据，还要求对获得的结果进行过滤筛选，得到符合期望的结果。<br>\n <code>select</code>  是 MySQL 中查询语句的基本关键字。<strong>查询的结果也是一张伪表，伪表只能读不能操作</strong>。</p>\n<h3 id=\"单表查询\"><a class=\"markdownIt-Anchor\" href=\"#单表查询\">#</a> 单表查询</h3>\n<h4 id=\"简单查询\"><a class=\"markdownIt-Anchor\" href=\"#简单查询\">#</a> 简单查询</h4>\n<p>简单的查询语句如下：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> 字段<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>字段<span class=\"token number\">2</span> <span class=\"token keyword\">from</span> 表名 <span class=\"token punctuation\">[</span><span class=\"token keyword\">where</span> 条件<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>select</code>  后的字段列表可以使用 <code>*</code>  通配符表示匹配所有字段，结果就是返回整张表。</p>\n<p><code>where</code>  条件中，除了可以使用比较运算符，还可以使用其他判断：</p>\n<ul>\n<li>逻辑运算符： <code>and</code>  与逻辑、 <code>or</code>  或逻辑、 <code>not</code>  非逻辑</li>\n<li><code>between and</code> ：查询位于某一区间的值</li>\n<li><code>in (值列表)</code> ：查询等于值列表中的值</li>\n<li><code>like pattern</code> ：查询模糊匹配的值， <code>%</code>  匹配 0 个或 n 个字符， <code>_</code> 匹配一个字符</li>\n<li><code>regexp</code> ：查询符合正则表达式的值</li>\n<li><code>is null</code>  和 <code>not null</code> ：查询空值和非空值</li>\n</ul>\n<p><code>as</code>  关键字可以用于给字段名重新指定别名，也可以省略 <code>as</code> ：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span>demo<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">select</span> uid <span class=\"token punctuation\">[</span><span class=\"token keyword\">as</span><span class=\"token punctuation\">]</span> id<span class=\"token punctuation\">,</span>uname <span class=\"token punctuation\">[</span><span class=\"token keyword\">as</span><span class=\"token punctuation\">]</span> name <span class=\"token keyword\">from</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">----+--------+</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">|</span> id <span class=\"token operator\">|</span> name   <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">----+--------+</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">|</span>  <span class=\"token number\">1</span> <span class=\"token operator\">|</span> 小明   <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">|</span>  <span class=\"token number\">2</span> <span class=\"token operator\">|</span> 小红   <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">----+--------+</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">2</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.001</span> sec<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"数据过滤\"><a class=\"markdownIt-Anchor\" href=\"#数据过滤\">#</a> 数据过滤</h4>\n<ol>\n<li>\n<p>去重<br>\n <code>distinct</code>  关键字消除查询结果中重复的记录值：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token keyword\">distinct</span> 字段名 <span class=\"token keyword\">from</span> 表名<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>排序<br>\n <code>order by</code>  可以对查询结果进行排序：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> 字段名 <span class=\"token keyword\">from</span> 表名 <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> 排序字段 <span class=\"token keyword\">desc</span><span class=\"token operator\">|</span><span class=\"token keyword\">asc</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>order by</code>  会按照排序字段的顺序进行排序， <code>desc</code>  指示为降序排序， <code>asc</code>  是默认值，升序排序。</p>\n</li>\n<li>\n<p>分页<br>\n <code>limit</code>  关键字为搜索结果分页，可以返回结果中的前几行：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> 字段名 <span class=\"token keyword\">from</span> 表名 <span class=\"token keyword\">limit</span> <span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> m<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其中， <code>n</code>  如果有，则表示行偏移量，从哪一行开始，没有时默认为 0， <code>m</code>  表示返回几行记录。<br>\n如上语句表示从第 <code>n+1</code>  行开始，返回 <code>m</code>  条检索记录。</p>\n</li>\n<li>\n<p>分组<br>\n <code>group by</code>  是分组查询的关键字，分组查询通常和聚合函数联合使用。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> 聚合函数 <span class=\"token punctuation\">(</span>字段<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> 表名 <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> 分组字段 <span class=\"token punctuation\">[</span><span class=\"token keyword\">having</span> 条件<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如下示例，对学生成绩进行分组查询：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span>demo<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> grade<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">---------+---------+-------+</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">|</span> student <span class=\"token operator\">|</span> subject <span class=\"token operator\">|</span> grade <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">---------+---------+-------+</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">|</span> 小明    <span class=\"token operator\">|</span> 语文    <span class=\"token operator\">|</span>    <span class=\"token number\">72</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">|</span> 小明    <span class=\"token operator\">|</span> 数学    <span class=\"token operator\">|</span>    <span class=\"token number\">90</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">|</span> 小明    <span class=\"token operator\">|</span> 英语    <span class=\"token operator\">|</span>    <span class=\"token number\">67</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">|</span> 小红    <span class=\"token operator\">|</span> 语文    <span class=\"token operator\">|</span>    <span class=\"token number\">75</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">|</span> 小红    <span class=\"token operator\">|</span> 数学    <span class=\"token operator\">|</span>    <span class=\"token number\">87</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">|</span> 小红    <span class=\"token operator\">|</span> 英语    <span class=\"token operator\">|</span>    <span class=\"token number\">88</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">---------+---------+-------+</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">6</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.001</span> sec<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span>demo<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">select</span> student<span class=\"token punctuation\">,</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>grade<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> sum<span class=\"token punctuation\">,</span><span class=\"token function\">avg</span><span class=\"token punctuation\">(</span>grade<span class=\"token punctuation\">)</span> avg <span class=\"token keyword\">from</span> grade <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> student<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">---------+------+---------+</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">|</span> student <span class=\"token operator\">|</span> sum  <span class=\"token operator\">|</span> avg     <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">---------+------+---------+</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">|</span> 小明    <span class=\"token operator\">|</span>  <span class=\"token number\">229</span> <span class=\"token operator\">|</span> <span class=\"token number\">76.3333</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">|</span> 小红    <span class=\"token operator\">|</span>  <span class=\"token number\">250</span> <span class=\"token operator\">|</span> <span class=\"token number\">83.3333</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">---------+------+---------+</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token number\">2</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.001</span> sec<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>group_concat(字段)</code>  函数还可以进一步显示每一个分组的字段值：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span>demo<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">select</span> student<span class=\"token punctuation\">,</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>grade<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> sum<span class=\"token punctuation\">,</span>group_concat<span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> subjects <span class=\"token keyword\">from</span> grade <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> student<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">---------+------+----------------------+</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">|</span> student <span class=\"token operator\">|</span> sum  <span class=\"token operator\">|</span> subjects              <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">---------+------+----------------------+</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">|</span> 小明    <span class=\"token operator\">|</span>  <span class=\"token number\">229</span> <span class=\"token operator\">|</span> 语文<span class=\"token punctuation\">,</span>数学<span class=\"token punctuation\">,</span>英语       <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">|</span> 小红    <span class=\"token operator\">|</span>  <span class=\"token number\">250</span> <span class=\"token operator\">|</span> 语文<span class=\"token punctuation\">,</span>数学<span class=\"token punctuation\">,</span>英语       <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">---------+------+----------------------+</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">2</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.001</span> sec<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>having</code>  关键字可以对分组后的结果进行过滤，和 <code>where</code>  的使用方式类似。不同的是， <code>having</code>  在分组后再进行过滤，而 <code>where</code>  是在分组前进行。</p>\n</li>\n</ol>\n<p><code>select</code>  中各关键字（或者说子句）的顺序如下：</p>\n<table>\n<thead>\n<tr>\n<th>子句</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>select</code></td>\n<td>要返回的字段</td>\n</tr>\n<tr>\n<td><code>from</code></td>\n<td>检索数据的表</td>\n</tr>\n<tr>\n<td><code>where</code></td>\n<td>行级过滤</td>\n</tr>\n<tr>\n<td><code>group by</code></td>\n<td>分组说明</td>\n</tr>\n<tr>\n<td><code>having</code></td>\n<td>组级过滤</td>\n</tr>\n<tr>\n<td><code>order by</code></td>\n<td>输出排序顺序</td>\n</tr>\n<tr>\n<td><code>limit</code></td>\n<td>检索的行数</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"多表查询\"><a class=\"markdownIt-Anchor\" href=\"#多表查询\">#</a> 多表查询</h3>\n<p>在关系型数据库中，表建立时各数据之间的关系不必确定，但多个表之间会存在相同意义的字段，这些字段就为这些表在无形之中建立了连接。</p>\n<h4 id=\"内连接查询\"><a class=\"markdownIt-Anchor\" href=\"#内连接查询\">#</a> 内连接查询</h4>\n<p>如果直接对两张表进行查询，即使他们有相同的字段，也会出现<em>笛卡尔乘积</em>形式的结果：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span>demo<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">,</span>grade<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">-----+--------+------+---------+---------+-------+</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">|</span> uid <span class=\"token operator\">|</span> uname  <span class=\"token operator\">|</span> uage <span class=\"token operator\">|</span> student <span class=\"token operator\">|</span> subject <span class=\"token operator\">|</span> grade <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">-----+--------+------+---------+---------+-------+</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">2</span> <span class=\"token operator\">|</span> 小红   <span class=\"token operator\">|</span>   <span class=\"token number\">20</span> <span class=\"token operator\">|</span> 小明    <span class=\"token operator\">|</span> 语文    <span class=\"token operator\">|</span>    <span class=\"token number\">72</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">1</span> <span class=\"token operator\">|</span> 小明   <span class=\"token operator\">|</span>   <span class=\"token number\">25</span> <span class=\"token operator\">|</span> 小明    <span class=\"token operator\">|</span> 语文    <span class=\"token operator\">|</span>    <span class=\"token number\">72</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">2</span> <span class=\"token operator\">|</span> 小红   <span class=\"token operator\">|</span>   <span class=\"token number\">20</span> <span class=\"token operator\">|</span> 小明    <span class=\"token operator\">|</span> 数学    <span class=\"token operator\">|</span>    <span class=\"token number\">90</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">1</span> <span class=\"token operator\">|</span> 小明   <span class=\"token operator\">|</span>   <span class=\"token number\">25</span> <span class=\"token operator\">|</span> 小明    <span class=\"token operator\">|</span> 数学    <span class=\"token operator\">|</span>    <span class=\"token number\">90</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">2</span> <span class=\"token operator\">|</span> 小红   <span class=\"token operator\">|</span>   <span class=\"token number\">20</span> <span class=\"token operator\">|</span> 小明    <span class=\"token operator\">|</span> 英语    <span class=\"token operator\">|</span>    <span class=\"token number\">67</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">1</span> <span class=\"token operator\">|</span> 小明   <span class=\"token operator\">|</span>   <span class=\"token number\">25</span> <span class=\"token operator\">|</span> 小明    <span class=\"token operator\">|</span> 英语    <span class=\"token operator\">|</span>    <span class=\"token number\">67</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">2</span> <span class=\"token operator\">|</span> 小红   <span class=\"token operator\">|</span>   <span class=\"token number\">20</span> <span class=\"token operator\">|</span> 小红    <span class=\"token operator\">|</span> 语文    <span class=\"token operator\">|</span>    <span class=\"token number\">75</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">1</span> <span class=\"token operator\">|</span> 小明   <span class=\"token operator\">|</span>   <span class=\"token number\">25</span> <span class=\"token operator\">|</span> 小红    <span class=\"token operator\">|</span> 语文    <span class=\"token operator\">|</span>    <span class=\"token number\">75</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">2</span> <span class=\"token operator\">|</span> 小红   <span class=\"token operator\">|</span>   <span class=\"token number\">20</span> <span class=\"token operator\">|</span> 小红    <span class=\"token operator\">|</span> 数学    <span class=\"token operator\">|</span>    <span class=\"token number\">87</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">1</span> <span class=\"token operator\">|</span> 小明   <span class=\"token operator\">|</span>   <span class=\"token number\">25</span> <span class=\"token operator\">|</span> 小红    <span class=\"token operator\">|</span> 数学    <span class=\"token operator\">|</span>    <span class=\"token number\">87</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">2</span> <span class=\"token operator\">|</span> 小红   <span class=\"token operator\">|</span>   <span class=\"token number\">20</span> <span class=\"token operator\">|</span> 小红    <span class=\"token operator\">|</span> 英语    <span class=\"token operator\">|</span>    <span class=\"token number\">88</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">1</span> <span class=\"token operator\">|</span> 小明   <span class=\"token operator\">|</span>   <span class=\"token number\">25</span> <span class=\"token operator\">|</span> 小红    <span class=\"token operator\">|</span> 英语    <span class=\"token operator\">|</span>    <span class=\"token number\">88</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">-----+--------+------+---------+---------+-------+</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">12</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.001</span> sec<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>为了得到符合期望的结果，就需要在两张表之间建立连接</p>\n<ol>\n<li>\n<p>隐式内连接<br>\n简单来讲就是使用 <code>where</code>  来过滤不符合条件的无用数据（消除笛卡尔积的无用数据）。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span>demo<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">select</span> uname<span class=\"token punctuation\">,</span>uage<span class=\"token punctuation\">,</span>subject<span class=\"token punctuation\">,</span>grade <span class=\"token keyword\">from</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">,</span>grade <span class=\"token keyword\">where</span> uname <span class=\"token operator\">=</span> student<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">--------+------+---------+-------+</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">|</span> uname  <span class=\"token operator\">|</span> uage <span class=\"token operator\">|</span> subject <span class=\"token operator\">|</span> grade <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">--------+------+---------+-------+</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">|</span> 小明   <span class=\"token operator\">|</span>   <span class=\"token number\">25</span> <span class=\"token operator\">|</span> 语文    <span class=\"token operator\">|</span>    <span class=\"token number\">72</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">|</span> 小明   <span class=\"token operator\">|</span>   <span class=\"token number\">25</span> <span class=\"token operator\">|</span> 数学    <span class=\"token operator\">|</span>    <span class=\"token number\">90</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">|</span> 小明   <span class=\"token operator\">|</span>   <span class=\"token number\">25</span> <span class=\"token operator\">|</span> 英语    <span class=\"token operator\">|</span>    <span class=\"token number\">67</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">|</span> 小红   <span class=\"token operator\">|</span>   <span class=\"token number\">20</span> <span class=\"token operator\">|</span> 语文    <span class=\"token operator\">|</span>    <span class=\"token number\">75</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">|</span> 小红   <span class=\"token operator\">|</span>   <span class=\"token number\">20</span> <span class=\"token operator\">|</span> 数学    <span class=\"token operator\">|</span>    <span class=\"token number\">87</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">|</span> 小红   <span class=\"token operator\">|</span>   <span class=\"token number\">20</span> <span class=\"token operator\">|</span> 英语    <span class=\"token operator\">|</span>    <span class=\"token number\">88</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">--------+------+---------+-------+</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">6</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.001</span> sec<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>显式内连接<br>\n显式的内连接语句是 <code>select 字段 from 表1 inner join 表2 on 条件</code> ，：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span>demo<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">select</span> uname<span class=\"token punctuation\">,</span>uage<span class=\"token punctuation\">,</span>subject<span class=\"token punctuation\">,</span>grade <span class=\"token keyword\">from</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">join</span> grade <span class=\"token keyword\">on</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">.</span>uname <span class=\"token operator\">=</span> grade<span class=\"token punctuation\">.</span>student<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">--------+------+---------+-------+</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">|</span> uname  <span class=\"token operator\">|</span> uage <span class=\"token operator\">|</span> subject <span class=\"token operator\">|</span> grade <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">--------+------+---------+-------+</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">|</span> 小明   <span class=\"token operator\">|</span>   <span class=\"token number\">25</span> <span class=\"token operator\">|</span> 语文    <span class=\"token operator\">|</span>    <span class=\"token number\">72</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">|</span> 小明   <span class=\"token operator\">|</span>   <span class=\"token number\">25</span> <span class=\"token operator\">|</span> 数学    <span class=\"token operator\">|</span>    <span class=\"token number\">90</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">|</span> 小明   <span class=\"token operator\">|</span>   <span class=\"token number\">25</span> <span class=\"token operator\">|</span> 英语    <span class=\"token operator\">|</span>    <span class=\"token number\">67</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">|</span> 小红   <span class=\"token operator\">|</span>   <span class=\"token number\">20</span> <span class=\"token operator\">|</span> 语文    <span class=\"token operator\">|</span>    <span class=\"token number\">75</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">|</span> 小红   <span class=\"token operator\">|</span>   <span class=\"token number\">20</span> <span class=\"token operator\">|</span> 数学    <span class=\"token operator\">|</span>    <span class=\"token number\">87</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">|</span> 小红   <span class=\"token operator\">|</span>   <span class=\"token number\">20</span> <span class=\"token operator\">|</span> 英语    <span class=\"token operator\">|</span>    <span class=\"token number\">88</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">--------+------+---------+-------+</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">6</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.001</span> sec<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>inner join</code>  中的 <code>inner</code>  可以省略。 <code>表名.字段</code> 意为完全限定表名，是为了区分两张表中字段名也相同的情况。</p>\n</li>\n<li>\n<p>自然连接<br>\n自然连接是一种特殊的等值连接，它要求两个关系表中进行连接的必须是相同的字段列，无需添加条件，自然连接会消除重复的属性列。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 上述示例中 grade 表使用的字段名为 student，所以先更改字段名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span>demo<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> grade <span class=\"token keyword\">rename</span> <span class=\"token keyword\">column</span> student <span class=\"token keyword\">to</span> uname<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Query OK<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token keyword\">rows</span> affected <span class=\"token punctuation\">(</span><span class=\"token number\">0.021</span> sec<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Records: <span class=\"token number\">0</span>  Duplicates: <span class=\"token number\">0</span>  <span class=\"token keyword\">Warnings</span>: <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span>demo<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">natural</span> <span class=\"token keyword\">join</span> grade<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">--------+-----+------+---------+-------+</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">|</span> uname  <span class=\"token operator\">|</span> uid <span class=\"token operator\">|</span> uage <span class=\"token operator\">|</span> subject <span class=\"token operator\">|</span> grade <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">--------+-----+------+---------+-------+</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">|</span> 小明   <span class=\"token operator\">|</span>   <span class=\"token number\">1</span> <span class=\"token operator\">|</span>   <span class=\"token number\">25</span> <span class=\"token operator\">|</span> 语文    <span class=\"token operator\">|</span>    <span class=\"token number\">72</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">|</span> 小明   <span class=\"token operator\">|</span>   <span class=\"token number\">1</span> <span class=\"token operator\">|</span>   <span class=\"token number\">25</span> <span class=\"token operator\">|</span> 数学    <span class=\"token operator\">|</span>    <span class=\"token number\">90</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">|</span> 小明   <span class=\"token operator\">|</span>   <span class=\"token number\">1</span> <span class=\"token operator\">|</span>   <span class=\"token number\">25</span> <span class=\"token operator\">|</span> 英语    <span class=\"token operator\">|</span>    <span class=\"token number\">67</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">|</span> 小红   <span class=\"token operator\">|</span>   <span class=\"token number\">2</span> <span class=\"token operator\">|</span>   <span class=\"token number\">20</span> <span class=\"token operator\">|</span> 语文    <span class=\"token operator\">|</span>    <span class=\"token number\">75</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">|</span> 小红   <span class=\"token operator\">|</span>   <span class=\"token number\">2</span> <span class=\"token operator\">|</span>   <span class=\"token number\">20</span> <span class=\"token operator\">|</span> 数学    <span class=\"token operator\">|</span>    <span class=\"token number\">87</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">|</span> 小红   <span class=\"token operator\">|</span>   <span class=\"token number\">2</span> <span class=\"token operator\">|</span>   <span class=\"token number\">20</span> <span class=\"token operator\">|</span> 英语    <span class=\"token operator\">|</span>    <span class=\"token number\">88</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">--------+-----+------+---------+-------+</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">6</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.001</span> sec<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"外连接查询\"><a class=\"markdownIt-Anchor\" href=\"#外连接查询\">#</a> 外连接查询</h4>\n<p>内连接查询，返回的结果仅包含符合查询条件和连接条件的行。<br>\n外连接查询，返回的结果不仅包含符合连接查询条件的行，还包括不符合的部分：</p>\n<ul>\n<li>\n<p><code>left outer join</code> ：左外连接， <code>outer</code>  可省略</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> 字段 <span class=\"token keyword\">from</span> 表<span class=\"token number\">1</span> <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> 表<span class=\"token number\">2</span> <span class=\"token keyword\">on</span> 条件<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>左外连接方式，左表的记录会完全表示出来，而右表中只会表示出符合查询条件的结果，右表记录不足的地方均为 <code>null</code></p>\n</li>\n<li>\n<p><code>right outer join</code> ：右外连接， <code>outer</code>  可省略</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> 字段 <span class=\"token keyword\">from</span> 表<span class=\"token number\">1</span> <span class=\"token keyword\">right</span> <span class=\"token keyword\">join</span> 表<span class=\"token number\">2</span> <span class=\"token keyword\">on</span> 条件<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>右外连接方式，右表的记录会完全表示出来，而左表中只会表示出符合查询条件的结果，左表记录不足的地方均为 <code>null</code></p>\n</li>\n<li>\n<p><code>union</code> ：联合查询，实现全外连接<br>\n MySQL 中不支持全外连接，可以使用 <code>union</code>  联合查询实现。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>查询语句<span class=\"token number\">1</span> <span class=\"token keyword\">union</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">all</span><span class=\"token punctuation\">]</span> 查询语句<span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>union</code>  可以将多条 <code>select</code>  语句的结果组合成单个结果集，合并时要求两个表对应的字段数和字段数据类型必须相同。如果加上 <code>all</code> ，那么执行的时候不会删除多条记录中的重复项，也不会执行自动排序。<br>\n将左外连接和右外连接的结果进行联合，就可以得到全外连接的结果：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> 字段 <span class=\"token keyword\">from</span> 表<span class=\"token number\">1</span> <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> 表<span class=\"token number\">2</span> <span class=\"token keyword\">on</span> 条件</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">union</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">select</span> 字段 <span class=\"token keyword\">from</span> 表<span class=\"token number\">1</span> <span class=\"token keyword\">right</span> <span class=\"token keyword\">join</span> 表<span class=\"token number\">2</span> <span class=\"token keyword\">on</span> 条件<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"子查询\"><a class=\"markdownIt-Anchor\" href=\"#子查询\">#</a> 子查询</h3>\n<p>子查询指一个查询语句嵌套在另一个查询语句内部的查询，这个特性从 MySQL4.1 开始引入。<br>\n <code>select</code>  中会先计算子查询，再把子查询结果作为外层查询的过滤条件，子查询可以基于一个表或者多个表。</p>\n<h4 id=\"使用子查询\"><a class=\"markdownIt-Anchor\" href=\"#使用子查询\">#</a> 使用子查询</h4>\n<p>子查询结果常结合一些关键字使用，达到数据过滤的目的，使用格式如下：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> 字段 <span class=\"token keyword\">from</span> 表名 <span class=\"token keyword\">where</span> 字段 关键字 <span class=\"token punctuation\">(</span>子查询语句<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>常见关键字有：</p>\n<ul>\n<li><code>any</code> / <code>some</code> ：表示满足其中任一条件，要求子查询语句只返回一个数据列。它们接在比较操作符的后面，表示与子查询返回的任何值比较为 <code>true</code> ，则返回 <code>true</code> 。</li>\n<li><code>all</code> ：表示满足所有条件，要求子查询语句只返回一个数据列。 <code>all</code>  关键字接在比较操作符的后面，表示与子查询返回的所有值比较为 <code>true</code> ，则返回 <code>true</code> 。</li>\n<li><code>exists/no exists</code> ：后接任意子查询。如果后面的子查询返回至少一行， <code>exists</code>  结果为 <code>true</code> ，此时外层查询继续；如果后面的子查询没有返回任何行， <code>exists</code>  结果为 <code>false</code> ，外层语句不执行查询。 <code>no exists</code>  和 <code>exists</code>  返回值结果相反。</li>\n<li><code>in/not in</code> ：要求子查询语句只返回一个数据列，这个数据列里的值提供给外层查询语句进行比较操作。 <code>not in</code>  的作用与 <code>in</code>  正好相反，是将不在数据列中的值提供给外层。</li>\n</ul>\n<h4 id=\"子查询伪表\"><a class=\"markdownIt-Anchor\" href=\"#子查询伪表\">#</a> 子查询伪表</h4>\n<p>因为子查询的结果也是一张伪表，所以也可以将子查询视作一张数据表，从这张表上再继续查询：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> 字段 <span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span>子查询语句<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>g<br>\n 通过子查询能够编写出功能强大且使用灵活的 SQL 语句。能嵌套的子查询数目并没有限制，但在实际使用中出于性能考虑，通常不会嵌套太多的子查询。</p>\n<h3 id=\"数据处理函数\"><a class=\"markdownIt-Anchor\" href=\"#数据处理函数\">#</a> 数据处理函数</h3>\n<p>SQL 语句支持使用函数来处理数据，这些处理函数往往是作用于某一字段列。大多数 SQL 实现都支持字符串函数、数值函数、日期函数和其他数据库相关信息函数。</p>\n<h4 id=\"字符串函数\"><a class=\"markdownIt-Anchor\" href=\"#字符串函数\">#</a> 字符串函数</h4>\n<p>字符串函数用来处理数据库中的字符串数据，常用的字符串函数如下：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>char_length()</code></td>\n<td>返回字符串长度，长度以字符记</td>\n</tr>\n<tr>\n<td><code>length()</code></td>\n<td>返回字符串长度，长度以字节记</td>\n</tr>\n<tr>\n<td><code>concat(s1,s2,...)</code></td>\n<td>合并字符串，如果字符串中有 <code>NULL</code> ，最终结果为 <code>NULL</code></td>\n</tr>\n<tr>\n<td><code>concat_ws(x,s1,s2,...)</code></td>\n<td>合并字符串，每个字符串间使用 <code>x</code>  分隔符分开</td>\n</tr>\n<tr>\n<td><code>insert(s1,x,len,s2)</code></td>\n<td>从 <code>s1</code>  的 <code>x</code>  索引开始，替换长 <code>len</code>  的部分并插入 <code>s2</code></td>\n</tr>\n<tr>\n<td><code>upper(str)/lower(str)</code></td>\n<td>将字符串转为大写 / 小写</td>\n</tr>\n<tr>\n<td><code>left(str,n)/right(str,n)</code></td>\n<td>从左边或右边开始，获取指定长度为 <code>n</code>  的字符串</td>\n</tr>\n<tr>\n<td><code>ltrim()/rtrim()/trim()</code></td>\n<td>删除字符串左边 / 右边 / 左右两边的空格</td>\n</tr>\n<tr>\n<td><code>trim(sub from str)</code></td>\n<td>删除字符串 <code>str</code>  两端的所有子串 <code>sub</code></td>\n</tr>\n<tr>\n<td><code>repeat(s,n)</code></td>\n<td><code>n</code>  次重复字符串 <code>s</code>  生成新串</td>\n</tr>\n<tr>\n<td><code>replace(str,s1,s2)</code></td>\n<td>替换字符串，将 <code>str</code>  中的所有 <code>s1</code>  替换为 <code>s2</code></td>\n</tr>\n<tr>\n<td><code>substring(str,pos,len)</code></td>\n<td>获取子串，从 <code>pos</code>  开始，获取长度为 <code>len</code>  的子串</td>\n</tr>\n<tr>\n<td><code>locate/position/instr/(str,sub)</code></td>\n<td>匹配子串 <code>sub</code>  在 <code>str</code>  中的开始位置</td>\n</tr>\n<tr>\n<td><code>reverse(s)</code></td>\n<td>翻转字符串</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"数学函数\"><a class=\"markdownIt-Anchor\" href=\"#数学函数\">#</a> 数学函数</h4>\n<p>数学函数主要用来处理数值数据和数学相关的计算等，常用数值函数如下：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>abs(x)</code></td>\n<td>返回 <code>x</code>  的绝对值</td>\n</tr>\n<tr>\n<td><code>sqrt(x)</code></td>\n<td>返回 <code>x</code>  的算术平方根</td>\n</tr>\n<tr>\n<td><code>mod(x,y)</code></td>\n<td>返回 <code>x</code>  对 <code>y</code>  取模的结果</td>\n</tr>\n<tr>\n<td><code>ceil(x)</code></td>\n<td>返回 <code>x</code>  向上取整结果</td>\n</tr>\n<tr>\n<td><code>floor(x)</code></td>\n<td>返回 <code>x</code>  向下取整结果</td>\n</tr>\n<tr>\n<td><code>round(x</code></td>\n<td>返回离 <code>x</code>  最近的整数</td>\n</tr>\n<tr>\n<td><code>round(x,y)</code></td>\n<td>保留 <code>x</code>  的 <code>y</code>  位小数，四舍五入</td>\n</tr>\n<tr>\n<td><code>truncate(x,y)</code></td>\n<td>保留 <code>x</code>  的 <code>y</code>  位小数，直接舍去</td>\n</tr>\n<tr>\n<td><code>pow(x,y)</code></td>\n<td>返回 <code>x</code>  的 <code>y</code>  次方计算结果</td>\n</tr>\n<tr>\n<td><code>rand()</code></td>\n<td>返回 0-1 之间一个随机数</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"日期函数\"><a class=\"markdownIt-Anchor\" href=\"#日期函数\">#</a> 日期函数</h4>\n<p>日期函数主要用来处理日期和时间值，除了 <code>date</code>  类型的参数，也可以使用 <code>datetime</code>  或 <code>timestamp</code>  类型的参数。</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>curdate()/current_date()</code></td>\n<td>返回系统当前日期</td>\n</tr>\n<tr>\n<td><code>curtime()/current_time()</code></td>\n<td>返回系统当前时间</td>\n</tr>\n<tr>\n<td><code>now()/localtime()/sysdate()/current_timestamp()</code></td>\n<td>返回系统当前日期和时间</td>\n</tr>\n<tr>\n<td><code>adddate(date,interval expr type)</code></td>\n<td>增加一个日期值</td>\n</tr>\n<tr>\n<td><code>addtime(date,expr)</code></td>\n<td>增加一个时间值</td>\n</tr>\n<tr>\n<td><code>extract(type from date)</code></td>\n<td>从日期中提取日期时间值</td>\n</tr>\n<tr>\n<td><code>datediff(date1,date2)/timediff(time1,time2)</code></td>\n<td>返回两个时间参数的间隔</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"其他函数\"><a class=\"markdownIt-Anchor\" href=\"#其他函数\">#</a> 其他函数</h4>\n<p>MySQL 中也可以使用条件判断函数：</p>\n<ul>\n<li><code>if(expr,value1,value2)</code> : 如果表达式的结构为 <code>true</code> ，则返回 <code>value1</code> ，否则返回 <code>value2</code> ；</li>\n<li><code>ifnull(value1,value2)</code> ：如果 <code>value1</code>  不为 <code>NULL</code> ，则返回 <code>value1</code> ，否则返回 <code>value2</code> ；</li>\n<li><code>case when expr1 then r1 ... [else rn+1] end</code> ：当某个 <code>when</code>  后表达式结果为真，返回 <code>then</code>  后对应的结果，否则返回 <code>else</code>  后的结果，类似编程语言中的 <code>if-else</code>  语句；</li>\n<li><code>case expr when v1 then r1 ... [else rn+1] end</code> ：当某个 <code>when</code>  后的值与表达式结果相等时，返回 <code>then</code>  后对应的结果，否则返回 <code>else</code>  后的结果，类似编程语言中的 <code>switch-case</code>  语句。</li>\n</ul>\n<p>MySQL 中还包括了一些获取系统信息的函数：</p>\n<ul>\n<li><code>version()</code> ：查看当前 MySQL 的版本号；</li>\n<li><code>connection_id()</code> ：查看当前用户的连接数，每个连接都有各自唯一的 ID；</li>\n<li><code>show processlist</code> ：root 用户可以查看所有用户的连接，普通用户只显示自己占用的连接；</li>\n<li><code>user()/current_user()/system_user()/session_user()</code> ：这几个函数都返回当前用户名 @主机名</li>\n<li><code>charset(str)</code> ：返回 <code>str</code>  字符串使用的字符集，可以通过结果判断当前使用的字符集</li>\n</ul>\n<h2 id=\"数据库管理\"><a class=\"markdownIt-Anchor\" href=\"#数据库管理\">#</a> 数据库管理</h2>\n<h3 id=\"设计范式\"><a class=\"markdownIt-Anchor\" href=\"#设计范式\">#</a> 设计范式</h3>\n<p>好的数据库设计对数据的存储性能和后期的程序开发，都会产生重要的影响。<br>\n为了建立冗余较少，结构合理的数据库，提高数据存储和使用的性能，需要遵循一些规范来优化数据的设计和存储，这些规范被称为<em>范式</em>。<br>\n常用的三大范式如下：</p>\n<ol>\n<li>1NF<br>\n 第一范式，<strong>确保每列保持原子性</strong>。<br>\n简单来说就是，表中的数据应该是不可再拆分的。</li>\n<li>2NF 确保表中每列都和主键相关。<br>\n第二范式，<strong>确保表中的每行都能唯一区分</strong>。<br>\n简单来说就是，一张表应该只做一件。</li>\n<li>3NF<br>\n 第三范式，<strong>非主键字段不能相互依赖</strong>。<br>\n通过主键可以获得所有非主键字段，但非主键字段不能获得其他非主键字段。</li>\n</ol>\n<h3 id=\"账户管理\"><a class=\"markdownIt-Anchor\" href=\"#账户管理\">#</a> 账户管理</h3>\n<p>root 账户拥有很高的权限，实际使用中并不会直接使用 root 账户，而是为不同的用户创建不同的账户，并为他们分配相应的权限，用户只能执行被分配权限的命令。</p>\n<ol>\n<li>\n<p>新建账户<br>\n MySQL 中使用如下语句新建用户：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">user</span> <span class=\"token string\">'用户名'</span><span class=\"token variable\">@'主机名'</span> identified <span class=\"token keyword\">by</span> <span class=\"token string\">'密码'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>用户名</code> 指定新账户的名称， <code>主机名</code> 指定可以登陆的主机 IP, 指定为 <code>%</code>  则所有主机都可以登陆，指定为 <code>localhost</code>  则只能本机登陆， <code>密码</code> 指定用户登陆的密码，为空表示空密码。<br>\n这条语句会添加一个新的 MySQL 账户，新的用户记录信息会出现在 MySQL.user 表中。如果账户中已经存在同名用户，则语句执行会报错。 <code>select user from mysql.user</code>  语句可以查询已经存在的用户。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MySQL <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>none<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">select</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">from</span> mysql<span class=\"token punctuation\">.</span><span class=\"token keyword\">user</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">------------------+</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">|</span> <span class=\"token keyword\">user</span>             <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">------------------+</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">|</span> root             <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">|</span> demo             <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">|</span> mysql<span class=\"token punctuation\">.</span>infoschema <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">|</span> mysql<span class=\"token punctuation\">.</span><span class=\"token keyword\">session</span>    <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">|</span> mysql<span class=\"token punctuation\">.</span>sys        <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">------------------+</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">5</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.001</span> sec<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>新创建的用户没有任何权限，需要赋权后才可以使用。</p>\n</li>\n<li>\n<p>权限赋予<br>\n MySQL 中通过以下语句给用户赋予权限：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">grant</span> 权限<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>权限<span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">on</span> 数据库名<span class=\"token punctuation\">.</span>数据表名 <span class=\"token keyword\">to</span> <span class=\"token string\">'用户名'</span><span class=\"token variable\">@'主机名'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>权限中指定授予用户的权限，如 <code>select</code> 、 <code>update</code> 、 <code>insert</code>  等， <code>grant all</code>  可以授予所有的权限， <code>数据库名.*</code>  指定整个数据库， <code>数据库名.数据表名</code> 指定数据库中某张表。</p>\n<p>如果要查看用户权限，可以使用以下命令：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">show</span> grants <span class=\"token keyword\">for</span> <span class=\"token string\">'用户名'</span><span class=\"token variable\">@'主机名'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>与授权操作相反的收回权限语句如下，同样的 <code>revoke all</code>  可以收回所有授予的权限：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">revoke</span> 权限<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>权限<span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">on</span> 数据库名<span class=\"token punctuation\">.</span>数据表名 <span class=\"token keyword\">from</span> <span class=\"token string\">'用户名'</span><span class=\"token variable\">@'主机名'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>更改和删除账户<br>\n root 用户可以修改其他用户的账户名和密码：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 更改用户名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">rename</span> <span class=\"token keyword\">user</span> <span class=\"token string\">'旧用户名'</span><span class=\"token variable\">@'主机名'</span> <span class=\"token keyword\">to</span> <span class=\"token string\">'新用户名'</span><span class=\"token variable\">@'主机名'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 更改用户密码</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">set</span> password <span class=\"token keyword\">for</span> <span class=\"token string\">'用户名'</span><span class=\"token variable\">@'主机名'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'新密码'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>更改 root 用户的密码需要在未登陆 MySQL 的情况下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysqladmin <span class=\"token parameter variable\">-u</span> root <span class=\"token parameter variable\">-p</span> password 新密码</pre></td></tr></table></figure><p>使用 <code>alter</code>  语句也可以更改普通用户和 root 用户的密码：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">user</span> <span class=\"token string\">'用户名'</span><span class=\"token variable\">@'主机名'</span> identified <span class=\"token keyword\">by</span> <span class=\"token string\">'密码'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果要删除账户，使用 <code>drop</code>  语句：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">drop</span> <span class=\"token keyword\">user</span> <span class=\"token string\">'用户名'</span><span class=\"token variable\">@'主机名'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"事务处理\"><a class=\"markdownIt-Anchor\" href=\"#事务处理\">#</a> 事务处理</h3>\n<p>事务（transaction）是指一组相关联 sql 语句，这组 sql 语句要么全部执行成功，要么全部执行失败，通过事务处理可以用来维护数据库的完整性。</p>\n<h4 id=\"事务的条件\"><a class=\"markdownIt-Anchor\" href=\"#事务的条件\">#</a> 事务的条件</h4>\n<p>事务必须满足 4 个条件（ACID）：</p>\n<ol>\n<li>原子性（Atomicity）<br>\n一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</li>\n<li>一致性（Consistency）<br>\n在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</li>\n<li>隔离性（Isolation）<br>\n数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</li>\n<li>持久性（Durability）<br>\n事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</li>\n</ol>\n<h4 id=\"隔离级别\"><a class=\"markdownIt-Anchor\" href=\"#隔离级别\">#</a> 隔离级别</h4>\n<p>事务处理可以并发进行，这大大增加了数据库资源的利用率，提高了数据库系统的事务吞吐量，但并发事务也存在一些问题，主要包括：</p>\n<ol>\n<li>更新丢失（Lost Update）<br>\n更新丢失发生在两个事务同时对数据进行更新的场景：<br>\n有可能是第一个事务因为某种原因回滚了，把第二个事务已经提交的数据给覆盖了，这种情况被称为第一类更新丢失；<br>\n也有可能第一个事务已经提交了更新数据，但是第二个事务更新数据又把第一个事务的数据给覆盖了，这种情况被称为第二类更新丢失。</li>\n<li>脏读（Dirty Reads）<br>\n一个事务在处理过程中读取了另外一个事务已更新但未提交的数据。</li>\n<li>不可重复读（Non-Repeatable Reads）<br>\n一个事务范围内，多次读取数据，读取到的结果集内容不一致。原因是两次读取间，另一个事务已经更新了数据，第二次读取时读取到另一个事务更新的数据，导致两次结果内容前后不一致。</li>\n<li>幻读（Phantom Reads）<br>\n一个事务范围内，多次读取数据，读取到的结果集数量不一致。原因是两次读取间，另一个事务新增了数据，第二次读取时读取到另一个事务新增的数据，导致二次读取时出现了新的数据。</li>\n</ol>\n<p>数据库规范规定了 4 种隔离级别，用于描述两个事务并发的所有情况：</p>\n<ol>\n<li>读未提交（Read uncommitted）<br>\n读未提交是最低的隔离级别，所有的事务都可以看到其他未提交的事务的执行结果。只能防止第一类更新丢失，不能解决脏读，可重复读，幻读，很少应用于实际项目。</li>\n<li>读已提交（Read committed）<br>\n该隔离级别下，只有在一个事务的更新操作结果提交之后，另一个事务才可能读取到同一数据更新后的结果。可以防止脏读和第一类更新丢失，但是不能解决可重复读和幻读的问题。</li>\n<li>可重复读（Repeatable read）<br>\n该隔离级别<strong>是 MySQL 默认的隔离级别</strong>。该隔离级别下，一个事务多次读同一个数据，在这个事务还没结束时，其他事务不能访问该数据 (包括了读写)。可以防止脏读、不可重复读、第一类更新丢失、第二类更新丢失的问题，不过还是会出现幻读。</li>\n<li>串行化（Serializable）<br>\n最高的隔离级别。它要求事务序列化执行，事务只能一个接着一个地执行，不能并发执行。在这个级别，可以解决所有并发问题，但可能导致大量的超时现象和锁竞争，通常不会使用。</li>\n</ol>\n<h4 id=\"使用事务\"><a class=\"markdownIt-Anchor\" href=\"#使用事务\">#</a> 使用事务</h4>\n<p>MySQL 支持多种数据引擎，但是并非所有引擎都支持事务处理，如最常见的 MyISAM 和 InnoDB，只有 InnoDB 是支持行级事务处理的。<br>\n <code>show engines</code>  命令可以查看 MySQL 所有支持的引擎， <code>show variables like '%storage_engine%'</code>  语句可以查看当前默认的存储引擎。在 MySQL8 中，默认引擎是 InnoDB。<br>\n虽然 InnoDB 支持事务处理，但是在默认情况下，所有语句都是自动提交的。要进行事务处理，需要显式开启事务，事务的流程控制语句如下：</p>\n<ul>\n<li><code>begin/start transaction</code> ：显式地开启一个事务</li>\n<li><code>commit/commit work</code> ：提交事务，会结束事务并将已进行的更改永久性写入数据库</li>\n<li><code>rollback/rollback work</code> ：回滚事务，会结束事务并撤销所有未提交的修改</li>\n<li><code>savepoint identifier</code> ：这个命令允许在事务中创建一个保存点，一个事务可以有多个保存点</li>\n<li><code>release savepoint identifier</code> ：删除一个事务的保存点，当没有指定的保存点时会报错</li>\n<li><code>rollback to identifier</code> ：将事务回滚到指定的保存点</li>\n</ul>\n<p>MySQL 还可以使用 <code>set autocommit = 0</code>  来更改本次会话的默认提交行为，禁止自动提交。 <code>set transaction</code>  语句可以设置事务的隔离级别，InnoDB 引擎支持包括串行化在内的所有四种隔离级别。</p>\n<h3 id=\"备份与恢复\"><a class=\"markdownIt-Anchor\" href=\"#备份与恢复\">#</a> 备份与恢复</h3>\n<p>数据库备份可以在数据因意外损坏或丢失的情况下，及时有效得从备份中进行恢复，减少数据丢失带来的损失。</p>\n<p>MySQL 提供了一个 <code>mysqldump</code>  工具用于数据的备份，命令语法如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysqldump <span class=\"token parameter variable\">-u</span> user <span class=\"token parameter variable\">-ppassword</span> 数据库<span class=\"token punctuation\">[</span>数据表1,数据表2,<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> filename.sql</pre></td></tr></table></figure><p>数据库后的数据表列表是可选的，表示备份该数据库中的指定数据表，当没有填写的时候，会备份整个数据库。</p>\n<p>如果需要备份多个数据库，需要使用以下命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysqldump <span class=\"token parameter variable\">-u</span> user <span class=\"token parameter variable\">-ppassword</span> <span class=\"token parameter variable\">--databasebases</span> <span class=\"token punctuation\">[</span>数据库1,数据库2,<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> filename.sql</pre></td></tr></table></figure><p>或者，使用 <code>--all-databases</code> ，可以备份所有数据库。</p>\n<p>备份操作成功后，会在指定的路径下生成 sql 文件，通过导入 sql 脚本文件的方式，可以快速恢复之前的数据。从备份文件中恢复的命令如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysql <span class=\"token parameter variable\">-u</span> user <span class=\"token parameter variable\">-ppassword</span> 数据库名 <span class=\"token operator\">&lt;</span> filename.sql</pre></td></tr></table></figure><p>导入时需要指定导入的数据库名，如果 sql 文件中没有创建数据库的语句，还需要保证已存在预导入的数据库，否则会报错。<br>\n另外，在已经登陆 MySQL 的情况下，还可以使用 <code>source filename.sql</code>  的方式来进行数据库的恢复。</p>\n",
            "tags": [
                "编程学习",
                "入门笔记",
                "学习笔记",
                "MySQL"
            ]
        },
        {
            "id": "https://www.umi.homes/posts/3132/",
            "url": "https://www.umi.homes/posts/3132/",
            "title": "反射和其他",
            "date_published": "2023-05-09T16:00:00.000Z",
            "content_html": "<h2 id=\"反射\"><a class=\"markdownIt-Anchor\" href=\"#反射\">#</a> 反射</h2>\n<h3 id=\"概述\"><a class=\"markdownIt-Anchor\" href=\"#概述\">#</a> 概述</h3>\n<p>反射（Reflection）是 Java 的语言特征之一。反射机制允许程序在运行期间取得任何类的内部信息，并直接操作任意对象的内部属性和方法。</p>\n<ul>\n<li>\n<p>反射主要应用于：</p>\n<ol>\n<li>开发通用框架：通用框架中可以通过反射在运行时动态按需加载对象。</li>\n<li>动态代理：切面编程（AOP）中，可以通过动态代理的方式拦截特定方法。</li>\n<li>注解：注解可以结合反射机制来执行行为。</li>\n<li>可扩展性功能：通过使用完全限定名称创建可扩展实例来使用外部的用户定义类。</li>\n</ol>\n</li>\n<li>\n<p>反射的优缺点：</p>\n<ul>\n<li>优点：提高了 Java 程序的灵活性与扩展性，提高了程序的适应能力，降低了代码的耦合性。</li>\n<li>缺点：反射的性能开销降低了程序的性能，同时也破坏了程序的封装性，曝光了内部的私有字段。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"反射机制\"><a class=\"markdownIt-Anchor\" href=\"#反射机制\">#</a> 反射机制</h3>\n<p>Java 程序加载完类之后，在堆内存的方法区中就产生了一个 <code>Class</code>  类型的对象，<strong>一个类只有一个 <code>Class</code>  对象</strong>。这个 <code>Class</code>  对象包含了完整的类的结构的信息，因此就可以通过这个对象分析取得类的结构。</p>\n<h4 id=\"类加载过程\"><a class=\"markdownIt-Anchor\" href=\"#类加载过程\">#</a> 类加载过程</h4>\n<p>类在内存中的完整生命周期分为：加载、使用、卸载，其中加载过程又分为装载、链接和初始化三个阶段：<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/computerscience/java-note/classloading01.4h391cpez340.webp\" alt=\"类加载过程\"></p>\n<p>当程序使用某个类的时候，如果该类还没有被加载到内存中，系统会通过加载、链接和初始化三个步骤来对该类进行初始化。这个三个步骤一般是 JVM 进行的，一般也讲这三个步骤称为类加载：</p>\n<ol>\n<li>装载（Loading）<br>\n将类的 <code>.class</code>  文件读入内存，并为之创建一个 <code>Class</code>  对象，此过程由类加载器完成。</li>\n<li>链接（Linking）\n<ul>\n<li>验证（Verification）<br>\n确保加载的类的信息符合 JVM 规范。</li>\n<li>准备（Preparation）<br>\n正式为类变量分配内存并设置初始值。</li>\n<li>解析（Resolution）<br>\n虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）。</li>\n</ul>\n</li>\n<li>初始化（Initialization）<br>\n执行类构造器 <code>&lt;clinit&gt;()</code>  方法，如果初始化时发现父类还没有初始化会先执行父类的初始化。JVM 会保证一个类的 <code>&lt;clinit&gt;()</code>  方法在多线程中正确加锁和同步。</li>\n</ol>\n<h4 id=\"类加载器\"><a class=\"markdownIt-Anchor\" href=\"#类加载器\">#</a> 类加载器</h4>\n<p><img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/computerscience/java-note/classloading02.otv1z21oaz.webp\" alt=\"类的加载\"><br>\n类加载器负责将 <code>.class</code>  文件，即字节码文件的内容读取到内存中。<br>\nJVM 支持两种类型的类加载器，包括引导类加载器（Bootstrap ClassLoader）和自定义类加载器（User-Defined ClassLoader）。常见的类加载器的结构如下：<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/computerscience/java-note/classloading03.21e76s55dk5c.webp\" alt=\"类加载器\"><br>\n除了启动类加载器，其他几种类加载器都是 <code>ClassLoader</code>  的子类。</p>\n<ul>\n<li>启动类加载器\n<ul>\n<li>由 C/C++ 语言实现，嵌套在 JVM 的内部，尝试获取这个类加载器时会返回 <code>null</code> ；</li>\n<li>用于加载 Java 的核心库，提供 JVM 自身需要的类，并且出于安全考虑，只加载包名为 <code>java</code> 、 <code>javax</code> 、 <code>sun</code>  等开头的类；</li>\n<li>不继承自 <code>ClassLoader</code> ，没有父类。加载扩展类加载器和应用程序类加载器，并指定为他们的父类加载器。</li>\n</ul>\n</li>\n<li>扩展类加载器\n<ul>\n<li>Java 语言编写，由 <code>sun.misc.Launcher$ExtClassLoader</code>  实现；</li>\n<li>从 <code>java.ext.dirs</code>  系统属性指定的目录中加载类库，或从 JDK 安装目录的 <code>jre/lib/ext</code>  子目录下加载类库；</li>\n<li>继承自 <code>ClassLoader</code> ，从关系上讲，父加载器为启动类加载器。</li>\n</ul>\n</li>\n<li>应用程序类加载器\n<ul>\n<li>Java 语言编写，由 <code>sun.misc.Launcher$AppClassLoader</code>  实现；</li>\n<li>负责加载环境变量 <code>ClassPath</code>  或系统属性 <code>java.class.path</code>  指定路径下的类库；</li>\n<li>继承自 <code>ClassLoader</code> ，从关系上将，父加载器为扩展类加载器。同时它也是用户自定义类加载器的父加载器；</li>\n<li>通过 <code>ClassLoader</code>  的 <code>getSystemClassLoader()</code>  方法可以取得该类加载器。</li>\n</ul>\n</li>\n<li>用户自定义类加载器\n<ul>\n<li>通常的开发中，类的加载由上述 3 种类加载器相互配合执行，但是在必要时也可以由开发者通过自定义类加载器，来定制类的加载方式；</li>\n<li>自定义加载器通常需要继承 <code>ClassLoader</code> ，通过自定义加载器能够实现应用隔离等其他功能。</li>\n</ul>\n</li>\n</ul>\n<p>这些类加载器间，通过双亲委派和类缓存等机制，确保了类在内存中的唯一性，为反射提供了基础。</p>\n<h4 id=\"class-对象\"><a class=\"markdownIt-Anchor\" href=\"#class-对象\">#</a> Class 对象</h4>\n<p>反射的关键是获取类的 <code>Class</code>  对象。通过类加载机制，保证了类在内存中的唯一性，因此不论生成多少个对象，它们都对应同一个 <code>Class</code>  对象。 <code>Class</code>  对象由 JVM 生成，它提供了访问整个类结构的接口，可被视为所有反射 API 的入口。<br>\nJava 的 <code>Object</code>  类提供了一个 <code>getClass()</code>  方法，该方法返回一个 <code>Class</code>  对象。每个类的实例都记得自己是由哪个 <code>Class</code>  生成的，而每个 <code>Class</code>  对应一个在 JVM 中加载的 <code>.class</code>  文件。因此通过这个 <code>Class</code>  对象，就可以完整地访问类中加载的结构和信息。</p>\n<p>获取 <code>Class</code>  对象的方法：</p>\n<ul>\n<li><code>类名.class</code> ：编译期间已知类型，可以通过 <code>类.class</code>  获取，此方法最安全可靠，性能最高。</li>\n<li><code>对象.getClass()</code> ：已知某个类的实例，可以通过 <code>对象.getClass()</code>  方法获取。</li>\n<li><code>Class.forName()</code> ：已知某个类的全类名，且该类在类路径下，可以通过静态方法 <code>Class.forName()</code>  获取。</li>\n<li>通过类加载器获取：可以用系统类加载对象加载指定路径下的类型。</li>\n</ul>\n<p>这四种方法的使用示例如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Class</span> c1 <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Class</span> c2 <span class=\"token operator\">=</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Class</span> c3 <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.String\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Class</span> c4 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.String\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"反射的应用\"><a class=\"markdownIt-Anchor\" href=\"#反射的应用\">#</a> 反射的应用</h3>\n<p>获取到 <code>Class</code>  对象后，就可以通过 <code>Class</code>  对象的方法来获取类的属性和方法：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>getPackage()</code></td>\n<td>获得该类的存放路径</td>\n</tr>\n<tr>\n<td><code>getName()</code></td>\n<td>获得该类的名称</td>\n</tr>\n<tr>\n<td><code>getSuperclass()</code></td>\n<td>获得该类的父类</td>\n</tr>\n<tr>\n<td><code>getInterfaces()</code></td>\n<td>获得该类实现的所有接口</td>\n</tr>\n<tr>\n<td><code>getConstructors()</code></td>\n<td>获得该类所有 <code>public</code>  的构造方法</td>\n</tr>\n<tr>\n<td><code>getConstructor(Class&lt;?&gt;...parameterTypes)</code></td>\n<td>获得该类指定的 <code>public</code>  的构造方法</td>\n</tr>\n<tr>\n<td><code>getDeclaredConstructors()</code></td>\n<td>获得该类所有的构造方法</td>\n</tr>\n<tr>\n<td><code>getDeclaredConstructor(Class&lt;?&gt;...parameterTypes)</code></td>\n<td>获得该类指定的构造方法</td>\n</tr>\n<tr>\n<td><code>getMethods()</code></td>\n<td>获得该类所有 <code>public</code>  的成员方法</td>\n</tr>\n<tr>\n<td><code>getMethod(String name, Class&lt;?&gt;...parameterTypes)</code></td>\n<td>获得该类指定的 <code>public</code>  的成员方法</td>\n</tr>\n<tr>\n<td><code>getDeclaredMethods()</code></td>\n<td>获得该类所有的成员方法</td>\n</tr>\n<tr>\n<td><code>getDeclaredMethod(String name, Class&lt;?&gt;...parameterTypes)</code></td>\n<td>获得该类指定的成员方法</td>\n</tr>\n<tr>\n<td><code>getFields()</code></td>\n<td>获得该类所有 <code>public</code>  的成员变量</td>\n</tr>\n<tr>\n<td><code>getField(String name)</code></td>\n<td>获得该类指定的 <code>public</code>  的成员</td>\n</tr>\n<tr>\n<td><code>getDeclaredFields()</code></td>\n<td>获得该类所有的成员变量</td>\n</tr>\n<tr>\n<td><code>getDeclaredField(String name)</code></td>\n<td>获得该类指定的成员变量</td>\n</tr>\n<tr>\n<td><code>getClasses()</code></td>\n<td>获得该类所有 <code>public</code>  的内部类</td>\n</tr>\n<tr>\n<td><code>getDeclaredClasses()</code></td>\n<td>获得该类所有的内部类</td>\n</tr>\n<tr>\n<td><code>getDeclaringClass()</code></td>\n<td>该类是内部类，则返回它的成员类，否则返回 <code>null</code></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"反射属性\"><a class=\"markdownIt-Anchor\" href=\"#反射属性\">#</a> 反射属性</h4>\n<p>对如下的对象：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> publicField <span class=\"token operator\">=</span> <span class=\"token string\">\"public\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> privateField <span class=\"token operator\">=</span> <span class=\"token string\">\"private\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果没有提供 <code>getter/setter</code>  方法，那么将无法访问其中的私有字段，但是通过反射提供的 API, 就可以操作它们。<br>\n如下所示，无论公私字段，都通过反射 API 获取到了它们的类型和名称：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Class</span> c <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Field</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fields <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Field</span> field <span class=\"token operator\">:</span> fields<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" : \"</span> <span class=\"token operator\">+</span> field<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>通过反射的 API，更进一步还可以修改私有字段的值，如上的 <code>name</code>  字段，它在获得的 <code>Field</code>  数组中是第一个：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fields<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 修改私有字段前需要先将其设置为 true</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fields<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token string\">\"by reflect api\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//set (Object obj, Object value) 修改字段的值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果为 by reflect api</span></pre></td></tr></table></figure><h4 id=\"反射方法\"><a class=\"markdownIt-Anchor\" href=\"#反射方法\">#</a> 反射方法</h4>\n<p>类似的，反射也可以获得类的所有方法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">privateMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"private\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">publicMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"public\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试代码如下，其中 <code>name</code>  和 <code>age</code>  字段各有一个 <code>getter</code> ：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Class</span> c <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Method</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> methods <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> method <span class=\"token operator\">:</span> methods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            method<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用私有方法需要先设置为 true</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">Object</span> r <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 通过 invoke (Object obj) 来调用方法</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印测试返回值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>控制台打印结果如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>John  <span class=\"token comment\"># getName () 返回值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">25</span>  <span class=\"token comment\"># getAge () 返回值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>private <span class=\"token comment\"># privateMethod 打印值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token boolean\">false</span> <span class=\"token comment\"># privateMethod 返回值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>public  <span class=\"token comment\"># publicMethod 打印值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>null  <span class=\"token comment\"># publicMethod 返回值值（返回值类型为 void）</span></pre></td></tr></table></figure><h4 id=\"反射构造器\"><a class=\"markdownIt-Anchor\" href=\"#反射构造器\">#</a> 反射构造器</h4>\n<p>包括构造器在内的其他结构，也可以通过反射获取，在示例 <code>Person</code>  类中添加如下两个构造器，并重写 <code>toString()</code>  方法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is public constructor.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is private constructor.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Person&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token string\">\"name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token string\">\", age=\"</span> <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试代码如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Class</span> c <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 可访问的无参构造器，可以直接使用 newInstance 方法创建新对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Object</span> q <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> constructors <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Constructor</span> constructor <span class=\"token operator\">:</span> constructors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">// 设置为 true 访问私有的构造器</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            constructor<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// 根据构造器的参数个数传参新建对象</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>constructor<span class=\"token punctuation\">.</span><span class=\"token function\">getParameterCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> obj <span class=\"token operator\">=</span> constructor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> obj <span class=\"token operator\">=</span> constructor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ann\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> obj <span class=\"token operator\">=</span> constructor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">// 打印对象字符串</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>控制台打印结果如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>This is public constructor. <span class=\"token comment\"># c.newInstance () 调用的构造器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>This is private constructor.  <span class=\"token comment\"># private Person(String name)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Person<span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">=</span><span class=\"token string\">'Ann'</span>, <span class=\"token assign-left variable\">age</span><span class=\"token operator\">=</span>null<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>This is public constructor. <span class=\"token comment\"># public Person()</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Person<span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">=</span><span class=\"token string\">'null'</span>, <span class=\"token assign-left variable\">age</span><span class=\"token operator\">=</span>null<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Person<span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">=</span><span class=\"token string\">'Bob'</span>, <span class=\"token assign-left variable\">age</span><span class=\"token operator\">=</span><span class=\"token number\">36</span><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\"># public Person(String name, Integer age)</span></pre></td></tr></table></figure><p>通过 <code>Constructor/Field/Method.setAccessible(true)</code>  的方式可以绕过 <code>private</code>  的访问限制，这种方式又被称为暴力反射</p>\n<h4 id=\"反射与注解\"><a class=\"markdownIt-Anchor\" href=\"#反射与注解\">#</a> 反射与注解</h4>\n<p>反射结合注解使用，可以获取自定义注解中的属性，而为了通过反射获取到自定义注解中的属性，就必须将注解的生命周期声明为 <code>RetentionPolicy.RUNTIME</code> 。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 自定义注解的声明如下</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>元注解<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>修饰符<span class=\"token punctuation\">]</span> <span class=\"token annotation punctuation\">@interface</span> 注解名 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">[</span>成员<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 声明一个自定义注解</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">MyAnnotation</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">author</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>定义说明：\n<ul>\n<li>注解中使用 <code>数据类型 属性名()</code>  定义属性， <code>数据类型 属性名() default 默认值</code> 可以为属性赋予初始值，但是也可以被二次赋值。</li>\n<li>注解中可以定义基本类型、 <code>String</code> 、 <code>Class</code> 、枚举类型和注解类型及这些类型的一维数组。</li>\n</ul>\n</li>\n<li>使用说明：\n<ul>\n<li>空注解可以直接使用，但是有属性的注解则一定要赋值</li>\n<li>注解的多个属性值用 <code>,</code>  分隔，注解中的数组使用 <code>&#123;&#125;</code>  符号</li>\n<li>有默认值的注解可以不用赋值，但要重新赋值则必须写上新值</li>\n<li>如果注解中只有一个属性，其属性名为 <code>value</code> ，那么使用注解时可以不用写属性名，直接写属性值</li>\n</ul>\n</li>\n</ul>\n<p>解析注解涉及到的接口是 <code>AnnotatedElement</code> ，它提供了相关的方法。这个接口的实现类包括 <code>AccessibleObject</code> 、 <code>Class</code> 、 <code>Constructor</code> 、 <code>Field</code>  和 <code>Method</code>  等。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@MyAnnotation</span><span class=\"token punctuation\">(</span>author <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"author1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"author2\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> date <span class=\"token operator\">=</span> <span class=\"token string\">\"2023-05-15\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Demo</span><span class=\"token punctuation\">></span></span> c <span class=\"token operator\">=</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyAnnotation</span><span class=\"token punctuation\">></span></span> m <span class=\"token operator\">=</span> <span class=\"token class-name\">MyAnnotation</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 如果指定位置上有指定的注解，则获取注解的属性值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotationPresent</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">// 获取指定的注解</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">MyAnnotation</span> ma <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// 获取指定注解中的属性值</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>ma<span class=\"token punctuation\">.</span><span class=\"token function\">author</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ma<span class=\"token punctuation\">.</span><span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ma<span class=\"token punctuation\">.</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"jdk-新特性\"><a class=\"markdownIt-Anchor\" href=\"#jdk-新特性\">#</a> JDK 新特性</h2>\n<p>在当前使用的 JDK 中，有三个长期支持版本（LTS），分别是 JDK8、JDK11 和 JDK17。其中，JDK8 是非常经典的一个版本，它带来了许多新特性，如函数式编程就是从 JDK8 开始支持，并且 JDK8 的结束支持日期预计到 2030 年 12 月。<br>\nOracle 保持着六个月一次的 Java 发布周期，三年一次的长期支持版发布周期。从 JDK8 之后，每次的更新虽然也有新特性、新语法的加入，但更多是系统和语法上的优化。目前来讲，JDK8 仍然是使用最为广泛的一个版本。</p>\n<h3 id=\"函数式编程\"><a class=\"markdownIt-Anchor\" href=\"#函数式编程\">#</a> 函数式编程</h3>\n<p>函数式编程又称为 Lambda Calculus（λ-Calculus），即 Lambda 计算。<br>\n函数式编程虽然也可以归结到面向过程的程序设计，但其思想更接近数学计算。它的一个特点是，允许把函数本身作为参数传入另一个函数，并且返回值也可以是一个函数。<br>\n函数式编程从 JDK8 开始支持。</p>\n<h4 id=\"lambda-表达式\"><a class=\"markdownIt-Anchor\" href=\"#lambda-表达式\">#</a> Lambda 表达式</h4>\n<p>Java 中不允许单独定义函数，但 Lambda 表达式可以通过匿名内部类改变而来：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 匿名内部类写法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Runnable\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// Lambda 表达式写法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Runnable\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>-&gt;</code>  操作符称为 Lambda 操作符或箭头操作符，它的左侧指定了 Lambda 表达式需要的参数列表，它的右侧指定了 Lambda 体，即表达式要执行的功能。<br>\nLambda 表达式的使用前提必须是<strong>函数式接口做方法传递</strong>，所谓<strong>函数式接口，是指有且只有一个抽象方法的接口</strong>，可以使用 <code>@FunctionalInterface</code>  检测。</p>\n<h4 id=\"函数式接口\"><a class=\"markdownIt-Anchor\" href=\"#函数式接口\">#</a> 函数式接口</h4>\n<p>在面向函数的编程中，函数是一等公民，一个函数最好只完成一件事情，并得到相应的结果。<br>\nJava 中通过函数式接口支持函数式编程，<strong>只有一个抽象方法的接口就是函数式接口</strong>，如： <code>Runnable</code> 、 <code>Comparable</code> 、 <code>Comparator</code>  等，都是函数式接口。<br>\nJDK8 中提供了四个核心的函数式接口：</p>\n<ul>\n<li>\n<p><code>Consumer&lt;T&gt;</code> ：消费型接口，对类型为 <code>T</code>  的对象进行操作，方法为 <code>void accept()</code> 。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoConsumer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 编译器可以根据上下文推断出参数类型，Lambda 表达式中的参数类型也可以省略</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 消费型接口，重写 accept 方法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">method</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello, Java!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> consumer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        consumer<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>Supplier&lt;T&gt;</code> ：供给型接口，返回类型为 <code>T</code>  的对象，方法为 <code>T get()</code> 。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoSupplier</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">48</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">49</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>          <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> supplier<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>supplier<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>Function&lt;T, R&gt;</code> ：函数型接口，对类型为 <code>T</code>  的对象，返回类型为 <code>R</code>  的对象，方法为 <code>R apply(T t)</code> 。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoFunction</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                arr<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Function</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> function<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> function<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>Predicate&lt;T&gt;</code> ：判断型接口，判断类型 <code>T</code>  的对象是否满足约束，返回布尔值，方法为 <code>boolean test(T t)</code> 。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoPredicate</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">boolean</span> isInt <span class=\"token operator\">=</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ox\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>isInt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> predicate<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> predicate<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"方法引用\"><a class=\"markdownIt-Anchor\" href=\"#方法引用\">#</a> 方法引用</h4>\n<p>Lambda 表达式可以简化函数式接口，而方法引用更进一步简化了 Lambda 的写法，可以认为是 Lambda 表达式的一种语法糖。<br>\n在 Lambda 表达式中，如果传递的某个方法签名和接口恰好一致（返回值类型和参数列表都相同），则可以直接使用方法引用的方式。<br>\n几个示例如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 1. 方法引用，打印字符串</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello,World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 2. 方法引用，返回值为字符串长度</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello,World!\"</span><span class=\"token operator\">::</span><span class=\"token function\">length</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 3. 静态方法引用，类名：：静态方法</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Demo</span><span class=\"token operator\">::</span><span class=\"token function\">sf</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 4. 成员方法引用，对象：：成员方法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">::</span><span class=\"token function\">f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 5. 构造器方法引用，构造类型:new</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> consumer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        consumer<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> supplier<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> supplier<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Function</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> function<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> function<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">sf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果只是单纯将原本面向对象编程的写法，粗暴地进行面向函数的改写，很难说出这种方式优势在何处。<br>\n为了更好发挥面向函数编程的优势，JDK8 中还提供了一个强大的 StreamAPI。</p>\n<h4 id=\"streamapi\"><a class=\"markdownIt-Anchor\" href=\"#streamapi\">#</a> StreamAPI</h4>\n<p>StreamAPI，或称流式 API，在 <code>java.util.stream</code>  包中，代表任意 Java 对象的序列。<br>\n <code>Stream</code>  可以顺序输出的任意 Java 对象实例，但是与 <code>List</code>  不同， <code>Stream</code>  中的元素可以是之前不存在，在使用时再实时计算出来的。</p>\n<ol>\n<li><code>Stream</code>  自己不会存储元素，也不会改变源对象，只是返回一个持有结果的 <code>Stream</code> ；</li>\n<li><code>Stream</code>  操作是延迟执行的，只有到进行操作的时候，才会执行并产生结果；</li>\n<li><code>Stream</code>  一旦执行了终止操作，就不能再调用其它中间操作或终止操作了。</li>\n</ol>\n<p><code>Stream</code>  可以通过其他类的 <code>stream()</code>  方法创建，也可以通过 <code>Stream.of()</code>  静态方法创建，然后就可以对 <code>Stream</code>  流执行一系列中间操作：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ST</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">101</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stream <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        stream<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-></span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>StreamAPI 常见方法：</p>\n<ul>\n<li>\n<p>筛选方法</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>filter(Predicate p)</code></td>\n<td>从流中排除某些元素</td>\n</tr>\n<tr>\n<td><code>distinct</code></td>\n<td>去除该流中的重复元素</td>\n</tr>\n<tr>\n<td><code>limit(long maxSize)</code></td>\n<td>截断流，使流元素不超过给定的值</td>\n</tr>\n<tr>\n<td><code>skip(long n)</code></td>\n<td>截断流，跳过流的前 <code>n</code>  个元素</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>映射方法</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>map(Function f)</code></td>\n<td>接受一个函数，该函数会应用到每个元素上并将其映射为新函数</td>\n</tr>\n<tr>\n<td><code>flatMap(Function f)</code></td>\n<td>接受一个函数，将流中的每个值都转换成一个流，然后把所有流连接成一个</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>排序方法</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sorted()</code></td>\n<td>产生一个新流，按自然顺序排序</td>\n</tr>\n<tr>\n<td><code>sorted(Comparator c)</code></td>\n<td>产生一个新流，按比较器指定排序</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>终止方法<br>\n终止方法会从流中产生结果，其结果是任何不为流的值。当使用终止方法后，不能再次使用流。</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>allMatch(Predicate p)</code></td>\n<td>检查是否匹配所有元素</td>\n</tr>\n<tr>\n<td><code>anyMatch(Predicate p)</code></td>\n<td>检查是否至少匹配一个元素</td>\n</tr>\n<tr>\n<td><code>noMatch(Predicate p)</code></td>\n<td>检查是否没有匹配的元素</td>\n</tr>\n<tr>\n<td><code>findFirst()</code></td>\n<td>返回第一个元素</td>\n</tr>\n<tr>\n<td><code>findAny()</code></td>\n<td>返回当前流中的任意一个元素</td>\n</tr>\n<tr>\n<td><code>count()</code></td>\n<td>返回当前流中的元素总数</td>\n</tr>\n<tr>\n<td><code>max(Comparator c)</code></td>\n<td>返回当前流中最大值</td>\n</tr>\n<tr>\n<td><code>min(Comparator c)</code></td>\n<td>返回当前流中最小值</td>\n</tr>\n<tr>\n<td><code>forEach(Consumer c)</code></td>\n<td>对当前流进行内部迭代</td>\n</tr>\n<tr>\n<td><code>reduce(T identity, BinaryOperator b)</code></td>\n<td>可以将当前流中元素反复结合，得到一个值并返回</td>\n</tr>\n<tr>\n<td><code>collect(Collector c)</code></td>\n<td>将流转换为其他形式，接受一个 <code>Collector</code>  接口的实现</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<h3 id=\"其他变化\"><a class=\"markdownIt-Anchor\" href=\"#其他变化\">#</a> 其他变化</h3>\n<p>从 JDK8 到当前的 JDK20，Java 添加了许多新特性和新语法，这里只记录一些常用的语法特性。</p>\n<h4 id=\"try-catch-资源关闭\"><a class=\"markdownIt-Anchor\" href=\"#try-catch-资源关闭\">#</a> try-catch 资源关闭</h4>\n<p><code>try...catch...finally</code>  语句常于 IO 流等一同使用，除了处理异常情况外， <code>finally</code>  中还进行资源关闭操作。<br>\nJDK9 之后为 <code>try</code>  添加了新特性，可以在 <code>try</code>  后面的括号中引用流对象的名称，当代码执行完成后，可以自动关闭流对象而不再需要手动关闭了：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">IOA</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IOA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">IOB</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IOB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">;</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 可能产生异常的代码</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 异常处理</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"instanceof-模式匹配\"><a class=\"markdownIt-Anchor\" href=\"#instanceof-模式匹配\">#</a> instanceof 模式匹配</h4>\n<p><code>instanceof</code>  模式匹配可以减少 Java 中的强制类型转换，在 JDK14 之后加入：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 旧写法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 显示强制类型转换</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Student</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span> obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    s<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 新写法</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Student</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    s<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"var-关键字\"><a class=\"markdownIt-Anchor\" href=\"#var-关键字\">#</a> var 关键字</h4>\n<p><code>var</code>  关键字可以通过局部类型变量推断，省略不必要的类型声明，此语法从 JDK10 引入：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 局部变量，var 变量名 = 值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"switch-优化\"><a class=\"markdownIt-Anchor\" href=\"#switch-优化\">#</a> switch 优化</h4>\n<p>JDK14 将 JDK12 和 JDK13 中的作为预览的增强 <code>switch</code>  语句纳入了正式特性，通过这些新特性可以写出更简洁清晰的 <code>switch</code>  语句：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// JDK12 之前</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>month<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"春季\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token number\">8</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"夏季\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token number\">9</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token number\">10</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token number\">11</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"秋季\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token number\">12</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"冬季\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入错误\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 增强 switch 写法</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>month<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"春季\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"夏季\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"秋季\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"冬季\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">default</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入错误\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// 通过 yield 关键字返回 switch 语句的值</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">var</span> season <span class=\"token operator\">=</span> <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>month<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">yield</span> <span class=\"token string\">\"春季\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">yield</span> <span class=\"token string\">\"夏季\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">yield</span> <span class=\"token string\">\"秋季\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">yield</span> <span class=\"token string\">\"冬季\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">default</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">yield</span> <span class=\"token string\">\"输入错误\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"文本块\"><a class=\"markdownIt-Anchor\" href=\"#文本块\">#</a> 文本块</h4>\n<p>文本块语法使用连续的三个 <code>&quot;</code>  符号表示开始符和结束符，在它中间可以放置多行字符串而不需要进行字符转义，提高了 Java 程序的可读性：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                &lt;html></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                    &lt;body></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                        &lt;h1>Hello&lt;/h1></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    &lt;/body></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                &lt;/html></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                \"\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>输出如下，避免了编辑多行字符串时需要插入的转义字符：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token operator\">&lt;</span>h<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span>Hello<span class=\"token operator\">&lt;</span>/h<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">&lt;</span>/body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span>/html<span class=\"token operator\">></span></pre></td></tr></table></figure><!-- //TODO#### GC 变化 -->\n",
            "tags": [
                "编程学习",
                "Java基础",
                "Java",
                "Java学习"
            ]
        },
        {
            "id": "https://www.umi.homes/posts/564/",
            "url": "https://www.umi.homes/posts/564/",
            "title": "IO流与网络编程",
            "date_published": "2023-05-04T16:00:00.000Z",
            "content_html": "<h2 id=\"io-流\"><a class=\"markdownIt-Anchor\" href=\"#io-流\">#</a> IO 流</h2>\n<h3 id=\"概述\"><a class=\"markdownIt-Anchor\" href=\"#概述\">#</a> 概述</h3>\n<p>所谓 I/O，即输入（Input）输出（Output）。从计算机的角度来说，输入指的是外部设备向计算机传输数据，而输出是计算机将数据发送到外部设备。然而，I/O 的概念在计算机领域更加广泛。它涉及设备控制、数据缓冲和管理等各方面的内容。<br>\n在 UNIX 系统下，I/O 模型一共有五种，分别是：同步阻塞 I/O、同步非阻塞 I/O、多路复用 I/O、信号驱动 I/O 和异步 I/O。这些 I/O 模型允许程序使用不同的策略来处理输入和输出操作。<br>\n在 Java 程序中，常见的 I/O 模型有三种，分别是 BIO（Blocking I/O）、NIO（ Non-blocking I/O）和 AIO（Asynchronous I/O）。</p>\n<ul>\n<li>BIO：阻塞 I/O，主要指传统的 <code>java.io</code>  包。它基于流模型实现并使用阻塞方式进行输入和输出操作。</li>\n<li>NIO：非阻塞 I/O，主要指 JDK 引入的 <code>java.nio</code>  包。它提供了更高级的抽象，包括通道（Channel）和缓冲区（Buffer）等，可以构建多路复用的、非阻塞的 IO 程序。</li>\n<li>AIO：异步非阻塞 I/O， JDK7 对 NIO 进行了进一步的改进，引入了异步非阻塞 IO 方式，也被称为 NIO2 或者 AIO。AIO 模型允许程序发起 I/O 操作后继续执行其他任务，当操作完成时再进行相应处理。</li>\n</ul>\n<p>当讨论传统的 IO 流时，主要所说的是 BIO，也就是 <code>java.io</code>  包下的相关内容。<br>\nBIO 是基于流实现的，当程序需要读取数据的时候使用输入流，当程序需要输出数据的时候使用输出流。BIO 中操作的流主要有两大类，字符流和字节流，而根据方向又分为输入和输出：<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/computerscience/java-note/IO.4y6qze0cu1w0.webp\" alt=\"IO\"><br>\n <code>InputStream/OutputStream</code>  是字节流的核心抽象类， <code>Reader/Writer</code>  是字符流的核心抽象类。</p>\n<h3 id=\"file-对象\"><a class=\"markdownIt-Anchor\" href=\"#file-对象\">#</a> File 对象</h3>\n<p><code>File</code>  对象由 <code>java.io</code>  包定义，用来表示物理介质上可能存在的一个文件或文件目录。<br>\n <code>File</code>  对象可以操作文件或文件目录，但是不能直接访问文件内容本身，而是需要结合输入输出流使用。</p>\n<h4 id=\"构造器\"><a class=\"markdownIt-Anchor\" href=\"#构造器\">#</a> 构造器</h4>\n<ul>\n<li><code>File(String pathname)</code> <br>\n 以 <code>pathname</code>  为路径创建 <code>File</code>  对象，可以是相对路径也可以是绝对路径。</li>\n<li><code>File(String parent, String child)</code> <br>\n 以 <code>parent</code>  为父路径， <code>child</code>  为子路径创建 <code>File</code>  对象。</li>\n<li><code>File(File parent, String child)</code> <br>\n 根据一个父 <code>File</code>  对象和子文件路径创建 <code>File</code>  对象。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">File</span> f1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/home/user/new_file1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">File</span> f2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/home/user/new_file1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"new_text1.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">File</span> f3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"new_text2.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Java 作为跨平台的程序，可以直接使用 <code>/</code>  作为与操作系统无关的文件分隔符，或者使用 <code>File.separator</code>  作为分隔。<br>\n无论路径是否存在文件或文件夹，都不影响 <code>File</code>  对象的创建。</p>\n<h4 id=\"常用方法\"><a class=\"markdownIt-Anchor\" href=\"#常用方法\">#</a> 常用方法</h4>\n<ol>\n<li>\n<p>获取 <code>File</code>  对象信息：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>String getName()</code></td>\n<td>获取名称</td>\n</tr>\n<tr>\n<td><code>String getPath()</code></td>\n<td>获取路径</td>\n</tr>\n<tr>\n<td><code>String getAbsolutePath()</code></td>\n<td>获取绝对路径</td>\n</tr>\n<tr>\n<td><code>File getAbsoluteFile()</code></td>\n<td>获取绝对路径表示的文件</td>\n</tr>\n<tr>\n<td><code>String getParent()</code></td>\n<td>获取上层文件目录路径</td>\n</tr>\n<tr>\n<td><code>long length()</code></td>\n<td>获取文件的字节数</td>\n</tr>\n<tr>\n<td><code>long lastModified()</code></td>\n<td>获取最后一次修改的时间</td>\n</tr>\n<tr>\n<td><code>String[] list()</code></td>\n<td>以字符串形式列出 <code>File</code>  目录中的子文件和目录</td>\n</tr>\n<tr>\n<td><code>File[] listFiles()</code></td>\n<td>以 <code>File</code>  对象形式列出 <code>File</code>  目录中的子文件和目录</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>判断 <code>File</code>  对象信息：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>boolean exists()</code></td>\n<td><code>File</code>  对象表示的文件或目录是否存在</td>\n</tr>\n<tr>\n<td><code>boolean isDirectory()</code></td>\n<td><code>File</code>  对象是否为目录</td>\n</tr>\n<tr>\n<td><code>boolean isFile()</code></td>\n<td><code>File</code>  对象是否为文件</td>\n</tr>\n<tr>\n<td><code>boolean canRead()</code></td>\n<td><code>File</code>  对象是否可读</td>\n</tr>\n<tr>\n<td><code>boolean canWrite()</code></td>\n<td><code>File</code>  对象是否可写</td>\n</tr>\n<tr>\n<td><code>boolean isHidden()</code></td>\n<td><code>File</code>  对象是否隐藏</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>操作 <code>File</code>  对象方法</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>boolean renameTo(File dest)</code></td>\n<td>把文件重命名为指定的文件路径</td>\n</tr>\n<tr>\n<td><code>boolean createNewFile()</code></td>\n<td>文件存在，返回 <code>false</code> ；文件不存在，创建文件返回 <code>true</code></td>\n</tr>\n<tr>\n<td><code>boolean mkdir()</code></td>\n<td>目录存在，返回 <code>false</code> ；目录不存在，创建目录返回 <code>true</code></td>\n</tr>\n<tr>\n<td><code>boolean mkdirs()</code></td>\n<td>创建目录，上层目录如果不存在也一并创建</td>\n</tr>\n<tr>\n<td><code>boolean delete()</code></td>\n<td>删除文件或文件夹，删除的文件夹需要是空文件夹</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 一个简单的文件夹大小统计工具</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Scanner</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入文件路径：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">fileCount</span><span class=\"token punctuation\">(</span>sc<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fileCount</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> pathname<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">fileCount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>pathname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fileCount</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> file<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">long</span> size <span class=\"token operator\">=</span> <span class=\"token function\">fileSize</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0 B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请检查路径是否有误并确保有访问权限！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> units <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"KB\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"MB\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GB\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"TB\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">int</span> digitGroups <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">log10</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">log10</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">String</span> res <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.1f %s\"</span><span class=\"token punctuation\">,</span> size <span class=\"token operator\">/</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> digitGroups<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> units<span class=\"token punctuation\">[</span>digitGroups<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"目标文件或文件夹大小为：\"</span> <span class=\"token operator\">+</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token function\">fileSize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> file<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">long</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">isFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            sum <span class=\"token operator\">+=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">isDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token class-name\">File</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> files <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">listFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>files <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> f <span class=\"token operator\">:</span> files<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    sum <span class=\"token operator\">+=</span> <span class=\"token function\">fileSize</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"字节流\"><a class=\"markdownIt-Anchor\" href=\"#字节流\">#</a> 字节流</h3>\n<p>字节流又称万能流，主要操作字节数据的二进制对象。<br>\n字节流有两个核心抽象类 <code>InputStream</code>  和 <code>OutputStream</code> ，其他字节流类都继承自这两个抽象类：<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/computerscience/java-note/%E5%AD%97%E8%8A%82%E6%B5%81.1f5vtzgpvkbk.webp\" alt=\"字节流\"></p>\n<h4 id=\"抽象父类\"><a class=\"markdownIt-Anchor\" href=\"#抽象父类\">#</a> 抽象父类</h4>\n<ul>\n<li>\n<p><code>InputStream</code> ：输入流最主要的功能是读取数据流。常用方法如下：</p>\n<ul>\n<li><code>public abstract int read() throws IOException</code> <br>\n 从输入流读取一个字节，返回读取的字节值。如果已经到达流末尾没有数据可读，则返回 - 1。</li>\n<li><code>public int read(byte b[]) throws IOException</code></li>\n<li><code>public int read(byte b[], int off, int len) throws IOException</code> <br>\n 从输入流中读取一组字节，并将它们存储到字节数组 <code>byte[] b</code>  中。如果没有指定 <code>off</code>  和 <code>len</code> ，则默认从 0 开始存储，并读取 <code>b.length</code>  个字节，如果有指定则按照指定数量进行。返回的值是实际读取的字节个数。如果达到流末尾没有数据可读，则返回 - 1。</li>\n<li><code>public void close() throws IOException</code> <br>\n 关闭此输入流并释放与此流相关联的任何系统资源。</li>\n</ul>\n</li>\n<li>\n<p><code>OutputStream</code></p>\n<ul>\n<li><code>public abstract void write(int b) throws IOException</code> <br>\n 将指定的字节写入输出流，虽然参数是 <code>int</code>  类型，但是只会保留一个字节的信息写出。</li>\n<li><code>public void write(byte b[]) throws IOException</code></li>\n<li><code>public void write(byte b[], int off, int len) throws IOException</code> <br>\n 将指定字节数组写入此输出流中。如果没有指定 <code>off</code>  和 <code>len</code> ，默认从字节数组的 0 索引开始，写入数组长度个字节。有指定则按照指定数值写入。</li>\n<li><code>public void flush() throws IOException</code> <br>\n 刷新此输出流并强制任何缓冲的输出字节写出。</li>\n<li><code>public void close() throws IOException</code> <br>\n 关闭此输出流并释放与此流相关联的任何系统资源。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"文件字节流\"><a class=\"markdownIt-Anchor\" href=\"#文件字节流\">#</a> 文件字节流</h4>\n<p><code>FileInputStream</code>  和 <code>FileOutputStream</code>  提供了读写字节到文件的操作。</p>\n<ul>\n<li>构造方法：\n<ul>\n<li><code>FileInputStream(File file)/FileOutStream(File file)</code></li>\n<li><code>FileInputStream(String path)/FileOutStream(String path)</code></li>\n<li><code>FileOutputStream(File file, boolean append)</code></li>\n</ul>\n</li>\n</ul>\n<p>如果指定的文件不存在， <code>FileOutputStream</code>  会自动创建文件，但是不能创建文件夹。<br>\n默认情况下， <code>FileOutputStream</code>  输出时，新输出内容会覆盖之前的内容。但是可以在创建的对象的时候传入 <code>append</code>  参数，指定为 <code>true</code>  时可以在现有文件末尾追加内容。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 使用字节流复制图片</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileCopy</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 1. 此处简单使用 throws 将异常添加到方法签名</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 2. 创建两个 File 对象，并将其绑定到输入输出流</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">File</span> source <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"source.png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">FileInputStream</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">File</span> dest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dest.png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">FileOutputStream</span> out <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 3. 通过 byte 数组，进行读写操作</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            out<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 4. 读写完成后，close () 释放资源</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        out<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        in<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"缓冲字节流\"><a class=\"markdownIt-Anchor\" href=\"#缓冲字节流\">#</a> 缓冲字节流</h4>\n<p>字节流读写时，是从硬盘上一个一个字节的进行读写，效率并不高。因此，为了提高读写效率，Java 中提供了缓冲流 <code>BufferedInputStream/BufferedOutputStream</code> ，它们可以将读写的字节流进行包装，达到性能的优化。</p>\n<ul>\n<li>构造方法\n<ul>\n<li><code>BufferedInputStream(InputStream in)/BufferedOutputStream(OutputStream out)</code></li>\n<li><code>BufferedInputStream(InputStream in, int size)/BufferedOutputStream(OutputStream out, int size)</code></li>\n</ul>\n</li>\n</ul>\n<p>如果不传入 <code>size</code> ，创建的缓冲区默认大小为 8192 字节，传入后则以传入后的值创建缓冲区。通过缓冲流读取时，会先将内容读取到缓冲的数组上，再通过缓冲区读写，减少系统的 I/O 次数，提高读写性能。<br>\n创建一个 540MB 的测试文件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">dd</span> <span class=\"token assign-left variable\">if</span><span class=\"token operator\">=</span>/dev/zero <span class=\"token assign-left variable\">of</span><span class=\"token operator\">=</span>source_file <span class=\"token assign-left variable\">count</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">bs</span><span class=\"token operator\">=</span>540M</pre></td></tr></table></figure><p>比较两种方式性能：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">File</span> source <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"source_file\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">File</span> dest1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dest1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">File</span> dest2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dest2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">normalCopy</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> dest1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">bufferedCopy</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> dest2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">normalCopy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> source<span class=\"token punctuation\">,</span> <span class=\"token class-name\">File</span> dest<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">FileInputStream</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">FileOutputStream</span> out <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            out<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        out<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        in<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">long</span> end <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"使用字节流直接拷贝文件用时%dms\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bufferedCopy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> source<span class=\"token punctuation\">,</span> <span class=\"token class-name\">File</span> dest<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">BufferedInputStream</span> bis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">BufferedOutputStream</span> bos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">=</span> bis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            bos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        bos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        bis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">long</span> end <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"使用缓冲流拷贝文件用时%dms\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果如下，可以看到使用缓冲流性能略优。当文件更大时，缓冲流的优势会更明显：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>使用字节流直接拷贝文件用时527ms</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>使用缓冲流拷贝文件用时380ms</pre></td></tr></table></figure><h4 id=\"对象字节流\"><a class=\"markdownIt-Anchor\" href=\"#对象字节流\">#</a> 对象字节流</h4>\n<p><code>ObjectInputStream/ObjectOutputStream</code>  称为<strong>对象字节流，用于对象的序列化操作</strong>，也可称之为序列化流。<br>\n序列化机制允许将 Java 对象转换为与平台无关的二进制流，并将其永久保存在磁盘上，或者通过网络来进行传输。当其他程序获取到这种二进制流时，通过对应的反序列化操作，就可以恢复为原来的 Java 对象。</p>\n<ul>\n<li>序列化（serialize）：将对象转换为二进制字节序列。</li>\n<li>反序列化（deserialize）：将二机制字节序列还原为对象。</li>\n<li>使用：将对象字节序列持久化或在网络上进行传输</li>\n<li>要求：被序列化的对象需要实现 <code>Serializable</code>  接口</li>\n</ul>\n<p><img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/computerscience/java-note/serialize.1n7yj4qsjoww.png\" alt=\"序列化\"></p>\n<p>一个简单的示例如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SerializeDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ObjectOutputStream</span> oos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo_file\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">//writeObject (Object obj) 方法，用于将指定的对象序列化</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        oos<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        oos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">ObjectInputStream</span> ois <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo_file\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//readObject () 方法，用于将指定的数据反序列化</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ois<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        ois<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 序列化版本标识符，可以随意指定</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@Serial</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">//transient 不希望被序列化的内容</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">transient</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Person&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token string\">\"name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token string\">\", age=\"</span> <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意事项：</p>\n<ol>\n<li>希望被序列化的对象必须实现 <code>Serializable</code>  接口，否则会报错。父类如果实现了序列化接口，那么它的子类也可以正确序列化；反之，虽然序列化父类的时候不会报错，但是数据会丢失。</li>\n<li>如果序列化的对象中，有属性也是对象，那么这个作为属性的对象也需要实现序列化接口，否则会报错。</li>\n<li>静态变量的值不会被序列化，因为它属于类而不是对象。对不希望序列化的字段可以使用 <code>transient</code>  关键词进行修饰，默认序列化时会忽略它。</li>\n<li>JVM 可以正确反序列化的前提是它必须能够找到相应的类文件，如果找不到该类的文件，会抛出 <code>ClassNotFoundException</code> 。</li>\n<li><code>serialVersionUID</code>  是用来表示序列化版本的静态标识符，声明必须为 <code>static final long</code> ，它可以用来保证在反序列时，发送方发送的和接受方接收的是可兼容的对象。如果反序列化时其值不同，会抛出 <code>InvalidClassException</code> 。<div class=\"note info\">\n<p>一般来说，编译时会自动生成默认的 <code>serialVersionUID</code> ，但是增加或修改类的字段，会导致这个值变化，并且不同版本的 JDK，生成的默认值也可能不同。因此为了确保能正确匹配上兼容的类，<strong>建议在每一个序列化的类中显式指定 <code>serialVersionUID</code>  的值</strong>。</p>\n</div>\n</li>\n</ol>\n<h3 id=\"字符流\"><a class=\"markdownIt-Anchor\" href=\"#字符流\">#</a> 字符流</h3>\n<p>字符流与字节流最主要的区别在于，字节流以字节 <code>byte</code>  为单位读取，而字符流以 <code>char</code>  为单位读取。Java 使用 <code>unicode</code>  编码，一个字符占两个字节。<br>\n字符流有两个核心抽象类 <code>Reader</code>  和 <code>Writer</code> ，其他字符流类都继承自这两个抽象类：<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/computerscience/java-note/%E5%AD%97%E7%AC%A6%E6%B5%81.6zokq82i97o0.webp\" alt=\"字符流\"></p>\n<h4 id=\"抽象父类-2\"><a class=\"markdownIt-Anchor\" href=\"#抽象父类-2\">#</a> 抽象父类</h4>\n<ul>\n<li>\n<p><code>Reader</code></p>\n<ul>\n<li><code>public int read() throws IOException</code> <br>\n 读取一个字符，自动提升为 <code>int</code>  类型，如果已经到流的末尾，返回 - 1。</li>\n<li><code>public int read(char[] cbuf) throws IOException</code></li>\n<li><code>public abstract int read(char[] cbuf, int off, int len) throws IOException</code> <br>\n 读取一些字符并将其存入字符数组中。从索引 <code>off</code>  开始，每次最多读取 <code>len</code>  个字符，如果没有指定，则默认 <code>off</code>  为 0，默认 <code>len</code>  为 <code>cbuf.length</code> 。返回值为实际读取的字符个数。如果没有数据可读，返回 - 1。</li>\n<li><code>public abstract void close() throws IOException</code> <br>\n 关闭输入流并释放相关的系统资源。</li>\n</ul>\n</li>\n<li>\n<p><code>Writer</code></p>\n<ul>\n<li><code>public void write(int c) throws IOException</code> <br>\n 写出单个字符。</li>\n<li><code>public void write(char cbuf[]) throws IOException</code></li>\n<li><code>public abstract void write(char cbuf[], int off, int len) throws IOException</code> <br>\n 写出字符数组，从索引 <code>off</code>  开始，写出 <code>len</code>  个字符。如果没有指定，则默认 <code>off</code>  为 0，默认 <code>len</code>  为 <code>cbuf.length</code> 。</li>\n<li><code>public void write(String str) throws IOException</code></li>\n<li><code>public void write(String str, int off, int len) throws IOException</code> <br>\n 写出字符串，从索引 <code>off</code>  开始，写出 <code>len</code>  个字符。如果没有指定，则默认 <code>off</code>  为 0，默认 <code>len</code>  为 <code>str.length()</code> 。</li>\n<li><code>public abstract void flush() throws IOException</code> <br>\n 刷新此输出流并强制写出所有缓冲的输出字符。</li>\n<li><code>public abstract void close() throws IOException </code> <br>\n关闭输出流并释放相关的系统资源。</li>\n</ul>\n</li>\n</ul>\n<p>可以看到，字符流和字节流的方法非常相似，两者最主要的区别在操作的对象是字符还是字节。</p>\n<h4 id=\"文件字符流\"><a class=\"markdownIt-Anchor\" href=\"#文件字符流\">#</a> 文件字符流</h4>\n<p>文件字符流专门拥有处理文本文件，不能操作图片或视频等非文本文件。</p>\n<ul>\n<li>构造方法：\n<ul>\n<li><code>FileReader(File file)/FileWriter(File file)</code></li>\n<li><code>FileReader(String filename)/FileWriter(String filename)</code></li>\n</ul>\n</li>\n</ul>\n<p>JDK11 之后提供了额外的参数，允许在创建文件字符流时就指定编码。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">FileWriter</span> fw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello,World!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好，世界！\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        fw<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">FileReader</span> fr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        fr<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        fr<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"缓冲字符流\"><a class=\"markdownIt-Anchor\" href=\"#缓冲字符流\">#</a> 缓冲字符流</h4>\n<p><code>BufferedReader/BufferedWriter</code>  是字符流的缓冲流，基本方法与普通字符流一致，使用方法也与字节缓冲流相似。</p>\n<ul>\n<li>特有方法：\n<ul>\n<li><code>BufferedReader</code> ： <code>String readLine()</code> ，读取一行文字。</li>\n<li><code>BufferedWriter</code> ： <code>void newLine()</code> ，书写一行分隔符，由系统定义符号。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">BufferedWriter</span> bw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedWriter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        bw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello,World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        bw<span class=\"token punctuation\">.</span><span class=\"token function\">newLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        bw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好，世界！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        bw<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Hello,World!</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 你好，世界！</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 已经到末尾，没有数据，打印为 null</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        br<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"转换流\"><a class=\"markdownIt-Anchor\" href=\"#转换流\">#</a> 转换流</h4>\n<p>转换流是字符流与字节流之间的桥梁， <code>InputStreamReader</code>  可以将输入字节流转化为输入字符流， <code>OutputStreamWriter</code>  可以将输出字节流转化为输出字符流。</p>\n<ul>\n<li>构造方法：\n<ul>\n<li><code>IInputStreamReader(InputStream in, String charsetName)</code> ：<br>\n使用指定的字符集创建一个输入字符流，如果省略则使用默认的字符集。</li>\n<li><code>OutputStreamWriter(OutputStream out,String charsetName)</code> ：<br>\n使用指定的字符集创建一个输出字符流，如果省略则使用默认的字符集。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 使用转换流实现文件编码转换</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">InputStreamReader</span> isr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> isr<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        isr<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">OutputStreamWriter</span> osw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OutputStreamWriter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GBK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        osw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        osw<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"其他使用\"><a class=\"markdownIt-Anchor\" href=\"#其他使用\">#</a> 其他使用</h3>\n<h4 id=\"打印流\"><a class=\"markdownIt-Anchor\" href=\"#打印流\">#</a> 打印流</h4>\n<p><code>System</code>  类中， <code>in</code> 、 <code>out</code> 、 <code>err</code>  三个成员变量，分别代表标准输入流、标准输出流和标准错误输出流。其中， <code>System.in</code>  的类型是 <code>InputStream</code> ， <code>System.out</code>  和 <code>System.err</code>  的类型是 <code>PrintStream</code> 。</p>\n<ul>\n<li><code>PrintStream</code>  是 <code>FilterOutputStream</code>  的子类， <code>FilterOutputStream</code>  又继承自 <code>OutputStream</code> 。和 <code>OutputStream</code>  相比， <code>PrintStream</code>  添加了一组 <code>print()/println()</code>  方法，可以打印各种数据类型，常用的 <code>System.out.println()</code>  实际上就是调用的这个方法。</li>\n<li><code>PrintWriter</code>  是 <code>Writer</code>  的子类，它的 <code>print()/println()</code>  方法最终输出的是 <code>char</code>  数据。但是从使用上来说，它与 <code>PrintStream</code>  几乎一模一样。</li>\n</ul>\n<p><code>PrintStream</code>  可以结合 <code>System.setOut()</code>  方法，实现输出的重定向：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">PrintStream</span> ps <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrintStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"log.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">setOut</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"一些日志信息内容\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        ps<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这样信息将不会在控制台打印出，而是重定向输出到 <code>PrintStream</code>  指定的文件中。</p>\n<h4 id=\"properties\"><a class=\"markdownIt-Anchor\" href=\"#properties\">#</a> Properties</h4>\n<p><code>Properties</code>  是 <code>Hashtable</code>  的子类，它的键值对只允许 <code>String</code>  类型的。<br>\n在实际使用中， <code>Properties</code>  常与 <code>IO</code>  流结合配置文件进行使用：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Properties</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        p<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        p<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        p<span class=\"token punctuation\">.</span><span class=\"token function\">store</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setting.properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"写入注释内容\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Properties</span> q <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        q<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setting.properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>.properties</code>  是 Java 的默认配置文件，每行都以 <code>key=value</code>  表示，以 <code>#</code> 开头行作为注释。最早默认是 <code>ASCII</code>  编码，JDK9 开始可以使用 <code>UTF-8</code>  编码。<br>\n <code>Properties</code>  结合 IO 流使用，通过 <code>store()</code>  方法可以将配置写入配置文件中，使用 <code>load()</code>  方法又可以对配置文件中的数据进行读取。</p>\n<h4 id=\"commons-io\"><a class=\"markdownIt-Anchor\" href=\"#commons-io\">#</a> commons-io</h4>\n<p><code>commons-io</code>  是由 Apache 开发的 IO 相关的工具包，通过它可以简化 IO 相关的操作。<br>\n项目页面见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb21tb25zLmFwYWNoZS5vcmcvcHJvcGVyL2NvbW1vbnMtaW8v\">commons-io</span></p>\n<h2 id=\"网络编程\"><a class=\"markdownIt-Anchor\" href=\"#网络编程\">#</a> 网络编程</h2>\n<p>网络编程是 Java 最擅长的方向之一，Java 从语言级上提供了对网络应用程序的支持。<br>\n因为 JVM 实现了底层复杂的网络协议，在使用 Java 提供的网络类库进行网络编程时，无需关注底层细节，即可简单高效得编写网络应用程序。<br>\n本节是对 Java 网络编程的简单介绍。</p>\n<h3 id=\"基础知识\"><a class=\"markdownIt-Anchor\" href=\"#基础知识\">#</a> 基础知识</h3>\n<h4 id=\"软件架构\"><a class=\"markdownIt-Anchor\" href=\"#软件架构\">#</a> 软件架构</h4>\n<ul>\n<li>C/S 架构：全称 Client/Server 结构，指客户端与服务端的结构。</li>\n<li>B/S 架构：全称 Browser/Server 结构，指浏览器与服务端的结构。</li>\n</ul>\n<p>服务器，指一个管理资源并为用户提供服务的计算机软件，有些时候又指安装了服务器软件的计算机。服务器可以为其他计算机提供应用服务。<br>\n客户端，是指与服务器相对应，为客户提供本地服务的程序。一般安装在普通的用户机上，需要与服务端互相配合运行。<br>\n浏览器，网页浏览器（Web Browser）是一种用于检索并展示网络资讯资源的应用程式。</p>\n<p>无论是客户端还是浏览器，与服务器进行数据通信都离不开网络的支持，网络编程就是在一定的协议下实现两台计算机的通信的程序。</p>\n<h4 id=\"网络通信\"><a class=\"markdownIt-Anchor\" href=\"#网络通信\">#</a> 网络通信</h4>\n<ul>\n<li>\n<p>计算机网络：计算机网络是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统。</p>\n</li>\n<li>\n<p>网络通信：直接或间接地通过网络协议与其它计算机实现数据交换。想要实现网络通信，需要明确 IP、端口和协议。</p>\n</li>\n<li>\n<p>IP：互联网协议地址（Internet Protocol Address），简称 IP，IP 地址是网络中一台计算机设备的唯一标识符。<br>\nIPv4：32 位二进制数，分为 4 个字节，以点分十进制表示。<br>\nIPv6：因为全球 IPv4 地址即将分配殆尽，拟使用 IPv6 重新分配。采用 128 位地址长度，共 16 个字节，写成 8 个无符号整数，每个整数采用 4 个十六进制数表示。</p>\n</li>\n<li>\n<p>端口：网络的通信，本质是两个进程的通信，端口号用于唯一标识设备中的进程。<br>\n端口号：两个字节表示的整数，取值范围 0~65535。<br>\n公认端口：0~1023，被预先定义的服务通信占据，如 HTTP 的 80 端口，HTTPS 的 443 端口，SSH 的 22 端口。<br>\n注册端口：1024~49151，分配给用户进程或应用程序，比较常见的如 mysql 的 3306 端口，Tomcat 的 8080 端口，express 的 3000 端口。<br>\n动态 / 私有端口：49152~65535<br>\n 端口如果被其他程序占用会导致应用程序启动失败。</p>\n</li>\n<li>\n<p>协议：网络协议指的是计算机网络中互相通信的对等实体之间交换信息时所必须遵守的规则的集合，在 Java 网络编程中，主要需要了解的是 TCP 和 UDP。</p>\n</li>\n</ul>\n<h4 id=\"tcp-与-udp\"><a class=\"markdownIt-Anchor\" href=\"#tcp-与-udp\">#</a> TCP 与 UDP</h4>\n<ul>\n<li>\n<p>UDP：用户数据报协议 UDP（User Datagram Protocol），特点是<strong>面向无连接的、不可靠的、基于数据报</strong>的传输层通信协议。<br>\n发送前不建立连接。发送方不管接收方是否准备好，接收方收到后也不进行确认，不保证数据的完整性，是不可靠的传输，也因此开销小，效率高。<br>\n适用场景：音频、视频和普通数据传输，如视频会议，视频通话等。</p>\n</li>\n<li>\n<p>TCP：传输控制协议 TCP（Transmission Control Protocol）是一种<strong>面向连接的、可靠的、基于字节流</strong>的传输层通信协议。<br>\n发送前必须建立 TCP 连接，形成基于字节流的传输数据通道，点对点传输，并有重发机制，是可靠的传输。传输完成后需要释放已建立的连接，开销较 UDP 大，效率较低。<br>\n当对网络通信质量有要求时，需要使用 TCP 协议。<br>\nTCP 建立连接和释放连接的过程被称为 “三握四挥”。</p>\n</li>\n<li>\n<p>三次握手：<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/computerscience/java-note/TCP01.2kik7qqtexu0.webp\" alt=\"TCP三次握手\"></p>\n<ol>\n<li>第一次握手\n<ul>\n<li>客户端向服务端发送请求，首部同步位 SYN=1，选择一个初始序号 seq=x</li>\n<li>SYN 报文段不携带数据，需要消耗一个序号</li>\n<li>客户进程进入 SYN-SENT（同步已发送）状态</li>\n</ul>\n</li>\n<li>第二次握手\n<ul>\n<li>服务器收到 SYN 报文 =&gt; 同意连接 =&gt; 服务器为 TCP 连接分配缓存和变量 =&gt; 向客户端返回确认报文段</li>\n<li>同步位 SYN=1，确认位 ACK=1，确认号 ack=x+1，为自己随机选择一个初始序号 seq=y</li>\n<li>确认报文段不能携带数据，需要消耗一个序号</li>\n<li>服务器进程进入 SYN-RCVD（同步收到）状态</li>\n</ul>\n</li>\n<li>第三次握手\n<ul>\n<li>客户进程收到服务器进程的确认报文 =&gt; 客户端为 TCP 连接分配缓存和变量</li>\n<li>向服务器端返回一个报文段，对服务器确认报文进行确认</li>\n<li>报文中 ACK=1，确认号 ack=y+1，自己序号 seq=x+1</li>\n<li>客户端进入 ESTABLISHED（已建立连接）状态</li>\n<li>此时 TCP 连接已经建立，服务器收到客户端的确认后，进入 ESTABLISHED 状态</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>四次挥手：<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/computerscience/java-note/TCP02.4vw8irdvnwk0.webp\" alt=\"TCP四次挥手\"></p>\n<ol>\n<li>第一次挥手\n<ul>\n<li>客户端向服务端发出连接释放报文段 =&gt; 停止发送数据，主动关闭连接</li>\n<li>报文中终止控制 FIN=1，序号 seq=u（值等于前面已传送的数据的最后一个字节的序号 + 1）</li>\n<li>客户端进入 FIN-WAIT-1（终止等待 1 状态）</li>\n</ul>\n</li>\n<li>第二次挥手\n<ul>\n<li>服务器收到连接释放报文段后发出确认</li>\n<li>确认位 ACK=1，确认号 ack=u+1，序号 seq=v（值等于服务器前面已传送过的数据最后一个字节的序号 + 1）</li>\n<li>服务器进入 CLOSE-WAIT（关闭等待）状态</li>\n<li>此时 TCP 连接处于半关闭状态，客户端到数据段的连接释放，但是服务器还可以向客户端发送文件，且客户端需接受</li>\n<li>客服端收到服务器的确认 =&gt; 进入 FIN-WAIT-2（终止等待 2）状态，等待服务器发出的连接释放报文段</li>\n</ul>\n</li>\n<li>第三次挥手\n<ul>\n<li>服务器发出连接释放报文段，FIN=1，报文序号 seq=w（在半关闭状态下服务器可能又发送了一些数据）</li>\n<li>服务器重复上次已发送到确认号 ack=u+1</li>\n<li>服务器进入 LAST-ACK（最后确认状态），等待客户端的确认</li>\n</ul>\n</li>\n<li>第四次挥手\n<ul>\n<li>客户端收到服务器端发出的连接释放报文 =&gt; 对此发出确认，将确认位 ACK 置为 1，确认号 ack=w+1，序号 seq=u+1</li>\n<li>客户端进入 TIME-WAIT（时间等待状态）</li>\n<li>在经过时间等待计时器设置的 2 个 MSL（最大报文段寿命）后，客户端进入 CLOSE（关闭）状态</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<p><code>java.net</code>  包中提供了对这两种常见网络协议的支持。</p>\n<h3 id=\"tcp-编程\"><a class=\"markdownIt-Anchor\" href=\"#tcp-编程\">#</a> TCP 编程</h3>\n<p>网络上具有唯一标识的 IP 地址和端口号组合在一起构成唯一能识别的标识符套接字（Socket）。<br>\n套接字使用 TCP 提供了两台计算机之间的通信，程序将网络连接视作一个流，数据在两个 <code>Socket</code>  间通过 IO 传输。<br>\nJava 中也通过 <code>Socket</code>  和 <code>ServerSocket</code>  这两个类实现对 TCP 的支持。</p>\n<h4 id=\"基本流程\"><a class=\"markdownIt-Anchor\" href=\"#基本流程\">#</a> 基本流程</h4>\n<p><code>Socket</code>  代表客户端， <code>ServerSocket</code>  代表服务端，Java 程序可以通过这两个类的对象，来实现 TCP 通信：</p>\n<ol>\n<li>服务器实例化一个 <code>ServerSocket</code>  对象，并绑定到一个通信端口。</li>\n<li>服务器调用 <code>ServerSocket</code>  的 <code>accept()</code>  方法，该方法将一直等待，直到客户端连接到服务器的绑定端口。</li>\n<li>客户端实例化一个 <code>Socket</code>  对象，指定服务器名称和端口来请求连接。</li>\n<li><code>Socket</code>  类的构造函数将客户端连接到指定的服务器和端口。如果通信被建立，则在客户端创建一个 <code>Socket</code>  对象与服务器进行通信。</li>\n<li>服务器端的 <code>accept()</code>  方法返回服务器上一个新的 <code>Socket</code>  引用，该引用连接到客户端的 <code>Socket</code> 。</li>\n</ol>\n<p>在连接建立后，就可以使用 IO 流来进行通信。每个 <code>Socket</code>  都有一个输出流和一个输入流。客户端的输出流会连接到服务端的输入流，而客户端的输入流则连接到服务端的输出流。</p>\n<h4 id=\"socket\"><a class=\"markdownIt-Anchor\" href=\"#socket\">#</a> Socket</h4>\n<ul>\n<li>构造方法\n<ul>\n<li><code>Socket(InetAddress address, int port) throws IOException</code></li>\n<li><code>Socket(String host, int port) throws UnknownHostException, IOException</code> <br>\n 创建一个套接字并将其连接到指定 IP 地址或指定主机的指定端口上。</li>\n</ul>\n</li>\n<li>常用方法\n<ul>\n<li><code>InputStream getInputStream()</code> ：返回此套接字的输入流，可用于接受消息。</li>\n<li><code>OutputStream getOutputStream()</code> ：返回此套接字的输出流，可拥有发送消息。</li>\n<li><code>InetAddress getInetAddress()</code> ：返回此套接字连接到的远程 IP 地址。</li>\n<li><code>int getPort()</code> ：返回此套接字绑定的远程端口号。</li>\n<li><code>int getLocalPort()</code> ：返回此套接字绑定的本地端口号。</li>\n<li><code>void close()</code> ：关闭此套接字。关闭后不可再次使用，需要重新建立新的套接字对象。</li>\n<li><code>void shutdownInput()</code> ：关闭套接字输入流，不能再从此套接字中读取数据。</li>\n<li><code>void shutdownOutput()</code> ：关闭套接字输出流，不能再通过此套接字发送数据。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"serversocket\"><a class=\"markdownIt-Anchor\" href=\"#serversocket\">#</a> ServerSocket</h4>\n<ul>\n<li>构造方法\n<ul>\n<li><code>ServerSocket(int port) throws IOException</code> ：创建绑定到 <code>port</code>  端口的服务器套接字。</li>\n</ul>\n</li>\n<li>常用方法\n<ul>\n<li><code>Socket accept() throws IOException</code> ：侦听并接受到此套接字的连接。</li>\n</ul>\n</li>\n</ul>\n<p>一个简单的示例，通过客户端向服务端上传文件：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Server.class 服务端代码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Server</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 监听本机 6666 端口</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">ServerSocket</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerSocket</span><span class=\"token punctuation\">(</span><span class=\"token number\">6666</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 创建字节数组缓冲数据</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 死循环，处理客户端的连接</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// 建立连接并通过 BufferedOutputStream 将客户端的文件写到服务端</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">Socket</span> s <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token class-name\">InputStream</span> is <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">BufferedOutputStream</span> bos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token constant\">UUID</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"file\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">=</span> is<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                bos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">// 完成后向客户端返回处理结果</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token class-name\">OutputStream</span> os <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            os<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"All is done.\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">// 关流，释放资源</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            bos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            s<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// Client.class 客户端代码</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Client</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 与指定主机的端口建立连接</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">Socket</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Socket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6666</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 通过 BufferedInputStream 读取传输文件并传输给服务端</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">OutputStream</span> os <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">BufferedInputStream</span> bis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"source_file\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">=</span> bis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            os<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// 文件发送完成后关闭输出流</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        client<span class=\"token punctuation\">.</span><span class=\"token function\">shutdownOutput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token comment\">// 接受客户端的响应信息</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token class-name\">InputStream</span> is <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        len <span class=\"token operator\">=</span> is<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token comment\">// 关流，释放资源</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        bis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        client<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>以上代码只是一个非常简单的展示客户端与服务端通信的示例，实际中有非常多可以优化的地方，例如：<br>\n可以使用多线程方式或线程池的方式优化服务端与客户端的代码；又例如，可以使用 <code>try...catch...finally</code>  的语句来对异常和关流等操作进行处理等。</p>\n<h3 id=\"udp-编程\"><a class=\"markdownIt-Anchor\" href=\"#udp-编程\">#</a> UDP 编程</h3>\n<p>UDP 是面向非连接的、不可靠的协议，UDP 会尽最大努力交付数据，但不保证可靠交付。与 TCP 相比，UDP 的优势在于速度较快，无需建立连接，节省资源。<br>\nJava 中提供了 <code>DatagramSocket</code>  和 <code>DatagramPacket</code>  两个类实现了基于 UDP 的网络程序。<br>\n使用 UDP 协议时的一个大致的流程如下：</p>\n<ol>\n<li>服务器端指定要监听的端口。</li>\n<li>客户端指定服务器端的 IP 地址和端口号。</li>\n<li>双方通过 <code>send()</code>  和 <code>receive()</code>  发送和接收数据。</li>\n</ol>\n<p>因为 <code>DatagramSocket</code>  没有 IO 流接口，所以发送和接收的数据会直接写入指定的 <code>byte[]</code>  缓冲区。<br>\n一个简单的示例如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 服务端，UDPServer.class</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UDPServer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 监听 6666 端口</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">DatagramSocket</span> ds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DatagramSocket</span><span class=\"token punctuation\">(</span><span class=\"token number\">6666</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 通过缓冲数组，收取 UDP 数据包</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">DatagramPacket</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DatagramPacket</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 获取数据包中的数据</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">.</span><span class=\"token function\">getLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">+</span> dp<span class=\"token punctuation\">.</span><span class=\"token function\">getAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 向客户端发送数据</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        dp<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"received\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 关流，释放资源</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 客户端，UDPClient.class</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UDPClient</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 指定发送数据包的主机和端口</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">DatagramSocket</span> ds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DatagramSocket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InetAddress</span><span class=\"token punctuation\">.</span><span class=\"token function\">getByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6666</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 通过缓冲数组向服务端发送 UDP 数据包</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello,World!\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">DatagramPacket</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DatagramPacket</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// 接受并获取服务端的返回数据</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DatagramPacket</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">// 断开连接，关流释放资源</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "编程学习",
                "Java基础",
                "Java",
                "Java学习"
            ]
        },
        {
            "id": "https://www.umi.homes/posts/4cdb/",
            "url": "https://www.umi.homes/posts/4cdb/",
            "title": "异常处理与多线程",
            "date_published": "2023-05-03T16:00:00.000Z",
            "content_html": "<h2 id=\"异常\"><a class=\"markdownIt-Anchor\" href=\"#异常\">#</a> 异常</h2>\n<h3 id=\"异常概述\"><a class=\"markdownIt-Anchor\" href=\"#异常概述\">#</a> 异常概述</h3>\n<p>异常是指在 Java 程序运行过程中可能出现的一些错误，它可能由程序员没有预料到的各种情况产生，也可能由超出了程序员可控范围的环境因素产生。<br>\n <code>Throwable</code>  类是所有错误（Error）和异常（Exception）的父类，只有  <code>Throwable</code>  类型的实例才可以抛出（throw）或者捕获（catch）。</p>\n<ul>\n<li>\n<p><code>Error</code></p>\n<ul>\n<li>\n<p><code>Error</code>  表示严重的错误，绝大部分 <code>Error</code>  会导致程序处于非正常的、不可恢复的状态。</p>\n</li>\n<li>\n<p><strong>编译器不会检查 <code>Error</code> </strong>。</p>\n</li>\n<li>\n<p>常见错误有：</p>\n<table>\n<thead>\n<tr>\n<th>错误</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>AssertionError</code></td>\n<td>断言错误</td>\n</tr>\n<tr>\n<td><code>VirtualMachineError</code></td>\n<td>虚拟机错误</td>\n</tr>\n<tr>\n<td><code>UnsupportedClassVersionError</code></td>\n<td>Java 类版本错误</td>\n</tr>\n<tr>\n<td><code>StackOverflowError</code></td>\n<td>栈溢出错误</td>\n</tr>\n<tr>\n<td><code>OutOfMemoryError</code></td>\n<td>内存溢出错误</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n</li>\n<li>\n<p><code>Exception</code></p>\n<ul>\n<li>\n<p><code>Exception</code>  是程序运行中出现的意外情况，可以被捕获，并进行相应处理。</p>\n</li>\n<li>\n<p>编译器会检查可检查的 <code>Exception</code> ，如果没有进行异常处理，则不能通过编译。</p>\n</li>\n<li>\n<p>常见异常有：</p>\n<table>\n<thead>\n<tr>\n<th>异常</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ClassNotFoundException</code></td>\n<td>应用程序加载类时，找不到相应的类，抛出该异常</td>\n</tr>\n<tr>\n<td><code>CloneNotSupportedException</code></td>\n<td>调用 <code>clone</code>  方法克隆对象，但该对象的类没有实现 <code>Cloneable</code>  接口时，抛出该异常</td>\n</tr>\n<tr>\n<td><code>IllegalAccessException</code></td>\n<td>拒绝访问一个类的时候，抛出该异常</td>\n</tr>\n<tr>\n<td><code>InstantiationException</code></td>\n<td>当使用 <code>Class</code>  类中的 <code>newInstance</code>  方法创建一个类的实例，而指定的类对象无法实例化，抛出该异常</td>\n</tr>\n<tr>\n<td><code>NoSuchFieldException</code></td>\n<td>请求的变量不存在</td>\n</tr>\n<tr>\n<td><code>NoSuchMethodException</code></td>\n<td>请求的方法不存在</td>\n</tr>\n<tr>\n<td><code>SocketException</code></td>\n<td>读取网络失败</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n</li>\n<li>\n<p><code>RuntimeException</code></p>\n<ul>\n<li>\n<p><code>RuntimeException</code>  表示运行时异常，是 <code>Exception</code>  的一个子类。</p>\n</li>\n<li>\n<p><strong>编译器不会检查运行时异常</strong>，可能导致运行时异常的语句没有异常处理也可以通过编译。</p>\n</li>\n<li>\n<p>常见编译时异常：</p>\n<table>\n<thead>\n<tr>\n<th>运行时异常</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>NullPointerEXception</code></td>\n<td>当对 <code>null</code>  调用方法或字段时，抛出该异常</td>\n</tr>\n<tr>\n<td><code>IndexOutOfBoundsException</code></td>\n<td>当对某排序索引值超出范围时抛出该异常</td>\n</tr>\n<tr>\n<td><code>StringIndexOutOfBoundsException</code></td>\n<td>当对字符串使用错误索引值时，抛出该异常</td>\n</tr>\n<tr>\n<td><code>ClassCastException</code></td>\n<td>当强制将对象转换为不是实例的子类时，抛出该异常</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n</li>\n</ul>\n<p>Java 规定：</p>\n<ul>\n<li>必须捕获的异常：包括 <code>Exception</code>  及其所有非 <code>RuntimeException</code>  子类，这类异常被称为可检查的异常（Checked Exception）。</li>\n<li>不需要捕获的异常：包括 <code>Error</code>  及其子类， <code>RuntimeException</code>  及其子类。</li>\n</ul>\n<h3 id=\"异常处理\"><a class=\"markdownIt-Anchor\" href=\"#异常处理\">#</a> 异常处理</h3>\n<h4 id=\"抛出异常\"><a class=\"markdownIt-Anchor\" href=\"#抛出异常\">#</a> 抛出异常</h4>\n<p><code>throw</code>  和 <code>throws</code>  用于抛出异常。<br>\n <code>throw</code>  放在方法体中，后面抛出异常对象。<br>\n <code>throws</code>  放在方法签名的尾部，后面接异常类型，多个异常类型可以用 <code>,</code>  隔开。<br>\n在方法重写中，如果父类的方法抛出了异常，子类重写的方法可以不用抛出异常；但是<strong>如果父类方法没有抛出异常，则子类一定也不能抛出异常</strong>。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main do something...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//throws 在方法签名后，这里 RuntimeException 体现了多态</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">//throw 在方法内，需要手动抛出一个异常对象</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//throw 语句手动抛出异常，它后面的代码也不会执行</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f do something...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行结果如下，可以看到异常抛出后也阻止了程序之后的运行：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Exception <span class=\"token keyword\">in</span> thread <span class=\"token string\">\"main\"</span> java.lang.NullPointerException</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tat Main.f<span class=\"token punctuation\">(</span>Main.java:12<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tat Main.main<span class=\"token punctuation\">(</span>Main.java:7<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>抛出的错误会到调用它的方法中处理，如果没有被处理，则会继续抛给这个调用方法的上层方法，这个过程会一直持续到异常被处理或者到达 <code>main()</code>  方法。<br>\n如果 <code>main()</code>  方法中也没有处理异常，则 JVM 会将异常信息打印到控制台上并终止程序运行。<br>\nJava 中使用 <code>try...catch...finally</code>  捕获并处理异常。</p>\n<h4 id=\"捕获异常\"><a class=\"markdownIt-Anchor\" href=\"#捕获异常\">#</a> 捕获异常</h4>\n<p><code>try...catch...finally</code>  语句中，可以只有 <code>try...catch</code>  或 <code>try...finally</code> ，一个示例如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 可能产生异常的语句</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 异常处理</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 无论是否发生异常都要执行的语句</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>如果执行过程中， <code>try</code>  中的代码没有发生异常，则所有 <code>catch</code>  分支都不执行；</li>\n<li>如果 <code>try</code>  中的代码发生了异常，则（如果有多个）根据 <code>catch</code>  的异常类型，从上到下<strong>执行匹配到的第一个 <code>catch</code>  语句</strong>，其他 <code>catch</code>  语句不再执行；</li>\n<li>当使用多个 <code>catch</code>  语句时，如果异常类型间有子父类关系，子类的异常类型需要放在父类的异常类型上；</li>\n<li><code>finally</code>  中的语句时无论是否发生异常都会执行的内容，因此常用于关闭资源的场景。</li>\n</ul>\n<p><code>catch</code>  中常用的异常处理方法：</p>\n<ul>\n<li><code>toString()</code> ：获取异常的类型和异常的描述信息。</li>\n<li><code>getMessage()</code> ：获取异常的描述信息，原因。</li>\n<li><code>printStackTrace()</code> ：打印异常的跟踪栈信息并输出到控制台上。</li>\n</ul>\n<h4 id=\"使用说明\"><a class=\"markdownIt-Anchor\" href=\"#使用说明\">#</a> 使用说明</h4>\n<p>如果程序代码中，<strong>涉及到资源的调用（流、数据库连接、网络连接等），必须考虑 <code>try..catch...finally</code>  处理</strong>，保证不出现内存泄露；<br>\n如果程序各方法间是递进调用关系，可以考虑使用 <code>throws</code> ，然后在最上层的方法中使用 <code>try...catch...finally</code>  处理。</p>\n<h3 id=\"自定义异常\"><a class=\"markdownIt-Anchor\" href=\"#自定义异常\">#</a> 自定义异常</h3>\n<p>当代码中需要抛出异常时，尽量使用 JDK 中已经定义的异常类型，但是当 JDK 中的异常类型不能满足业务常见需求时，也可以自定义异常。<br>\n自定义异常是一个异常类，只需要继承 <code>Exception</code>  或 <code>RuntimeException</code>  即可：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LoginException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LoginException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>自定义异常最重要的是名字和 <code>message</code>  信息，可以帮助异常发生时进行快速定位。<br>\n自定义异常只能手动抛出，然后由 <code>try...catch</code>  进行处理。</p>\n<h3 id=\"最佳实践\"><a class=\"markdownIt-Anchor\" href=\"#最佳实践\">#</a> 最佳实践</h3>\n<ul>\n<li>对可恢复的情况使用检查性异常（ <code>Exception</code> ），对编程错误使用运行时异常（ <code>RuntimeException</code> ），并且尽可能使用 Java 标准的异常。</li>\n<li>尽量减少 <code>try</code>  代码块的大小，并且尽可能 <code>catch</code>  较小的异常范围。</li>\n<li>尽量不要在 <code>finally</code>  抛出异常或者返回值，<strong>因为 <code>finally</code>  中的 <code>throw</code>  和 <code>return</code>  会覆盖 <code>catch</code>  中的语句</strong>。</li>\n<li>不要忽略异常，如果捕获了异常，就应该处理，即使只是将异常记录到日志文件中，也不要直接丢弃。</li>\n<li>各类异常应该进行分类管理，如可分为：逻辑异常（用户制造的意外）、代码错误（程序编写导致的 BUG）和专有异常（特定业务常景的异常）。</li>\n</ul>\n<blockquote>\n<p>异常设计的初衷是解决程序运行中的各种意外情况，且异常的处理效率比条件判断方式要低很多。</p>\n</blockquote>\n<p><strong>不要用异常进行业务逻辑处理</strong>。在业务处理的时候，如果发现无法处理直接抛出异常即可，而不是在逻辑处理的时候，用异常来判断逻辑进行的状况。</p>\n<h3 id=\"断言和日志\"><a class=\"markdownIt-Anchor\" href=\"#断言和日志\">#</a> 断言和日志</h3>\n<h4 id=\"断言\"><a class=\"markdownIt-Anchor\" href=\"#断言\">#</a> 断言</h4>\n<p>断言（Assertion）是一种程序调试的方式，Java 中使用 <code>assert</code>  关键字实现。<br>\n断言失败时会抛出 <code>AssertionError</code>  错误，导致程序结束退出。因此，断言不能用于可恢复的程序错误，只能用于开发和测试阶段。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 使用 assert 实现断言，并且可以带上字符串消息以便于调试</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">assert</span> x <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"x must >= 0\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>JVM 默认关闭了断言指令，希望执行 <code>assert</code>  语句需要给 JVM 传递 <code>-enableassertions</code>  参数才行，所以上述程序的执行如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">java</span> <span class=\"token parameter variable\">-enableassertions</span> Main.java</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Exception <span class=\"token keyword\">in</span> thread <span class=\"token string\">\"main\"</span> java.lang.AssertionError: x must <span class=\"token operator\">>=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        at Main.main<span class=\"token punctuation\">(</span>Main.java:7<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>实际开发中，断言很少被使用，更好的方式是编写单元测试。</p>\n<h4 id=\"日志\"><a class=\"markdownIt-Anchor\" href=\"#日志\">#</a> 日志</h4>\n<p>Java 标准库中内置了一个日志包 <code>java.util.logging</code> ，它可以用于日志输出。<br>\n日志的目的是为了替代 <code>System.out.println()</code>  一类的输出，它可以定义格式、重定向文件等。<br>\n日志记录可以按级别分类，也可以进行存档，能更加方便地追踪问题。<br>\n使用 Java 自带的日志示例如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>logging<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Logger</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Logging</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Logger</span> log <span class=\"token operator\">=</span> <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">getGlobal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">finest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finest\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">finer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">fine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fine\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"info\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">warning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"warning\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">severe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"server\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>输出信息如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">5</span>月 05, <span class=\"token number\">2023</span> <span class=\"token number\">9</span>:06:31 上午 Logging main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>信息: info</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">5</span>月 05, <span class=\"token number\">2023</span> <span class=\"token number\">9</span>:06:31 上午 Logging main</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>警告: warning</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">5</span>月 05, <span class=\"token number\">2023</span> <span class=\"token number\">9</span>:06:31 上午 Logging main</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>严重: server</pre></td></tr></table></figure><p>JDK 的日志定义了 7 个日志级别，分别从 <code>SEVERE</code>  到 <code>FINEST</code> 。默认的处理只能处理 <code>INFO</code>  和以上的级别，如果需要打印 <code>INFO</code>  以下的级别需要手动调整：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>logging<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ConsoleHandler</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>logging<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Level</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>logging<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Logger</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Logging</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Logger</span> log <span class=\"token operator\">=</span> <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">getGlobal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 设置 logger 接受所有等级的日志</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">setLevel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Level</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ALL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 添加一个新的控制器，并接受所有等级的日志</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">ConsoleHandler</span> handler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConsoleHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        handler<span class=\"token punctuation\">.</span><span class=\"token function\">setLevel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Level</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ALL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">addHandler</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 关闭父处理器</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">setUseParentHandlers</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">fine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fine\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>成功打印 <code>FINE</code>  级别的日志信息</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">5</span>月 05, <span class=\"token number\">2023</span> <span class=\"token number\">9</span>:21:26 上午 Logging main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>详细: fine</pre></td></tr></table></figure><p>虽然 Java 标准库中内置了日志工具，但是因为它的使用存在诸多局限，实际的应用并不广泛，在实际使用时更多使用第三方的日志库。</p>\n<h2 id=\"多线程\"><a class=\"markdownIt-Anchor\" href=\"#多线程\">#</a> 多线程</h2>\n<p>Java 内置了多线程支持，多线程模型是 Java 程序的最基本一种迸发模型。</p>\n<h3 id=\"基础概念\"><a class=\"markdownIt-Anchor\" href=\"#基础概念\">#</a> 基础概念</h3>\n<h4 id=\"线程与进程\"><a class=\"markdownIt-Anchor\" href=\"#线程与进程\">#</a> 线程与进程</h4>\n<ul>\n<li>程序（program）：为完成特定任务，用某种语言编写的一组指令的集合。</li>\n<li>软件（software）：一个或多个应用程序和相关的资源文件构成一个软件系统。</li>\n<li>进程（process）：程序的一次执行过程，是对整个过程（创建 - 运行 - 消亡）的描述。系统会为每个运行的程序建立一个进程，并为进程分配独立的系统资源。</li>\n<li>线程（thread）：程序内部的一条执行路径，是进程中的一个执行单元，一个进程中至少有一个线程。一个进程中并行多个线程，这个程序可以称为多线程程序。<div class=\"note info\">\n<p>多线程可以充分利用 CPU 空闲时间片，用尽可能短的时间完成用户的请求，使程序的响应速度更快 。</p>\n</div>\n</li>\n</ul>\n<h4 id=\"并行与并发\"><a class=\"markdownIt-Anchor\" href=\"#并行与并发\">#</a> 并行与并发</h4>\n<ul>\n<li>\n<p>并行（parallel）：指多个事件在同一时刻发生（同时发生）。指在同一时刻，有多条指令在多个 CPU 上同时执行。单核 CPU 同一时刻只能处理一条指令，做不到并行处理。</p>\n</li>\n<li>\n<p>并发（concurrency）：指多个事件在<strong>同一个微小的时间段内发生</strong>。同一个时刻虽然只能有一条指令执行，但多个进程的指令被快速轮换执行，使得在宏观上具有多个进程同时执行的效果。程序并发执行可以在有限条件下，充分利用 CPU 资源。</p>\n<div class=\"note info\">\n<p>单核处理器<strong>不能并行</strong>处理多个任务，只能是多个任务的并发运行。同理，线程也是一样的。从宏观角度上理解线程是并行运行的，但是从微观角度上分析却是串行运行的，即一个线程一个线程的去运行，当系统只有一个 CPU 时，线程会以某种顺序执行多个线程，这种情况被称为线程调度。</p>\n</div>\n</li>\n</ul>\n<h4 id=\"线程调度\"><a class=\"markdownIt-Anchor\" href=\"#线程调度\">#</a> 线程调度</h4>\n<p>CPU 资源分配给不同线程的方式，常见的线程调度方式有两种：</p>\n<ol>\n<li>\n<p>分时调度<br>\n分时调度模型是指让所有的线程轮流获得 CPU 的使用权，平均分配每个线程占用 CPU 的时间片</p>\n</li>\n<li>\n<p>抢占式调度<br>\n优先让可运行池中优先级高的线程占用 CPU，如果可运行池中的线程优先级相同，那么就随机选择一个线程，使其占用 CPU。<br>\n处于运行状态的线程会一直运行，直至它不得不放弃 CPU。<br>\n<strong>Java 采用的是抢占式调度方式</strong>。</p>\n<div class=\"note info\">\n<p>Java 的一个线程可能会因为以下原因而放弃 CPU。</p>\n<ol>\n<li>JVM 让当前线程暂时放弃 CPU，转到就绪状态</li>\n<li>当前线程因为某些原因而进入阻塞状态</li>\n<li>线程结束运行</li>\n</ol>\n</div>\n</li>\n</ol>\n<h3 id=\"创建线程\"><a class=\"markdownIt-Anchor\" href=\"#创建线程\">#</a> 创建线程</h3>\n<p>Java 中有三种方式可以创建线程：</p>\n<ol>\n<li>继承 <code>Thread</code>  类</li>\n<li>实现 <code>Runnable</code>  接口</li>\n<li>实现 <code>Callable</code>  接口</li>\n</ol>\n<h4 id=\"继承-thread\"><a class=\"markdownIt-Anchor\" href=\"#继承-thread\">#</a> 继承 Thread</h4>\n<p><code>Thread</code>  类实现方式中，每个线程都是通过某个 <code>Thread</code>  对象的 <code>run()</code>  方法来完成操作的。</p>\n<ul>\n<li><code>run()</code>  方法被 <code>Thread</code>  的子类重写，其方法体中代表线程需要完成的任务，因此又称其为线程执行体。</li>\n<li><code>run()</code>  方法不是直接调用，而是通过子类对象的 <code>start()</code>  方法来启动，想实现多线程，需要创建多个线程对象。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// MyThread.java</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyThread</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"线程执行中\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 测试类</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestMyThread</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">MyThread</span> m1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        m1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">MyThread</span> m2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        m2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>执行结果如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Thread-1线程执行中0</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Thread-0线程执行中0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Thread-1线程执行中1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Thread-0线程执行中1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Thread-1线程执行中2</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Thread-0线程执行中2</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Thread-1线程执行中3</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Thread-0线程执行中3</pre></td></tr></table></figure><p>可以看出，代码并非按照书写顺序执行。</p>\n<p><code>run()</code>  方法通过 <code>start()</code>  方法由 JVM 调用，具体过程控制由于操作系统的 CPU 调度实现。<br>\n要想启动多线程必须调用 <code>start()</code>  方法，一个线程对象只能调用一次 <code>start()</code>  方法，否则会抛出 <code>IllegalThreadStateException</code>  异常。</p>\n<p><code>Thread</code>  中的常用方法如下：</p>\n<ul>\n<li>构造方法： <code>Thread</code>  的构造方法通过重载可以接受两个参数， <code>Runnable target</code>  和 <code>String name</code> 。\n<ul>\n<li><code>target</code>  用于指定创建线程的目标对象，它实现了 <code>Runnable</code>  接口中的 <code>run()</code>  方法。</li>\n<li><code>name</code>  是一个字符串，用于指定线程对象的名字。可以调用对应的 <code>setter/getter</code>  方法设置。</li>\n</ul>\n</li>\n<li><code>public void start()</code> ：线程开始执行，JVM 会自动调用线程的 <code>run()</code>  方法。 <code>run()</code>  方法不应该手动调用，如果手动调用则只是普通的方法，没有开启多线程。</li>\n<li><code>public static Thread currentThread()</code> ：返回对当前正在执行的线程对象的引用。在 <code>Thread</code>  子类中就是 <code>this</code> ，通常用于主线程和 <code>Runnable</code>  实现类。</li>\n<li><code>public static void sleep(long millis)</code> ：使当前正在执行的线程以指定的毫秒数暂停（暂时停止执行）。</li>\n<li><code>public static void yield()</code> ：让当前线程暂停一下，使系统的线程调度器重新调度一次，希望优先级与当前线程相同或更高的其他线程能够获得执行机会。</li>\n<li><code>public final boolean isAlive()</code> ：测试线程是否处于活动状态。如果线程已经启动且尚未终止，则为活动状态。</li>\n<li>优先级相关方法：Java 为抢占式调度，优先级高的线程会获得较多的执行机会。每个线程的默认优先级和创建它的父类相同，同时也可以进行指定：\n<ul>\n<li>优先级常量：<br>\n <code>MAX_PRIORITY</code> ：10，最高优先级<br>\n <code>MIN_PRIORITY</code> ：1，最低优先级<br>\n <code>NORM_PRIORITY</code> ：5，普通优先级，默认</li>\n<li><code>public final int getPriority()</code> ：返回线程优先级</li>\n<li><code>public final void setPriority(int newPriority)</code> ：设置线程优先级，范围 1~10</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"实现-runnable\"><a class=\"markdownIt-Anchor\" href=\"#实现-runnable\">#</a> 实现 Runnable</h4>\n<p>Java 的类只能单继承，因此继承 <code>Thread</code>  类启动线程的方式存在一定限制。<br>\n核心类库中提供了 <code>Runnable</code>  接口，可以在无法继承 <code>Thread</code>  类的时候通过实现接口的方式使用多线程。<br>\n通过实现 <code>Runnable</code>  接口创建线程：</p>\n<ol>\n<li>定义 <code>Runnable</code>  接口的实现类，并重写 <code>run()</code>  方法。</li>\n<li>创建 <code>Runnable</code>  实现类的实例，并以此实例作为 <code>Thread</code>  的 <code>target</code>  创建 <code>Thread</code>  对象，<strong>这个 <code>Thread</code>  对象才是真正的线程对象</strong></li>\n<li>调用线程对象的 <code>start()</code>  方法启动线程</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// MyRunnable.java，Runnable 接口实现类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyRunnable</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Runnable\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"My Runnable Function.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 测试类</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestRunnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">Thread</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyRunnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        a<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接口的实现方式，还可以进一步利用匿名内部类和 <code>lambda</code>  表达式方式简写：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestRunnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 匿名内部类</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"匿名内部类\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//lambda 表达式</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Lambda表达式\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在处理异常时，继承的 <code>Thread</code>  可以使用 <code>throws</code>  抛出，也可以通过 <code>try...catch</code>  捕获。而直接实现的 <code>Runnable</code>  只能使用 <code>try...catch</code> 。<br>\n相比继承的方式，实现 <code>Runnable</code>  接口的方式更加灵活，避免了单继承的局限性。</p>\n<h4 id=\"callable-接口\"><a class=\"markdownIt-Anchor\" href=\"#callable-接口\">#</a> Callable 接口</h4>\n<p>继承 <code>Thread</code>  和实现 <code>Runnable</code>  两种创建线程方式没有返回值，如果期望得到执行结果，JDK5 后提供了 <code>Callable</code>  这个接口：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Callable 接口只声明了一个 `call ()` 方法：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * Computes a result, or throws an exception if unable to do so.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    *</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    * @return computed result</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    * @throws Exception if unable to compute a result</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">V</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以将 <code>Callable</code>  和 <code>call()</code>  方法与 <code>Runnable</code>  和 <code>run()</code>  方法对比， <code>call()</code>  方法有返回值，可以抛出异常，而 <code>run()</code>  方法不行。</p>\n<p>一般情况下， <code>Callable</code>  可以配合 <code>ExecutorService</code>  来使用，这个接口中声明了若干个重载的 <code>submit()</code>  方法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> task<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>Future</code>  接口可以对具体的 <code>Callable</code>  任务进行取消、查询情况获取结果等。使用 <code>get()</code>  方法获取执行结果，该方法会阻塞直到任务返回结果。<br>\n <code>FutureTask</code>  是 <code>Future</code>  的唯一一个实现类，它实现了 <code>RunnableFuture</code>  接口，而这个接口是继承自 <code>Runnable</code>  和 <code>Future</code>  接口的：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">RunnableFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FutureTask</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> callable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FutureTask</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> runnable<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">RunnableFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>因此， <code>FutureTask</code>  即可作为 <code>Runnable</code>  被线程执行，也可以作为 <code>Future</code>  得到 <code>Callable</code>  的返回值：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Callable</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ExecutionException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FutureTask</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 实现 Callable 的 call 方法</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCallable</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"This is MyCallable.\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// Callable 的实现类实例化传给 FutureTask</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyCallable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// FutureTask 对象作为 Thread 对象的 target 创建并启动线程</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        t<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 使用 FutureTask 的 get 方法获得线程结束后的返回值</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Info:\"</span><span class=\"token operator\">+</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">ExecutionException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"使用线程\"><a class=\"markdownIt-Anchor\" href=\"#使用线程\">#</a> 使用线程</h3>\n<h4 id=\"线程安全\"><a class=\"markdownIt-Anchor\" href=\"#线程安全\">#</a> 线程安全</h4>\n<p>当多个线程同时运行时，如果多个线程对资源同时进行读写操作，就容易出现线程安全问题，Java 中使用同步锁机制（synchronized）来解决多线程的安全问题，格式如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>任意对象<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 线程不安全的代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>synchronized</code>  中的代码块相当于上了锁，区块中的资源实行互斥访问。可以保证在同一个时刻，只有一个线程可以执行这些代码。<br>\n为了实现线程安全和线程同步，多个线程之间应该使用同一个锁对象：</p>\n<p>未上锁前：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">BookTicket</span> book <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BookTicket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BookTicket</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> total <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>total <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"抢到票：\"</span> <span class=\"token operator\">+</span> total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            total<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印中有如下结果，可以看到出线多个线程抢到同一张票的情况（线程不安全）：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>抢到票：100</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>抢到票：100</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>抢到票：100</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>抢到票：100</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>抢到票：97</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>抢到票：98</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>抢到票：99</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>抢到票：94</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr></table></figure><p>进行加锁操作确保线程安全：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">BookTicket</span> book <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BookTicket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BookTicket</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> total <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>total <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"抢到票：\"</span> <span class=\"token operator\">+</span> total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                total<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这种形式称之为<strong>同步代码块</strong>形式。<br>\n还可以直接在方法前用 <code>synchronized</code>  修饰，使其成为<strong>同步方法</strong>，改写如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>total <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"抢到票：\"</span> <span class=\"token operator\">+</span> total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        total<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>实际上同步方法中的默认锁对象就是使用 <code>this</code>  关键字指向的当前对象。如果是静态方法，那么默认的锁对象是 <code>类名.class</code> 。<br>\n在使用同步锁时要注意找到明确的线程不安全的代码。如果锁的范围小，不能解决问题；而如果锁的范围太大，会降低程序的运行效率，不能合理利用 CPU 资源。</p>\n<h4 id=\"线程通信\"><a class=\"markdownIt-Anchor\" href=\"#线程通信\">#</a> 线程通信</h4>\n<p>当使用多个线程来共同完成一件任务时，为了确保任务按照预期进行，就需要线程间的通信机制来协调多线程间的工作。<br>\n一种线程协调机制被称为等待唤醒机制。当一个线程满足某个条件时，使其进入等待状态，当其他线程执行完成指定任务后再将其唤醒。Java 线程中的 <code>wait/notify</code>  方法可以实现这种协作机制。</p>\n<ul>\n<li><code>wait()</code> ：线程不再活动，也不再竞争锁对象，如果它之前拥有锁，则会释放锁对象让其他线程竞争。 <code>wait</code>  可以传入等待时间，这样它将在等待时间结束后由系统唤醒，重新开始活动。又或者不设置时间，这样除非其他线程唤醒它，否则这个线程不会进入活动。</li>\n<li><code>notify()</code> ：随机选择一个进入等待中的线程进行唤醒， <code>notifyAll()</code>  方法将会唤醒所有线程。</li>\n</ul>\n<p><code>wait()</code>  和 <code>notify()</code>  方法必须在同步代码块或同步方法中使用，而且必须由同一个锁对象调用，它们都是属于 <code>Object</code>  类的方法。<br>\n利用线程通信机制实现一个生产消费的示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 生产消费：每生产一个内容，消费一个内容</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 必须要生产完后才能消费</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 要求不能连续生产，也不能连续消费</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Test</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 生产者线程，调用 produce 方法</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Thread</span> producer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                t<span class=\"token punctuation\">.</span><span class=\"token function\">produce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        producer<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 消费者线程，调用 consume 方法</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Thread</span> consumer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                t<span class=\"token punctuation\">.</span><span class=\"token function\">consume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费了第%d个内容\\n\"</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        consumer<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 是否可以消费</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 总计物品数量</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 消费方法，如果可以消费进行消费，消费完成后切换 flag 同时唤醒生产者线程</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">consume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费了第%d个内容\\n\"</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            flag <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>flag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>          <span class=\"token comment\">// 如果不能消费则进入 wait</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">// 生产方法，如果需要生产进行生产，生产完成后切换 flag 同时唤醒消费者线程</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">produce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token comment\">// 如果无需生产则进入 wait</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生产了第%d个内容\\n\"</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            flag <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>flag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>线程的 <code>sleep()</code>  方法同样可以使线程暂停一定时间，但是与 <code>wait()</code>  方法不同的是， <code>sleep()</code>  的<strong>线程不会释放锁对象</strong>，仍然为这个线程拥有。<br>\n当线程从 <code>sleep()</code>  中恢复后，这个线程可以直接继承执行，而不需要重新竞争资源。 <code>wait()</code>  的线程会释放锁对象，当它被唤醒后需要重新获得资源才能执行：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Wait.java</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Wait</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"10\"></td><td><pre>                        obj<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s耗时%dms\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// Sleep.java</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Sleep</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"30\"></td><td><pre>                        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s耗时%dms\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>两段代码的运行情况如下，可见两种方法的区别：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Wait.java</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Thread-1耗时1000ms</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Thread-4耗时1001ms</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Thread-3耗时1001ms</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Thread-2耗时1001ms</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Thread-0耗时1002ms</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># Sleep.java</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Thread-0耗时1002ms</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Thread-4耗时2000ms</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Thread-3耗时3000ms</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Thread-1耗时4001ms</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Thread-2耗时5001ms</pre></td></tr></table></figure><h4 id=\"线程池简介\"><a class=\"markdownIt-Anchor\" href=\"#线程池简介\">#</a> 线程池简介</h4>\n<p>线程池是一种多线程处理形式。处理过程中将任务添加到队列，然后在创建线程后自动启动这些任务。<br>\n使用线程池可以避免频繁创建、销毁线程的情况，可以降低资源消耗，提高响应速度并且便于线程的管理。<br>\nJava 中可以使用 <code>Executor</code>  框架来进行线程池的管理，包括 <code>Executor</code>  接口和其他扩展接口和类：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 创建线程池，指定创建的线程数，这里是 2 个</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">ExecutorService</span> es <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 提交线程任务，如果任务有返回值可以获得其返回值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        es<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"is running\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        es<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"is running\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        es<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"is running\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        es<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"is running\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 任务队列中的所有任务都执行完后终止，不再接受新的任务。</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        es<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行结果如下，这里交替使用了线程池中创建的两个线程，而没有新建和销毁线程：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pool-1-thread-1is running</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pool-1-thread-2is running</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pool-1-thread-2is running</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>pool-1-thread-1is running</pre></td></tr></table></figure><h3 id=\"线程状态\"><a class=\"markdownIt-Anchor\" href=\"#线程状态\">#</a> 线程状态</h3>\n<p><code>java.lang.Thread.State</code>  中定义了 6 种不同的线程状态，在给定的一个时刻，线程只能处于其中的一个状态。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token constant\">NEW</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token constant\">RUNNABLE</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token constant\">BLOCKED</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token constant\">WAITING</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token constant\">TIMED_WAITING</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token constant\">TERMINATED</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>新建（New）：<br>\n创建的线程尚未启动。<strong>创建后还未调用 <code>start()</code>  方法</strong>的线程处于此状态。</li>\n<li>就绪（Runnable）：<br>\n线程已经在 JVM 中运行。<strong>线程已经调用了 <code>start()</code>  方法</strong>，但在操作系统层面，它可能处于运行状态，也可能在等待资源调度，调度完成即可进入运行状态。此状态表明线程可以被运行。</li>\n<li>阻塞（Blocked）：<br>\n线程处于阻塞状态，表明<strong>线程在等待 <code>synchronized</code>  的隐式锁</strong>。当占用锁的线程释放锁，而阻塞中的线程获得锁后，它又转换到就绪状态。</li>\n<li>等待（Waiting）：<br>\n<strong>线程处于无限期等待，直到被其他线程显式唤醒</strong>。与阻塞不同，等待是主动进入的，可以通过调用 <code>Object.wait()</code>  方法等进入。</li>\n<li>定时等待（Timed Waiting）：<br>\n和等待状态的区别是，<strong>线程无需其他线程唤醒，而是在等待时间满后被系统自动唤醒</strong>。 <code>Thread.sleep()</code>  和 <code>Object.wait()</code>  等方法可以设置等待时间参数进入此状态。</li>\n<li>终止（Terminated）：<br>\n线程执行完 <code>run()</code>  方法，或因为异常终止运行。此状态意味着线程已经结束了生命周期。</li>\n</ul>\n<h3 id=\"锁机制补充\"><a class=\"markdownIt-Anchor\" href=\"#锁机制补充\">#</a> 锁机制补充</h3>\n<p>锁机制是确保线程安全的一种方法。通过锁机制对共享数据进行互斥访问，使在某一时刻只能有一个线程执行某个方法或代码块，确保了线程安全。<br>\n一些常见的锁机制的名词解释如下：</p>\n<h4 id=\"可重入锁和死锁\"><a class=\"markdownIt-Anchor\" href=\"#可重入锁和死锁\">#</a> 可重入锁和死锁</h4>\n<p>可重入锁，指的是线程可以重复获取同一把锁。即同一个线程在外层方法获取了锁，在进入内层方法会自动获取锁。<br>\n可重入锁可以在一定程度上避免死锁。</p>\n<p>死锁是一种特定的程序状态。当两个以上的运算单元，双方都在等待对方停止执行，以获取系统资源，但是没有一方提前退出时，就称为死锁。<br>\n诱发死锁有四个条件：互斥条件、占用且等待、不可抢占和循环等待。</p>\n<h4 id=\"公平锁和非公平锁\"><a class=\"markdownIt-Anchor\" href=\"#公平锁和非公平锁\">#</a> 公平锁和非公平锁</h4>\n<ul>\n<li>公平锁：是指多线程<strong>按照申请锁的顺序</strong>来获取锁。</li>\n<li>非公平锁：是指多线程<strong>不按照申请锁的顺序</strong>来获取锁 。这就可能会出现优先级反转（后来者居上）或者饥饿现象（某线程总是抢不过别的线程，导致始终无法执行）。</li>\n</ul>\n<p>公平锁为了保证线程申请顺序，需要付出一定的性能代价，因此其吞吐量一般低于非公平锁</p>\n<h4 id=\"独享锁和共享锁\"><a class=\"markdownIt-Anchor\" href=\"#独享锁和共享锁\">#</a> 独享锁和共享锁</h4>\n<ul>\n<li>独享锁是指<strong>锁一次只能被一个线程所持有</strong>。</li>\n<li>共享锁是指<strong>锁可被多个线程所持有</strong>。</li>\n</ul>\n<p>独享锁与共享锁是一种广义上的说法，从实际用途上来看，也常被称为互斥锁与读写锁。</p>\n<h4 id=\"乐观锁和悲观锁\"><a class=\"markdownIt-Anchor\" href=\"#乐观锁和悲观锁\">#</a> 乐观锁和悲观锁</h4>\n<p>乐观锁和悲观锁是指<strong>两种不同的处理并发同步的策略</strong>。</p>\n<ul>\n<li>悲观锁：<br>\n对并发采取悲观的态度。悲观锁认为，<strong>不加锁的并发操作一定会出现问题</strong>。悲观锁适合<strong>写操作频繁</strong>的场景。</li>\n<li>乐观锁：<br>\n对并发采取乐观的态度。乐观锁认为，<strong>不加锁的操作也不一定会发生问题</strong>。乐观锁在更新数据时，会采取不断尝试更新的方式，乐观锁适合<strong>读多写少</strong>的场景。</li>\n</ul>\n<p>Java 中使用 <code>synchronized</code>  关键字来显示加锁进行互斥同步，是一种典型的悲观锁。<br>\nJava 中的典型乐观锁是 <code>AtomicInteger</code>  等原子类，它们在更新数据时使用了 CAS（Compare And Swap）机制。乐观锁在进行操作时，先进行比较，如果内存位置的值和预期的原值相等，那么认为此时可以安全地把该值更改为新值。</p>\n<h4 id=\"偏向锁-轻量级锁和重量级锁\"><a class=\"markdownIt-Anchor\" href=\"#偏向锁-轻量级锁和重量级锁\">#</a> 偏向锁、轻量级锁和重量级锁</h4>\n<p>轻量级锁与重量级锁，指的是锁控制粒度的粗细。控制粒度越细，阻塞开销越小，并发性也就越高。</p>\n<ul>\n<li>\n<p>偏向锁：<br>\n如果一段同步代码一直被一个线程所访问，那么该线程会自动获取锁。降低获取锁的代价。</p>\n</li>\n<li>\n<p>轻量级锁：<br>\n当锁是偏向锁的时候，被另一个线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，提高性能。</p>\n</li>\n<li>\n<p>重量级锁：<br>\n当锁为轻量级锁的时候，另一个线程虽然是自旋，但自旋不会一直持续下去，当自旋一定次数的时候，还没有获取到锁，就会进入阻塞，该锁膨胀为重量级锁。重量级锁会让其他申请的线程进入阻塞，性能降低。</p>\n</li>\n</ul>\n",
            "tags": [
                "编程学习",
                "Java基础",
                "Java",
                "Java学习"
            ]
        },
        {
            "id": "https://www.umi.homes/posts/d486/",
            "url": "https://www.umi.homes/posts/d486/",
            "title": "泛型与集合",
            "date_published": "2023-04-29T16:00:00.000Z",
            "content_html": "<h2 id=\"泛型\"><a class=\"markdownIt-Anchor\" href=\"#泛型\">#</a> 泛型</h2>\n<p>泛型（generics）是 JDK5 引入的新的特性，它允许在定义类、接口和方法时，通过一个标识表示其中某个参数的类型，这个类型参数将在使用时确定。<br>\n泛型提供了一种编译时的类型安全检测机制。在没有泛型之前，Java 提供了对 <code>Object</code>  类型应用的任意化操作，即对 <code>Object</code>  的转型操作。但在类型转换的过程中，向上转型是安全的，向下转型却可能导致 <code>ClassCastException</code>  异常，泛型的出现可以预防这种问题：</p>\n<ul>\n<li>没有泛型：</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> demo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> demo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setDemo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> demo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>demo <span class=\"token operator\">=</span> demo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">Demo</span> d1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        d1<span class=\"token punctuation\">.</span><span class=\"token function\">setDemo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 如果需要取出内容需要强制类型转换</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> d1<span class=\"token punctuation\">.</span><span class=\"token function\">getDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 但很容易出现 ClassCastException</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Demo</span> d2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        d2<span class=\"token punctuation\">.</span><span class=\"token function\">setDemo</span><span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 错误的类型转换</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">String</span> t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> d2<span class=\"token punctuation\">.</span><span class=\"token function\">getDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>使用泛型：</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">GDemo</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">T</span> g<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">getG</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> g<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setG</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> g<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>g <span class=\"token operator\">=</span> g<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">GDemo</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> g <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GDemo</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        g<span class=\"token punctuation\">.</span><span class=\"token function\">setG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 免去了强制类型转换</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> g<span class=\"token punctuation\">.</span><span class=\"token function\">getG</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 编译器会进行检查，保证了类型安全</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">GDemo</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> n <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GDemo</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 错误，无法通过编译</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        n<span class=\"token punctuation\">.</span><span class=\"token function\">setG</span><span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>通过引入泛型，减少了强制类型转换，增强了代码的健壮性，有助于实现通用算法。</p>\n<h3 id=\"使用泛型\"><a class=\"markdownIt-Anchor\" href=\"#使用泛型\">#</a> 使用泛型</h3>\n<p>泛型机制的语法如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> 类名<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/*...*/</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>一般将泛型中的类名称为原型，将尖括号 <code>&lt;&gt;</code>  中的参数称为类型参数。<br>\n <code>T</code>  是泛型的名称，代表某一种类型，在创建该类的时候需要指定具体的类型，如果没有指定则会默认采用 <code>Object</code> 。<br>\n泛型有一些约定俗称的命名：</p>\n<ul>\n<li>E -&gt; Element</li>\n<li>K -&gt; Key</li>\n<li>N -&gt; Number</li>\n<li>T -&gt; Type</li>\n<li>V -&gt; Value</li>\n<li>S,U,V… -&gt; Other types</li>\n</ul>\n<p>除了类以外，接口和方法也可以声明泛型：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 接口使用泛型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Demo</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">T</span> <span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 方法使用泛型</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用泛型方法时，可以不用明确指明类型参数，因为编译器会进行类型推断（type argument inference）。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// java.lang.String</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// java.lang.Integer</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>另外，对于静态方法来说，因为 Java 中的泛型类型参数是在实例化时确定的，对于静态方法来说，它是属于类而不是属于对象的，如果要在静态方法中使用泛型类型，则需要单独指定。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 可以使用类的泛型类型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 报错，无法使用类的泛型类型</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// public static T test2(T obj) &#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//     return obj;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// &#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 正确</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">K</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"类型擦除\"><a class=\"markdownIt-Anchor\" href=\"#类型擦除\">#</a> 类型擦除</h3>\n<p><strong>Java 中的泛型是使用类型擦除来实现的，使用泛型时，任何具体的类型信息都被擦除了</strong>。<br>\nJVM 对泛型一无所知，例如 <code>Demo&lt;String&gt;</code>  和 <code>Demo&lt;Integer&gt;</code> ，运行时都将它们视为相同的类型。<br>\n编译器将泛型的 <code>&lt;T&gt;</code>  都视为了 <code>Object</code> ，同时再根据 <code>&lt;T&gt;</code>  来实现安全的强制类型转换：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 编译器代码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">T</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">T</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 虚拟机代码</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>因此，Java 的泛型是由编译器在编译时实行的，泛型虽然被视为 <code>Object</code> ，但是在需要转型的时候编译器会自动实现安全的强制类型转换。类型擦除中没有产生新的类型，所以泛型不会产生运行时的开销。</p>\n<p>由于这种类型擦除的机制，Java 的泛型存在这些局限：</p>\n<ol>\n<li>泛型不能是基本数据类型，因为 <code>Object</code>  无法持有基本数据类型；</li>\n<li>因为类型擦除，所以无法取得泛型的 <code>Class</code> ，也无法判断泛型的类型；</li>\n<li>不能实例化泛型 <code>T</code> ，也不能进行转型、 <code>instanceof</code>  等操作。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 错误，无法使用基本数据类型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Demo</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 取值结果都变成了 Demo，而泛型 & lt;T > 中内容都被忽略</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Class</span> c1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Class</span> c2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// class Demo</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// class Demo</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"类型边界\"><a class=\"markdownIt-Anchor\" href=\"#类型边界\">#</a> 类型边界</h3>\n<p>类型边界可以对泛型的类型参数设置限制条件，使泛型只接受某些限定的类型。<br>\n如下所示，这个 <code>LimitClass</code>  泛型限制为了实现 <code>Comparable</code>  接口的类型：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LimitClass</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Comparable</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// Student 类中实现了接口，正确</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">LimitClass</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LimitClass</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// Person 类中没有实现接口，报错</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">LimitClass</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LimitClass</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>score <span class=\"token operator\">-</span> s<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>实际上可以认为， <code>&lt;T&gt;</code>  写法相当于 <code>&lt;T extends Object&gt;</code> 。</p>\n<p>符号 <code>?</code>  称为类型通配符，用来代替具体的类型参数。如 <code>Demo&lt;?&gt;</code>  在逻辑上可以是 <code>Demo&lt;String&gt;</code> 、 <code>Demo&lt;Number&gt;</code>  等 <code>Demo&lt;具体类型&gt;</code>  的父类。<br>\n类型通配符可以结合 <code>extends</code>  和 <code>super</code>  关键字用于限定类型的上届和下界，两者不能同时使用。</p>\n<ul>\n<li><code>&lt;? extends A&gt;</code>  上界通配符：未知类型必须为 <code>A</code>  或它的子类类型。</li>\n<li><code>&lt;? super B&gt;</code>  下界通配符：未知类型必须为 <code>B</code>  或它的父类类型。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BoundedDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>利用通配符还可以实现类似于类型转换的效果：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> arr1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 因为类型擦除，实际上并没有 ArrayList&lt;Number > 和 ArrayList&lt;Integer>，自然也不存在子父类关系和向上转型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span> arr2 <span class=\"token operator\">=</span> arr1<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 但是可以利用范围更大的通配符接收</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> arr3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span> arr4 <span class=\"token operator\">=</span> arr3<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在一些写法上，可以认为 <code>&lt;T extends OtherClass&gt;</code>  和 <code>&lt;? extends OtherClass&gt;</code>  有类似的地方，但是两者最大的区别在于， <code>T</code>  可以代表一个实际的类型，而 <code>?</code>  只是一个通配符。因此 <code>T</code>  可以用在泛型类型、泛型方法的声明上，而 <code>?</code>  在这些地方是不能使用的。</p>\n<h2 id=\"集合\"><a class=\"markdownIt-Anchor\" href=\"#集合\">#</a> 集合</h2>\n<p>集合可以看作是一个用来存储对象的容器。<br>\n与数组不同，集合<strong>不能存储基本数据类型</strong>（只能存储它们的包装类型），但是它的<strong>大小可变</strong>，配合 Java 提供的操作集合的相应方法，能更方便地对存储的对象进行操作。。</p>\n<h3 id=\"概述\"><a class=\"markdownIt-Anchor\" href=\"#概述\">#</a> 概述</h3>\n<p>Java 中的集合主要有两种， <code>Collection</code>  和 <code>Map</code> 。<br>\n <code>Collection</code> ：用于存储单个的数据，也称为单列数据集合。<br>\n <code>Map</code> ：用于储存具有映射关系的 “键值对”（key-value），也称为双列数据集合。<br>\nJava 集合框架的示意图如下：<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/computerscience/java-note/collections.613p17hp7is0.webp\" alt=\"集合框架\"></p>\n<p>Java 中的集合具有一定共性，它们或全部或部分使用到了，诸如泛型、迭代器、比较器等。</p>\n<h4 id=\"迭代器\"><a class=\"markdownIt-Anchor\" href=\"#迭代器\">#</a> 迭代器</h4>\n<p>迭代器 <code>Iterable</code>  和 <code>Iterator</code>  的目的在于便利访问集合中的元素， <code>Collection</code>  接口继承自 <code>Iterable</code>  接口。</p>\n<p><code>Iterator</code>  接口定义如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">E</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnsupportedOperationException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"remove\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">forEachRemaining</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            action<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>Iterable</code>  接口定义如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Iterable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            action<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">default</span> <span class=\"token class-name\">Spliterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">spliterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Spliterators</span><span class=\"token punctuation\">.</span><span class=\"token function\">spliteratorUnknownSize</span><span class=\"token punctuation\">(</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>Collection</code>  接口继承并扩展了 <code>Iterable</code>  接口，该接口有一个 <code>iterator</code>  方法，用以返回一个实现了 <code>Iterator</code>  接口的对象。<br>\n <code>iterator</code>  返回的迭代器对象，默认游标在集合的第一个元素之前（-1），其中， <code>hasNext()</code>  方法用于判断是否还有元素可以迭代， <code>next()</code>  方法用于返回迭代的下一个元素，如果没有可达到的元素会抛出 <code>NoSuchElementException</code>  异常。<br>\n可以使用增强的 <code>for</code>  循环来遍历 <code>Collection</code> ，语法为 <code>for(E e : Collection&lt;E&gt;)</code> ，实际上在循环时就是使用的迭代器进行的。<br>\n另外，在进行迭代的时候，<strong>不要随意更改集合长度</strong>，会导致并发修改异常。</p>\n<h4 id=\"比较器\"><a class=\"markdownIt-Anchor\" href=\"#比较器\">#</a> 比较器</h4>\n<p><code>Comparable</code>  接口的定义如下，它是排序接口。若一个类实现了 <code>Comparable</code>  接口，表示该类的实例可以比较，意味着支持排序。实现了 <code>Comparable</code>  接口的类，它的对象的列表或数组，可以通过 <code>Collections.sort</code>  或 <code>Arrays.sort</code>  进行排序。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>Comparator</code>  接口定义如下，它是比较接口。如果有的类本身不支持排序（没有实现 <code>Comparable</code>  接口），但是又需要对它进行排序或者希望它按照另一种预期进行排序时，就可以考虑通过实现一个比较器来进行排序：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@FunctionalInterface</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"克隆\"><a class=\"markdownIt-Anchor\" href=\"#克隆\">#</a> 克隆</h4>\n<p>在 <code>Object</code>  类中有一个 <code>Object.clone()</code>  方法，定义如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">native</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">CloneNotSupportedException</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这个方法用于获取对象的一个克隆对象，并且要求类必须实现 <code>Cloneable</code>  接口，返回的是一个调用对象的浅拷贝。所有类都可以重写这个方法。</p>\n<h3 id=\"collection\"><a class=\"markdownIt-Anchor\" href=\"#collection\">#</a> Collection</h3>\n<p><code>Collection</code>  接口是单列数据集合的顶级接口，Java 并没有对它进行直接实现，而是实现了更具体的子接口。<br>\n <code>Collection</code>  接口中的一些常用方法如下：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>int size()</code></td>\n<td>返回当前集合中存储元素个数</td>\n</tr>\n<tr>\n<td><code>boolean isEmpty()</code></td>\n<td>判空操作，返回布尔值</td>\n</tr>\n<tr>\n<td><code>boolean add(E e)</code></td>\n<td>添加元素 <code>e</code>  到当前集合中</td>\n</tr>\n<tr>\n<td><code>boolean addAll(Collection&lt;? extends E&gt; c)</code></td>\n<td>添加集合 <code>c</code>  中的所有元素对象到当前集合中</td>\n</tr>\n<tr>\n<td><code>boolean remove(Object o)</code></td>\n<td>从当前集合中删除第一个与 <code>o</code>  进行 <code>equals()</code>  判断相等的元素</td>\n</tr>\n<tr>\n<td><code>boolean removeAll(Collection&lt;?&gt; c)</code></td>\n<td>从当前集合中删除所有与集合 <code>c</code>  中 <code>equals()</code>  判断相等的元素</td>\n</tr>\n<tr>\n<td><code>boolean removeIf(Predicate&lt;? super E&gt; filter)</code></td>\n<td>从当前集合中删除 <code>filter</code>  判断为 <code>true</code>  的元素</td>\n</tr>\n<tr>\n<td><code>boolean contains(Object o)</code></td>\n<td>当前集合中是否存在一个与 <code>o</code>  进行 <code>equals()</code>  判断相等的元素</td>\n</tr>\n<tr>\n<td><code>boolean containsAll(Collection&lt;?&gt; c)</code></td>\n<td>集合 <code>c</code>  中的所有元素是否都在当前集合中</td>\n</tr>\n<tr>\n<td><code>boolean retainAll(Collection&lt;?&gt; c)</code></td>\n<td>保留同时存在当前集合和 <code>c</code>  集合中的元素（取交集）</td>\n</tr>\n<tr>\n<td><code>void clear()</code></td>\n<td>清空当前集合元素</td>\n</tr>\n<tr>\n<td><code>Object[] toArray()</code></td>\n<td>返回包含当前集合中所有元素的数组</td>\n</tr>\n</tbody>\n</table>\n<p>Java 中还提供了一个 <code>Collections</code>  工具类，这个工具类提供了一些列的静态方法，用于操作集合：</p>\n<ul>\n<li>\n<p>排序：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>reverse(List)</code></td>\n<td>反转列表元素的顺序</td>\n</tr>\n<tr>\n<td><code>shuffle(List)</code></td>\n<td>对列表元素进行随机排序</td>\n</tr>\n<tr>\n<td><code>sort(List)</code></td>\n<td>对列表元素按自然顺序进行升序排序</td>\n</tr>\n<tr>\n<td><code>sort(List, Comparator)</code></td>\n<td>对列表元素按指定比较器排序</td>\n</tr>\n<tr>\n<td><code>swap(List, i, j)</code></td>\n<td>交换列表 <code>i</code>  和 <code>j</code>  处的元素</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>查找：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Object max(Collection)</code></td>\n<td>根据集合元素自然顺序，返回最大值</td>\n</tr>\n<tr>\n<td><code>Object max(Collection, Comparator)</code></td>\n<td>根据 <code>Comparator</code>  指定顺序，返回最大值</td>\n</tr>\n<tr>\n<td><code>Object min(Collection)</code></td>\n<td>根据集合元素自然顺序，返回最小值</td>\n</tr>\n<tr>\n<td><code>Object min(Collection, Comparator)</code></td>\n<td>根据 <code>Comparator</code>  指定顺序，返回最小值</td>\n</tr>\n<tr>\n<td><code>int binarySearch(List, key)</code></td>\n<td>在列表中查找 <code>key</code>  元素下标，要求列表有序并且可以支持自然排序</td>\n</tr>\n<tr>\n<td><code>int binarySearch(List, key,Comparator)</code></td>\n<td>在列表中按 <code>Comparator</code>  查找 <code>key</code>  元素下标，要求列表按 <code>Comparator</code>  有序</td>\n</tr>\n<tr>\n<td><code>int frequency(Collection, Object)</code></td>\n<td>返回指定集合中指定元素出现次数</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>复制替换：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>void copy (List dest, List src)</code></td>\n<td>将列表 <code>src</code>  中的内容复制到 <code>dest</code>  中</td>\n</tr>\n<tr>\n<td><code>boolean replaceAll(List, oldVal, newVal)</code></td>\n<td>将列表中的所有旧值替换为新值</td>\n</tr>\n<tr>\n<td><code>boolean addAll(Collection c,T... elements)</code></td>\n<td>将所有指定元素添加到集合 <code>c</code>  中</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>同步：<br>\n <code>Collections</code>  类提供了多个 <code>synchronizedXxx()</code>  方法，可以将对应的集合包装成线程同步的集合，可以解决多线程并发时的安全问题。</p>\n</li>\n</ul>\n<h3 id=\"list\"><a class=\"markdownIt-Anchor\" href=\"#list\">#</a> List</h3>\n<p><code>List</code>  接口是 <code>Collection</code>  的子接口，其中扩展了一些根据索引操作集合元素的方法。</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>void add(index,element)</code></td>\n<td>在索引 <code>index</code>  的位置插入元素</td>\n</tr>\n<tr>\n<td><code>boolean add(index, elements)</code></td>\n<td>在索引 <code>index</code>  将元素全部插入</td>\n</tr>\n<tr>\n<td><code>Object get(index)</code></td>\n<td>获取索引 <code>index</code>  的元素</td>\n</tr>\n<tr>\n<td><code>List subList(from, to)</code></td>\n<td>返回从 <code>from</code>  到 <code>to</code>  索引位置元素组成的子列</td>\n</tr>\n<tr>\n<td><code>int indexOf(element)</code></td>\n<td>获取元素首次在列表中出现的索引</td>\n</tr>\n<tr>\n<td><code>int lastIndexOf(element)</code></td>\n<td>获取元素最后一次在列表中出现的索引</td>\n</tr>\n<tr>\n<td><code>Object remove(index)</code></td>\n<td>删除指定索引位置的元素</td>\n</tr>\n<tr>\n<td><code>Object set(index, element)</code></td>\n<td>设置指定索引位置的元素</td>\n</tr>\n</tbody>\n</table>\n<p><code>List</code>  有三个实现类，分别是 <code>ArrayList</code> 、 <code>LinkedList</code>  和 <code>Vector</code> 。</p>\n<h4 id=\"arraylist\"><a class=\"markdownIt-Anchor\" href=\"#arraylist\">#</a> ArrayList</h4>\n<p><code>ArrayList</code>  从底层数据结构角度来看是一个<strong>动态数组</strong>。</p>\n<ol>\n<li>\n<p>构造方法：</p>\n<ul>\n<li><code>public ArrayList(int initialCapacity)</code></li>\n<li><code>public ArrayList()</code></li>\n<li><code>public ArrayList(Collection&lt;? extends E&gt; c)</code></li>\n</ul>\n<p><code>ArrayList</code>  可以从集合构造，也可以指定初始容量。当没有指定初始容量时， <code>ArrayList</code>  的<strong>默认容量大小为 10</strong>，这个操作发生在没有指定初始容量的 <code>ArrayList</code>  对象第一次调用 <code>add()</code>  方法时。<br>\n在使用 <code>add()</code>  方法添加元素时，如果<strong>当前容量已满，会自动扩容为当前容量的 1.5 倍</strong>。因此，在初始化时为其指定合适的容量大小，可以减少扩容的性能开销。</p>\n</li>\n<li>\n<p>特点</p>\n<ul>\n<li>元素有序，元素可重复</li>\n<li>底层是数组，有索引值，查找快，增删慢（涉及到数组元素的移动）</li>\n<li>实现了 <code>Cloneable</code>  接口，默认为浅拷贝</li>\n<li>实现了 <code>Serializable</code>  接口，支持序列化</li>\n<li>线程不安全</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"linkedlist\"><a class=\"markdownIt-Anchor\" href=\"#linkedlist\">#</a> LinkedList</h4>\n<p><code>LinkedList</code>  从底层数据结构角度来看，可以视为<strong>双链表</strong>。</p>\n<ol>\n<li>\n<p>特有方法</p>\n<ul>\n<li><code>public void addFirst / addLast(E e)</code> ：将指定元素插入列表的开头 / 结尾。</li>\n<li><code>public E getFirst / getLast()</code> ：将获得列表开头 / 结尾的元素。</li>\n<li><code>public E removeFirst / removeLast(E e)</code> ：移除列表开头 / 结尾的元素。</li>\n<li><code>public E pop()</code> ：从列表表头出栈一个元素。</li>\n<li><code>public void push(E e)</code> ：从列表表头入栈一个元素。</li>\n</ul>\n<p><code>LinkedList</code>  在内部维护了一个双链表，通过 <code>Node</code>  类型的头尾指针（ <code>first</code>  和 <code>last</code> ）来访问数据。 <code>Node</code>  是它的内部类， <code>prev</code>  是该结点的上一个结点， <code>next</code>  是该结点的下一个结点， <code>item</code>  是该结点包含的值。<br>\n <code>LinkedList</code>  对查找做了一些优化。 <code>index</code>  索引，如果是在链表前半部分，则会从头结点开始遍历，如果是在链表后半部分，则从尾结点开始遍历，但是最坏情况下仍然会扫描<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">N/2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord\">/</span><span class=\"mord\">2</span></span></span></span> 个元素。</p>\n</li>\n<li>\n<p>特点</p>\n<ul>\n<li>元素有序，元素可重复</li>\n<li>底层是双链表，有索引值，查找慢（链表只能遍历），增删快（增删操作不需要移动元素）</li>\n<li>支持序列化，并且针对自身数据特征进行了优化</li>\n<li>线程不安全</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"vector\"><a class=\"markdownIt-Anchor\" href=\"#vector\">#</a> Vector</h4>\n<p><code>Vector</code>  和 <code>Stack</code>  的设计目标是作为线程安全的 <code>List</code>  实现，替代 <code>ArrayList</code> 。</p>\n<ul>\n<li><code>Vector</code> ： <code>Vector</code>  和 <code>ArrayList</code>  类似，也实现了 <code>List</code>  接口。但是， <code>Vector</code>  中的主要方法都是 <code>synchronized</code>  方法，即通过互斥同步方式保证操作的线程安全。 <code>Vector</code>  无参构造时初始容量为 10，自动扩容时扩容 2 倍。</li>\n<li><code>Stack</code> ： <code>Stack</code>  也是一个同步容器，它继承于 <code>Vector</code>  类，它的方法也用 <code>synchronized</code>  进行了同步。</li>\n</ul>\n<h3 id=\"map\"><a class=\"markdownIt-Anchor\" href=\"#map\">#</a> Map</h3>\n<p><code>Map</code>  是双列数据集合的顶级接口。和 <code>Collection</code>  接口不同， <code>Map</code>  中的数据是以键值对（ <code>key-value</code> ）形式存储的。<br>\n <code>Map</code>  中不允许有重复的 <code>key</code> ，每个 <code>key</code>  只允许映射到一个 <code>value</code> ，但是 <code>value</code>  的值可以重复。<br>\n在 JDK8 之前， <code>Map</code>  的底层实现采用数组 + 链表的形式；JDK8 之后，优化为了数组 + 链表 + 红黑树。<br>\n <code>Map</code>  接口的一些常用方法如下：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>V put(K key, V value)</code></td>\n<td>将指定的 <code>key-value</code>  添加到当前 <code>map</code>  对象中，如果 <code>key</code>  值重复，则覆盖之前 <code>value</code></td>\n</tr>\n<tr>\n<td><code>void putAll(Map&lt;K, V&gt; m)</code></td>\n<td>将 <code>m</code>  中的所有 <code>key-value</code>  对存放到当前的 <code>map</code></td>\n</tr>\n<tr>\n<td><code>V remove(Object key)</code></td>\n<td>移除指定 <code>key</code>  的 <code>key-value</code>  对，返回 <code>value</code></td>\n</tr>\n<tr>\n<td><code>void clear()</code></td>\n<td>清空当前 <code>map</code>  中的所有数据</td>\n</tr>\n<tr>\n<td><code>V get(Object key)</code></td>\n<td>获取指定 <code>key</code>  对应的 <code>value</code></td>\n</tr>\n<tr>\n<td><code>boolean containsKey(Object key)</code></td>\n<td>是否包含指定的 <code>key</code>  值</td>\n</tr>\n<tr>\n<td><code>boolean containsValue(Object value)</code></td>\n<td>是否包含指定的 <code>value</code>  值</td>\n</tr>\n<tr>\n<td><code>int size()</code></td>\n<td>返回 <code>map</code>  中 <code>key-value</code>  对的个数</td>\n</tr>\n<tr>\n<td><code>boolean isEmpty()</code></td>\n<td>判断当前 <code>map</code>  是否为空</td>\n</tr>\n<tr>\n<td><code>boolean equals(Object obj)</code></td>\n<td>判断当前 <code>map</code>  和对象 <code>obj</code>  是否相等</td>\n</tr>\n<tr>\n<td><code>Set&lt;K&gt; keySet()</code></td>\n<td>返回所有 <code>key</code>  构成的 <code>Set</code>  集合</td>\n</tr>\n<tr>\n<td><code>Collection&lt;V&gt; values()</code></td>\n<td>返回所有 <code>value</code>  构成的 <code>Collection</code>  集合</td>\n</tr>\n<tr>\n<td><code>Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet()</code></td>\n<td>返回所有 <code>key-value</code>  构成的 <code>Set</code>  集合</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"hashmap\"><a class=\"markdownIt-Anchor\" href=\"#hashmap\">#</a> HashMap</h4>\n<p><code>HashMap</code>  是 <code>Map</code>  接口最常用的实现类。</p>\n<ol>\n<li>特点\n<ul>\n<li>无序，无索引， <code>key</code>  值唯一</li>\n<li>可以存储 <code>null</code>  键值</li>\n<li>线程不安全</li>\n</ul>\n</li>\n<li>说明\n<ul>\n<li>判等条件：对 <code>key</code> ， <code>HashMap</code>  先判断它们的哈希值，哈希值不相等的情况下再判断它们 <code>equals()</code>  是否相等。对 <code>value</code> ，直接判断它们 <code>equals()</code>  是否相等。</li>\n<li>数据结构：\n<ul>\n<li><code>HashMap</code>  使用 <code>Node&lt;K,V&gt;[]</code>  数组来存储元素，当第一次存储数据时，如果没有指定初始容量，会创建一个<strong>默认容量为 16 的数组</strong>。</li>\n<li>构造时可以指定初始容量和加载因子，但是初始容量并不直接等于传递的参数，而是根据传递的参数计算得出。</li>\n<li>如果没有指定<strong>加载因子</strong>，那么它的默认值为<strong> 0.75</strong>，当数组存储达到了加载因子限度时<strong>扩容 2 倍</strong>。</li>\n<li>如果元素哈希值相同，但是内容不同，会在同一个数组索引位上以链表的形式存储，当链表过长时，会转为红黑树优化查询效率。</li>\n<li>当<strong>链表长度大于 8，数组容量大于 64 时，链表转为红黑树</strong>；如果后续删除元素使<strong>链表长度小于 6，红黑树变回链表</strong>。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"linkedhashmap\"><a class=\"markdownIt-Anchor\" href=\"#linkedhashmap\">#</a> LinkedHashMap</h4>\n<p><code>LinkedHashMap</code>  是 <code>HashMap</code>  的子类，与 <code>HashMap</code>  的最大区别在于它<strong>按照元素插入顺序存储</strong>。<br>\n <code>LinkedHashMap</code>  维护了一个保存所有条目的双向链表，保证了元素迭代的顺序。</p>\n<h4 id=\"treemap\"><a class=\"markdownIt-Anchor\" href=\"#treemap\">#</a> TreeMap</h4>\n<p><code>TreeMap</code>  基于红黑树进行实现，其内部元素是根据 <code>key</code>  来进行排序的。<br>\n在创建 <code>TreeMap</code>  对象时，可以传入一个 <code>Comparator</code>  对象， <code>key</code>  值会根据这个比较器来进行排序。如果没有这个比较器对象，则要求 <code>key</code>  值的类型实现了 <code>Comparable</code>  接口， <code>TreeMap</code>  对象会按照这个自然排序规则进行排序。<br>\n当两个 <code>key</code>  值按 <code>compareTo()</code>  方法或经 <code>compare()</code>  方法返回 0 时， <code>TreeMap</code>  认为两个 <code>key</code>  值相等。</p>\n<h4 id=\"hashtable\"><a class=\"markdownIt-Anchor\" href=\"#hashtable\">#</a> Hashtable</h4>\n<p><code>Hashtable</code>  是 <code>Map</code>  的线程安全实现类，它底层也采用哈希表（数组 + 链表）的形式实现。与 <code>HashMap</code>  不同的是，它不允许 <code>null</code>  的键值，并且效率较 <code>HashMap</code>  低，现在已经不常使用。</p>\n<h4 id=\"properties\"><a class=\"markdownIt-Anchor\" href=\"#properties\">#</a> Properties</h4>\n<p><code>Properties</code>  继承自 <code>Hashtable</code> ，与 <code>Hashtable</code>  不同， <code>Properties</code>  现在仍然被用于处理属性文件。<br>\n<strong> <code>Properties</code>  的 <code>key-value</code>  要求都是字符串类型</strong>。<br>\n特有方法：</p>\n<ul>\n<li><code>setProperty(String key,String value)</code> ：存入键值对</li>\n<li><code>getProperty(String key)</code> ：根据 <code>key</code>  获取 <code>value</code></li>\n<li><code>Set&lt;String&gt; stringPropertyNames</code> ：获取所有的 <code>key</code>  放到 <code>Set</code>  集合中。</li>\n<li><code>void load(InputStream inStream)</code> ：将流中的数据加载到 <code>Properties</code>  中。</li>\n</ul>\n<h3 id=\"set\"><a class=\"markdownIt-Anchor\" href=\"#set\">#</a> Set</h3>\n<p><code>Set</code>  接口继承了 <code>Collection</code>  接口，两者提供的方法完全相同，只是在行为上有区别。<br>\n <code>Set</code>  中的元素是唯一的，它不允许有重复的元素。<br>\n <code>Set</code>  集合功能的实现，底层都是依靠 <code>Map</code>  集合实现的。</p>\n<h4 id=\"hashset\"><a class=\"markdownIt-Anchor\" href=\"#hashset\">#</a> HashSet</h4>\n<p><code>HashSet</code>  是最常用的 <code>Set</code>  的实现类</p>\n<p><code>HashSet</code>  特点：</p>\n<ul>\n<li>元素无序，无索引，元素不可重复，允许 <code>null</code>  值</li>\n<li>实现了 <code>Cloneable</code>  接口，默认为浅拷贝</li>\n<li>实现了 <code>Serializable</code>  接口，支持序列化</li>\n<li>底层是数组，有索引值，查找快，增删慢（涉及到数组元素的移动）</li>\n<li>线程不安全</li>\n</ul>\n<p><code>HashSet</code>  是基于 <code>HashMap</code>  实现的， <code>HashSet</code>  的许多方法都依靠 <code>HashMap</code> 。它的底层数据结构在 JDK8 之前是数组 + 链表，JDK8 之后优化为数组 + 链表 + 红黑树。</p>\n<h4 id=\"linkedhashset\"><a class=\"markdownIt-Anchor\" href=\"#linkedhashset\">#</a> LinkedHashSet</h4>\n<p><code>LinkedHashSet</code>  是 <code>HashSet</code>  的子类，与 <code>HashSet</code>  的最大区别在于它<strong>按照元素插入顺序存储</strong>。<br>\n <code>LinkedHashSet</code>  维护了一个保存所有条目的双向链表，保证了元素迭代的顺序。<br>\n<strong> <code>LinkedHashSet</code>  的构造方法实际上是调用的是父类 <code>HashSet</code>  的非 <code>public</code>  构造方法</strong>。</p>\n<h4 id=\"treeset\"><a class=\"markdownIt-Anchor\" href=\"#treeset\">#</a> TreeSet</h4>\n<p><code>TreeSet</code>  的实现依赖于 <code>TreeMap</code> ，它底层的数据结构也是红黑树。<br>\n <code>TreeSet</code>  中的元素是有序的，它依靠自然排序顺序或指定的比较器顺序排序。</p>\n",
            "tags": [
                "编程学习",
                "Java基础",
                "Java",
                "Java学习"
            ]
        },
        {
            "id": "https://www.umi.homes/posts/dfd7/",
            "url": "https://www.umi.homes/posts/dfd7/",
            "title": "常用类库",
            "date_published": "2023-04-23T16:00:00.000Z",
            "content_html": "<h2 id=\"枚举与注解\"><a class=\"markdownIt-Anchor\" href=\"#枚举与注解\">#</a> 枚举与注解</h2>\n<h3 id=\"枚举\"><a class=\"markdownIt-Anchor\" href=\"#枚举\">#</a> 枚举</h3>\n<p>枚举类型（Enum）用来定义一组常量，它可以将常量封装在类或接口中。<br>\nJava 中使用 <code>enum</code>  关键字来定义枚举类型：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Size</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token constant\">SMALL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">MEDIUM</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">LARGE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">EXTRA_LARGE</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>枚举的本质也是一种类，它是一种受限制的类，并且具有自己的方法。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//java 源代码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Enum</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Constable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>枚举类默认继承 <code>java.lang.Enum</code>  类，所以枚举类不能再继承其他的类。<br>\n利用枚举可以将常量组织起来，统一进行管理。</p>\n<h4 id=\"枚举的特性\"><a class=\"markdownIt-Anchor\" href=\"#枚举的特性\">#</a> 枚举的特性</h4>\n<p><code>enum</code>  定义的枚举，本质上也是类，除了一些独有的特性，可以将枚举视为常规的类。</p>\n<ul>\n<li>枚举类的常量对象列表必须要在枚举类的首行，并且规范要求为大写（常量）</li>\n<li>如果常量对象后面没有其他的代码，那么可以省略 <code>;</code> ，否则不可省略</li>\n<li>列出的实例会被系统自动添加 <code>public static final</code>  修饰符，如果没有定义其他方法，枚举值会是默认从 <code>0</code>  开始的有序数列</li>\n<li>编译器默认会给枚举类提供 <code>private</code>  的无参构造，如果需要有参构造需要手动定义， <code>private</code>  修饰符可以省略，调用有参构造是在常量对象后面加参数列表</li>\n</ul>\n<p>此外就和普通的类一样，枚举类可以添加方法，也可以实现接口。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Week</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FRIDAY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Week</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FRIDAY</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Info</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">getDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Week</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Info</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">MONDAY</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"星期一\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">TUESDAY</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"星期二\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">WEDNESDAY</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"星期三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">THURSDAY</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"星期四\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">FRIDAY</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"星期五\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">SATURDAY</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"星期六\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">SUNDAY</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"星期天\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token class-name\">Week</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> description<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>description <span class=\"token operator\">=</span> description<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> description<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> description<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"枚举的方法\"><a class=\"markdownIt-Anchor\" href=\"#枚举的方法\">#</a> 枚举的方法</h4>\n<p>在 <code>enum</code>  中，提供了一些基本的方法</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>values()</code></td>\n<td>返回 <code>enum</code>  实例的数组，数组顺序按照元素声明时的顺序</td>\n</tr>\n<tr>\n<td><code>name()</code></td>\n<td>返回实例名</td>\n</tr>\n<tr>\n<td><code>ordinal()</code></td>\n<td>返回实例声明时的次序，从 0 开始</td>\n</tr>\n<tr>\n<td><code>getDeclaringClass()</code></td>\n<td>返回实例所属的 <code>enum</code>  类型</td>\n</tr>\n<tr>\n<td><code>equals()</code></td>\n<td>判断是否为同一个对象</td>\n</tr>\n</tbody>\n</table>\n<p>枚举类重写了 <code>toString()</code>  方法，使得每次返回的是实例名。<br>\n<strong>枚举类的每个常量在 JVM 中只有一个唯一实例，所以它可以直接使用 <code>==</code>  来比较</strong>。<br>\n <code>switch...case...</code>  语法支持枚举类。</p>\n<h3 id=\"注解\"><a class=\"markdownIt-Anchor\" href=\"#注解\">#</a> 注解</h3>\n<p>注解（Annotation）从 JDK5 开始引入，以 <code>@注解名</code> 的形式在代码中。<br>\n注解可以像修饰符一样被使用，可以用于修饰包、类、构造器、方法、成员变量、参数、局部变量的声明，还可以添加一些参数，这些信息被保存在注解的 <code>name = value</code>  中。<br>\n注解可以在类编译、运行时进行加载，体现不同的功能。</p>\n<h4 id=\"注解的使用\"><a class=\"markdownIt-Anchor\" href=\"#注解的使用\">#</a> 注解的使用</h4>\n<p>注解可以看作是一种给编译器或其他程序读取的注释。程序可以根据注解的不同进行相应的处理。<br>\nJavaSE 中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。<br>\nJavaEE/Android 中注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替 JavaEE 旧版中所遗留的繁冗代码和 XML 配置等。<br>\n更复杂的开发中，一定程度上可以说，<em>框架 = 注解 + 反射 + 设计模式</em>。</p>\n<h4 id=\"常见注解\"><a class=\"markdownIt-Anchor\" href=\"#常见注解\">#</a> 常见注解</h4>\n<ol>\n<li>\n<p>文档相关注解</p>\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>@author</code></td>\n<td>标明开发该类模块的作者</td>\n</tr>\n<tr>\n<td><code>@version</code></td>\n<td>标明开发该类模块的版本</td>\n</tr>\n<tr>\n<td><code>@see</code></td>\n<td>转向参考相关主题</td>\n</tr>\n<tr>\n<td><code>@since</code></td>\n<td>标明从哪个版本开始增加的</td>\n</tr>\n<tr>\n<td><code>@param</code></td>\n<td>对方法中某参数的说明</td>\n</tr>\n<tr>\n<td><code>@return</code></td>\n<td>对方法返回值的说明</td>\n</tr>\n<tr>\n<td><code>@exception</code></td>\n<td>对方法可能抛出的异常进行说明</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>编译时相关注解</p>\n<ul>\n<li><code>@Override</code> ：限定重写父类方法，该注解只能用于方法</li>\n<li><code>@Deprecates</code> ：用于表示所修饰的元素（类、方法等）已经过时，不推荐使用</li>\n<li><code>@SuppressWarnings</code> ：抑制编译器警告，可以指定 <code>all</code> 、 <code>unused</code> 、 <code>unchecked</code>  等</li>\n</ul>\n</li>\n<li>\n<p>元注解<br>\n JDK5 在  <code>java.lang.annotation</code>  包定义了 4 个标准的  <code>meta-annotation</code>  类型，它们被用来提供对其它 <code>annotation</code>  类型作说明。</p>\n<ul>\n<li><code>@Target</code> ：用于描述注解的使用范围，使用 <code>ElementType</code>  枚举类型的 10 个常量对象指定</li>\n<li><code>@Retention</code> ：用于描述注解的生命周期，使用 <code>RetentionType</code>  枚举类型的 3 个常量对象指定</li>\n<li><code>@Documented</code> ：表明这个注解应该被 <code>javadoc</code>  工具记录</li>\n<li><code>@Inherited</code> ：允许子类继承父类中的注解</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"自定义注解\"><a class=\"markdownIt-Anchor\" href=\"#自定义注解\">#</a> 自定义注解</h4>\n<p>一个完整的注解包括三个部分：声明、使用和读取。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>元注解<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>修饰符<span class=\"token punctuation\">]</span> <span class=\"token annotation punctuation\">@interface</span> 注解名 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">[</span>成员<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>自定义注解可以通过四个元注解分别说明它的生命周期、使用位置、是否继承，是否被生成到 API 文档中。</li>\n<li>可以使用 <code>default</code>  关键字为抽象方法指定默认返回值。</li>\n<li><code>Annotation</code>  的成员在 <code>Annotation</code>  定义中以无参数有返回值的抽象方法的形式来声明，称之为配置参数。返回值类型只能是基本数据类型、 <code>String</code>  类型、 <code>Class</code>  类型、 <code>Enum</code>  类型、 <code>Annotation</code>  类型或以上类型的数组。</li>\n<li>如果定义的注解含有抽象方法，那么使用时必须指定返回值，除非它有默认值。格式是 <code>方法名 = 返回值</code> ，如果只有一个抽象方法需要赋值，且方法名为  <code>value</code> ，可以省略 <code>value=</code> ，所以如果注解只有一个抽象方法成员，建议使用方法名 <code>value</code> 。</li>\n</ul>\n<p>自定义注解，必须配上注解的信息处理流程才有意义。因为自定义的注解，只能使用反射的代码读取，所以<strong>自定义注解的声明周期必须是 <code>RetentionPolicy.RUNTIME</code> </strong>。</p>\n<!-- //TODO JUnit测试 -->\n<h3 id=\"记录\"><a class=\"markdownIt-Anchor\" href=\"#记录\">#</a> 记录</h3>\n<h4 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h4>\n<p>记录（Record）类型是从 JDK14 开始引入的，使用 <code>record</code>  可以定义一个记录类。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Point</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">GeoLocation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> lng<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> lat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行结果如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">25.25</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">55.37</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>GeoLocation<span class=\"token punctuation\">[</span>lng<span class=\"token operator\">=</span><span class=\"token number\">25.25</span>, <span class=\"token assign-left variable\">lat</span><span class=\"token operator\">=</span><span class=\"token number\">55.37</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>记录类是一种不变类，类似于 <code>String</code> ，一定程度上可以认为上面这段代码的等价写法如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GeoLocation</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> lng<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> lat<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">GeoLocation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> lng<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> lat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lng <span class=\"token operator\">=</span> lng<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lat <span class=\"token operator\">=</span> lat<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">lng</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lng<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">lat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lat<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"[lng=\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lng <span class=\"token operator\">+</span> <span class=\"token string\">\", lat=\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lat <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>record</code>  的 <code>.class</code>  文件也可以证明：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">record</span> <span class=\"token class-name\">GeoLocation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> lng<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> lat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">GeoLocation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> lng<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> lat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lng <span class=\"token operator\">=</span> lng<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lat <span class=\"token operator\">=</span> lat<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">lng</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lng<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">lat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lat<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"说明\"><a class=\"markdownIt-Anchor\" href=\"#说明\">#</a> 说明</h4>\n<p>可以将记录类看作一种特殊的类，它的一些特性如下：</p>\n<ol>\n<li>和枚举类似，记录类总是继承自 <code>java.lang.Record</code> ，不能再继承其他的类，也不支持继承。</li>\n<li>记录类不能定义自己的实例变量，只有在头部组件中提供的变量才会被创建。但是可以在记录类中包含静态变量，使用 <code>记录类名.变量名</code> 的方式使用。</li>\n<li>记录类可以实现接口，也可以使用构造方法，为变量设置初始值等。</li>\n<li>记录类是一种不变类，在记录类中定义方法要确保不会打破记录类的不可变性。</li>\n</ol>\n<blockquote>\n<p>不变类有以下特点：</p>\n<ul>\n<li>定义 class 时使用 final，无法派生子类；</li>\n<li>每个字段使用 final，保证创建实例后无法修改任何字段。</li>\n</ul>\n</blockquote>\n<p>记录类是一种更为简洁、紧凑的不变类的定义方式。</p>\n<h2 id=\"包装类与运算\"><a class=\"markdownIt-Anchor\" href=\"#包装类与运算\">#</a> 包装类与运算</h2>\n<h3 id=\"包装类\"><a class=\"markdownIt-Anchor\" href=\"#包装类\">#</a> 包装类</h3>\n<p>Java 中为八种基本数据类型都定义了相应的引用数据类型，称为包装类：</p>\n<table>\n<thead>\n<tr>\n<th>基本数据类型</th>\n<th>包装类</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>byte</code></td>\n<td><code>Byte</code></td>\n</tr>\n<tr>\n<td><code>short</code></td>\n<td><code>Short</code></td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td><code>Integer</code></td>\n</tr>\n<tr>\n<td><code>long</code></td>\n<td><code>Long</code></td>\n</tr>\n<tr>\n<td><code>float</code></td>\n<td><code>Float</code></td>\n</tr>\n<tr>\n<td><code>double</code></td>\n<td><code>Double</code></td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>Boolean</code></td>\n</tr>\n<tr>\n<td><code>char</code></td>\n<td><code>Character</code></td>\n</tr>\n</tbody>\n</table>\n<p>包装类中，数字相关的包装类又都派生于 <code>Number</code>  父类。<br>\n<strong>所有的包装类都是不变类</strong>，可以保证在创建了包装类对象后，该对象就是不变的。<br>\n引入包装类的目的就是为了提供一种机制，使得基本数据类型可以与引用数据类型相互转换。</p>\n<h4 id=\"装箱与拆箱\"><a class=\"markdownIt-Anchor\" href=\"#装箱与拆箱\">#</a> 装箱与拆箱</h4>\n<p>基本数据类型和引用数据类型的相互转换称为<strong>装箱</strong>和<strong>拆箱</strong>。<br>\n装箱（boxing）是指将值类型转为引用类型，是调用包装类的 <code>valueOf</code>  方法实现的；<br>\n拆箱（unboxing）是将引用类型转为值类型，是调用包装类的 <code>xxxValue</code>  方法实现的。<br>\n为了便于使用，Java 编译器提供了自动装箱和自动拆箱的功能：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 非自动装箱</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Integer</span> i1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Integer</span> i2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 自动装箱</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Integer</span> i3 <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 非自动拆箱</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> i4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 自动拆箱</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> i5 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 自动装箱和自动拆箱只能发生在对应的基本数据类型和包装类之间，否则会报错</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token class-name\">Double</span> d <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>自动装箱和自动拆箱只发生在编译阶段，是为了方便代码的书写。在循环体中使用装箱和拆箱，会隐式地创建大量对象，影响程序的运行效率。</p>\n<p>另外一点需要注意的是，对于<strong>包装类，应该时刻将其视为对象</strong>。比较时应该使用 <code>equals()</code>  而不是 <code>==</code> 。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Integer</span> a <span class=\"token operator\">=</span> <span class=\"token number\">127</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Integer</span> b <span class=\"token operator\">=</span> <span class=\"token number\">127</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Integer</span> c <span class=\"token operator\">=</span> <span class=\"token number\">128</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Integer</span> d <span class=\"token operator\">=</span> <span class=\"token number\">128</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> e <span class=\"token operator\">=</span> <span class=\"token number\">128</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a == b ：\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c == d ：\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c == e ：\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c.equals(d) ：\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>打印结果</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">==</span> b ：true</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>c <span class=\"token operator\">==</span> d ：false</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>c <span class=\"token operator\">==</span> e ：true</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>c.equals<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> ：true</pre></td></tr></table></figure><p>当包装类和基本数据类型判等时，Java 会将包装类对象自动拆箱为基本数据类型，再去进行比较。<br>\n当两个包装类使用 <code>==</code>  判等时，可以认为比较的仍然是它们的地址值。而因为 JVM 进行了优化，对 <code>[-128,127]</code>  区间的数值，为了节省内存，自动装箱始终返回相同的实例，因此， <code>==</code>  结果恰好为  <code>true</code> 。<br>\n因此，在对包装类判等时，应该始终使用 <code>equals()</code> 。</p>\n<h4 id=\"类型转换\"><a class=\"markdownIt-Anchor\" href=\"#类型转换\">#</a> 类型转换</h4>\n<p>借助包装类的方法，可以实现基本数据类型、包装类和字符串的转换，具体来说如下：</p>\n<ul>\n<li>\n<p>基本数据类型和包装类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 基本类型转包装类</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>* 1. 构造器方法</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>* 2. valueOf 静态方法</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>* 3. 自动装箱</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>* */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">Integer</span> i <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">Float</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.4F</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">Double</span> d1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">6.4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">Double</span> d2 <span class=\"token operator\">=</span> <span class=\"token number\">6.4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>* 包装类转基本数据类型</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>* 1. 调用包装类的 xxxValue () 方法</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>* 2. 自动拆箱</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>* */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">156</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">241</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>基本数据类型和字符串</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 基本数据类型转字符串</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>* 1. String.valueOf ()</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>* 2. 字符串拼接</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>*  */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> <span class=\"token char\">'a'</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>* 字符串转基本数据类型</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>* 1. 调用相应包装类的 parseXxx (String) 方法</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>* 2. 通过包装类构造器转换</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>* 3. 转为包装类再通过自动拆箱实现</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>* */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">int</span> o <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"14\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"15\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> q <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"16\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>字符串和包装类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 包装类转字符串，调用 toString () 方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span> t <span class=\"token operator\">=</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 字符串转包装类，调用 valueOf () 方法</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Double</span> j <span class=\"token operator\">=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2.0D\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">Float</span> k <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4.0F\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"包装类的使用\"><a class=\"markdownIt-Anchor\" href=\"#包装类的使用\">#</a> 包装类的使用</h4>\n<ol>\n<li>\n<p><code>valueOf()</code> <br>\n <code>valueOf()</code>  方法始终返回的是当前包装类对象。以 <code>Integer</code>  为例：</p>\n<ul>\n<li>当参数为字符串或其他进制数时， <code>valueOf()</code>  方法实际上是先调用 <code>parseInt()</code>  方法处理后再创建的包装类对象。</li>\n<li>当参数在包装类的缓存区间 <code>[-128,127]</code>  时（浮点型没有缓存），会返回同一个实例对象而不是新建一个，因此 <code>valueOf()</code>  方法稍优于直接使用构造函数方法。</li>\n</ul>\n</li>\n<li>\n<p><code>toString()</code> <br>\n <code>toString()</code>  方法主要用于返回字符串，以 <code>Integer</code>  为例：</p>\n<ul>\n<li>对包装类对象，方法返回的是它值的字符串表示，方法没有参数。</li>\n<li>当传入参数时，调用的是包装类的静态方法，第一个参数为基本数据类型，第二个参数为转换的进制数。</li>\n<li><code>Integer</code>  中还提供了三种静态方法，用于直接转换为无符号的二、八、十六进制整数字符串。</li>\n</ul>\n</li>\n<li>\n<p><code>toLowerCase()</code>  和 <code>toUpperCase()</code> <br>\n <code>Character</code>  类方法，用于转换大小写字符，返回值为字符。</p>\n</li>\n<li>\n<p><code>isLetter()</code>  和 <code>isDigit()</code> <br>\n <code>Character</code>  类方法，判断字符是字符还是数字，返回值为布尔值。</p>\n</li>\n<li>\n<p><code>Number</code>  类<br>\n <code>Number</code>  类是其他数字类型包装类的父类，包含了数值类型的转换方法，可以利用它来实现数值类型的转换。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Number 类是一个抽象类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Number</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">int</span> <span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">long</span> <span class=\"token function\">longValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">float</span> <span class=\"token function\">floatValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">double</span> <span class=\"token function\">doubleValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token keyword\">public</span> <span class=\"token keyword\">byte</span> <span class=\"token function\">byteValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token keyword\">public</span> <span class=\"token keyword\">short</span> <span class=\"token function\">shortValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span><span class=\"token punctuation\">)</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>常量值<br>\n包装类中还提供了一些有用的静态常量值，比如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Boolean</span> t <span class=\"token operator\">=</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TRUE</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Boolean</span> f <span class=\"token operator\">=</span> <span class=\"token class-name\">Boolean<span class=\"token punctuation\">.</span>False</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2147483647</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> min <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MIN_VALUE</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -2147483648</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"数学运算\"><a class=\"markdownIt-Anchor\" href=\"#数学运算\">#</a> 数学运算</h3>\n<h4 id=\"math\"><a class=\"markdownIt-Anchor\" href=\"#math\">#</a> Math</h4>\n<p>Java 中提供了一个执行基本数学运算的 <code>Math</code>  工具类，调用时使用 <code>Math.方法名</code> 即可。常见的方法如下：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Math.abs(value)</code></td>\n<td>返回 <code>value</code>  的绝对值</td>\n</tr>\n<tr>\n<td><code>Math.ceil(value)</code></td>\n<td>返回大于等于 <code>value</code>  的最小整数</td>\n</tr>\n<tr>\n<td><code>Math.floor(value)</code></td>\n<td>返回小于等于 <code>value</code>  的最大整数</td>\n</tr>\n<tr>\n<td><code>Math.round(value)</code></td>\n<td>返回 <code>value</code>  四舍五入的结果</td>\n</tr>\n<tr>\n<td><code>Math.pow(a,b)</code></td>\n<td>返回<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><mi>b</mi></msup></mrow><annotation encoding=\"application/x-tex\">a^{b}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.849108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span></span></span></span></span></span></span></span></span> 的计算结果</td>\n</tr>\n<tr>\n<td><code>Math.sqrt(value)</code></td>\n<td>返回 <code>value</code>  的平方根</td>\n</tr>\n<tr>\n<td><code>Math.random()</code></td>\n<td>随机返回 <code>[0,1)</code>  区间的结果</td>\n</tr>\n<tr>\n<td><code>Math.max(a,b)</code></td>\n<td>返回 <code>a</code>  与 <code>b</code>  之间的较大值</td>\n</tr>\n<tr>\n<td><code>Math.min(a,b)</code></td>\n<td>返回 <code>a</code>  与 <code>b</code>  之间的较小值</td>\n</tr>\n<tr>\n<td><code>Math.PI</code></td>\n<td>常量，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">π</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span></td>\n</tr>\n<tr>\n<td><code>Math.E</code></td>\n<td>常量，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">e</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span></td>\n</tr>\n</tbody>\n</table>\n<p><code>Math</code>  类中还提供了三角函数运算、指对数运算等。</p>\n<p>另外，对于单独生成随机数，Java 在 <code>java.util</code>  包中还提供了 <code>Random</code>  类。与可以直接调用的 <code>Math.random()</code>  静态方法不同，使用 <code>Random</code>  类需要先实例化它：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 以系统时间作为随机数生成器的种子</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Random</span> r <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 或者实例化时传入一个随机数生成器的种子</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Random</span> r <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span>seedValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 使用 Random 类的方法生成随机数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回一个随机整数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回一个 [0,n-1] 区间的随机整数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">long</span> l <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">nextLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回一个随机长整数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">boolean</span> b <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">nextBoolean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回一个随机布尔型</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">float</span> f <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回一个随机单精度浮点数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">nextDouble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回一个随机双精度浮点数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">double</span> g <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">nextGaussian</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回一个概率密度为高斯分布的双精度浮点数</span></pre></td></tr></table></figure><h4 id=\"biginteger-与-bigdecimal\"><a class=\"markdownIt-Anchor\" href=\"#biginteger-与-bigdecimal\">#</a> BigInteger 与 BigDecimal</h4>\n<p><code>Integer</code>  和 <code>Long</code>  作为包装类，虽然可以进行整数的运算，但是对于超过它们取值访问的数值就无能为力了。Java 中提供了 <code>BigInteger</code>  这个类来表示<strong>不可变的任意精度的整数</strong>。<br>\n <code>BigInteger</code>  类由 <code>java.math</code>  包提供，它有所有 Java 基本整数操作符的对应方法，并还提供 <code>java.lang.Math</code>  的所有方法。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">//new BigInteger (String val)，根据字符串构建 BigInteger 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">BigInteger</span> b1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BigInteger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123456789123456789123456789\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">BigInteger</span> b2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BigInteger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"987654321987654321987654321\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// BigInteger 的运算需要使用它的方法，而不能直接使用运算符进行</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// b1 + b2</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">.</span><span class=\"token function\">subtract</span><span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// b1 - b2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">.</span><span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// b1 * b2</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">.</span><span class=\"token function\">divide</span><span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// b1 / b2</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">.</span><span class=\"token function\">remainder</span><span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// b1 % b2</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// b1^2</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>浮点数直接进行运算时，因为 Java 中的浮点数使用 IEEE 754 标准，所有在直接用来计算的时候可能会出现精度问题，例如： <code>0.1 + 0.2 == 0.3</code>  的结果是 <code>false</code> 。更详细的浮点数内存分析可以参见这篇文章：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNDczNTQx\">浮点类型（float、double）在内存中如何存储？</span><br>\n为了解决这个问题，Java 中使用 <code>BigDecimal</code>  类来表示<strong>不可变的任意精度浮点数</strong>，它同样由 <code>java.math</code>  包提供。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 可以使用 new BigDecimal (String val) 或者 new BigDecimal (double val) 创建，但是建议使用字符串方法，否则仍然会有精度问题</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">BigDecimal</span> d1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BigDecimal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0.2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">BigDecimal</span> d2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BigDecimal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">BigDecimal</span> d3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BigDecimal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">BigDecimal</span> d4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BigDecimal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">BigDecimal</span> d5 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BigDecimal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0.3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 0.3000000000000000166533453693773481063544750213623046875</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>d3<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>d4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 结果为 0.3，符合预期</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>d1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>d2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 除法运算需要指定舍入方式和精度</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// divide(BigDecimal divisor,int scale,java.math.RoundingMode roundingMode)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>d1<span class=\"token punctuation\">.</span><span class=\"token function\">divide</span><span class=\"token punctuation\">(</span>d5<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RoundingMode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DOWN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0.66，直接舍去</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>d1<span class=\"token punctuation\">.</span><span class=\"token function\">divide</span><span class=\"token punctuation\">(</span>d5<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RoundingMode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UP</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0.67，进一位</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>d1<span class=\"token punctuation\">.</span><span class=\"token function\">divide</span><span class=\"token punctuation\">(</span>d5<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RoundingMode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">HALF_UP</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0.67，四舍五入</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>两个 <code>BigDecimal</code>  进行比较，应该使用 <code>compareTo()</code>  方法而不是 <code>equals()</code>  方法。因为 <code>equals()</code>  方法不但要求它们的值相等，也要求它们的小数位数也要相等。</p>\n</div>\n<h2 id=\"日期和时间\"><a class=\"markdownIt-Anchor\" href=\"#日期和时间\">#</a> 日期和时间</h2>\n<h3 id=\"旧-api\"><a class=\"markdownIt-Anchor\" href=\"#旧-api\">#</a> 旧 API</h3>\n<h4 id=\"date\"><a class=\"markdownIt-Anchor\" href=\"#date\">#</a> Date</h4>\n<p><code>Date</code>  类用于表示日期，使用该类需要先创建对象：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 以当前本地时间创建时间对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Date</span> d1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 以时间戳创建时间对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Date</span> d2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">1800000000000L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>所谓<strong>时间戳，是指时间距离 1970 年 1 月 1 日 00:00:00GMT 的毫秒数</strong>。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取当前时间戳</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>Date</code>  对象中使用 <code>getTime()</code>  方法可以查看当前时间对象的时间戳，使用 <code>toString()</code>  方法可以将时间对象转为形如： <code>Fri Jan 15 16:00:00 CST 2027</code>  的字符串。<br>\n其他的 <code>Date</code>  类的 API 大多已经过时了。它们被移动到了 <code>Calender</code>  类中。</p>\n<h4 id=\"calendar\"><a class=\"markdownIt-Anchor\" href=\"#calendar\">#</a> Calendar</h4>\n<p><code>Calendar</code>  类用于获取并设置年月日分秒等：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 获取当前时间:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Calendar</span> c <span class=\"token operator\">=</span> <span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token constant\">YEAR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MONTH</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> d <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DAY_OF_MONTH</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> w <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DAY_OF_WEEK</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> hh <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token constant\">HOUR_OF_DAY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span> mm <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MINUTE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">int</span> ss <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECOND</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">int</span> ms <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MILLISECOND</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> m <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> d <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> w <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> hh <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> mm <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> ss <span class=\"token operator\">+</span> <span class=\"token string\">\".\"</span> <span class=\"token operator\">+</span> ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>Calendar</code>  类中，返回的月份需要加 1，返回的星期 1~7 分别对应星期日到星期六。<br>\n <code>Calendar</code>  类是一个抽象类，只能使用 <code>Calendar.getInstance()</code>  方法来获取当前时间，如果希望获得一个特定的时间，就只能手动进行设置：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>set(int field,int value)</code></td>\n<td>将给定的日历字段设置为指定的值</td>\n</tr>\n<tr>\n<td><code>add(int field,int amount)</code></td>\n<td>根据日历的规则，为给定的日历字段添加时间量</td>\n</tr>\n<tr>\n<td><code>getTime()</code></td>\n<td>将 <code>Calendar</code>  转成 <code>Date</code>  对象</td>\n</tr>\n<tr>\n<td><code>setTime(Date date)</code></td>\n<td>使用指定的 <code>Date</code>  对象重置 <code>Calendar</code>  对象</td>\n</tr>\n<tr>\n<td><code>setTimeZone(java.util.TimeZone value)</code></td>\n<td>使用指定的时区值设置 <code>Calendar</code>  对象</td>\n</tr>\n<tr>\n<td><code>setTimeInMillis(long millis)</code></td>\n<td>使用给定的 <code>long</code>  值设定 <code>Calendar</code>  对象当前时间</td>\n</tr>\n</tbody>\n</table>\n<p>常见的字段（filed）名如下：</p>\n<table>\n<thead>\n<tr>\n<th>字段名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>YEAR</td>\n<td>年</td>\n</tr>\n<tr>\n<td>MONTH</td>\n<td>月，需要 + 1</td>\n</tr>\n<tr>\n<td>DAY_OF_MONTH</td>\n<td>月中的哪天</td>\n</tr>\n<tr>\n<td>DAY_OF_WEEK</td>\n<td>周中的周几</td>\n</tr>\n<tr>\n<td>HOUR</td>\n<td>小时（12 进制）</td>\n</tr>\n<tr>\n<td>HOUR_OF_DAY</td>\n<td>小时（24 进制）</td>\n</tr>\n<tr>\n<td>MINUTE</td>\n<td>分钟</td>\n</tr>\n<tr>\n<td>SECOND</td>\n<td>秒</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"格式化\"><a class=\"markdownIt-Anchor\" href=\"#格式化\">#</a> 格式化</h4>\n<p><code>SimpleDateFormat</code>  类是一个不与语言环境有关的方式来格式化和解析日期的具体<br>\n类。</p>\n<ul>\n<li>构造器：\n<ul>\n<li><code>SimpleDateFormat()</code> ：默认的模板和语言环境创建对象。</li>\n<li><code>SimpleDateFormat(String pattern)</code> ：从指定参数 <code>pattern</code>  的格式创建对象。</li>\n</ul>\n</li>\n<li>格式化\n<ul>\n<li><code>format(Date date)</code> ：按方法格式化时间对象。</li>\n</ul>\n</li>\n<li>解析：\n<ul>\n<li><code>parse(String source)</code> ：从给定字符串开始解析文本以生成。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Date</span> d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">1800000000000L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">SimpleDateFormat</span> sf1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sf1<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">SimpleDateFormat</span> sf2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy年MM月dd日 EEEE HH时mm分ss秒\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sf2<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>日期的格式化</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">2027</span>/1/15 下午4:00</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2027</span>年01月15日 星期五 <span class=\"token number\">16</span>时00分00秒</pre></td></tr></table></figure><h3 id=\"新-api\"><a class=\"markdownIt-Anchor\" href=\"#新-api\">#</a> 新 API</h3>\n<p>从 JDK8 开始，Java 提供了一套新的日期与时间的 API，主要包括：</p>\n<ul>\n<li>本地日期时间： <code>LocalDateTime</code> 、 <code>LocalDate</code> 、 <code>LocalTime</code></li>\n<li>带时区的时间： <code>ZoneDateTime</code></li>\n<li>瞬时： <code>Instant</code></li>\n<li>时区： <code>ZoneID</code> 、 <code>ZoneOffset</code></li>\n<li>时间间隔： <code>Duration</code></li>\n</ul>\n<p>新版 API 严格区分了时刻、本地日期、本地时间和带时区的日期，并且简化了日期和时间的运算。<br>\n新版 API 修正了不合理的常量设计，如：month 中 1~12 表示 1-12 月，week 中 1~7 表示周一到周日<br>\n新版 API 的类型几乎全是和 String 类似的不变类型</p>\n<h4 id=\"本地日期时间\"><a class=\"markdownIt-Anchor\" href=\"#本地日期时间\">#</a> 本地日期时间</h4>\n<p><code>LocalDateTime</code> 、 <code>LocalTime</code>  和 <code>LocalDate</code>  是用于处理本地时间和日期的类。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LocalDateTime</span> dt <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前日期和时间</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">LocalDate</span> d <span class=\"token operator\">=</span> dt<span class=\"token punctuation\">.</span><span class=\"token function\">toLocalDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 转换到当前日期</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">LocalTime</span> t <span class=\"token operator\">=</span> dt<span class=\"token punctuation\">.</span><span class=\"token function\">toLocalTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 转换到当前时间</span></pre></td></tr></table></figure><p>一些常用的方法如下：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>now()/now(ZoneId zone)</code></td>\n<td>静态方法，根据当前时间 / 指定时区创建对象</td>\n</tr>\n<tr>\n<td><code>of(xx,xx,xx,xx,xx,xxx)</code></td>\n<td>静态方法，根据指定日期 / 时间创建对象</td>\n</tr>\n<tr>\n<td><code>getDayOfYear()</code></td>\n<td>获得年份天数（1-366）</td>\n</tr>\n<tr>\n<td><code>getDayOfMonth()</code></td>\n<td>获得月份天数（1-31）</td>\n</tr>\n<tr>\n<td><code>getDayOfWeek()</code></td>\n<td>获得星期，返回 <code>DayOfWeek</code>  枚举值</td>\n</tr>\n<tr>\n<td><code>getMonth()</code></td>\n<td>获得月份，返回 <code>Month</code>  枚举值</td>\n</tr>\n<tr>\n<td><code>getMonthValue()</code></td>\n<td>获得月份（1-12）</td>\n</tr>\n<tr>\n<td><code>getYear</code></td>\n<td>获得年份</td>\n</tr>\n<tr>\n<td><code>getHours()</code></td>\n<td>获得小时</td>\n</tr>\n<tr>\n<td><code>getMinute()</code></td>\n<td>获得分钟</td>\n</tr>\n<tr>\n<td><code>getSecond()</code></td>\n<td>获得秒</td>\n</tr>\n<tr>\n<td><code>isBefore()/isAfter()</code></td>\n<td>判断两个时间对象先后</td>\n</tr>\n<tr>\n<td><code>isLeapYear()</code></td>\n<td>判断是否为闰年</td>\n</tr>\n<tr>\n<td><code>format(DateTimeFormatter t)</code></td>\n<td>格式化本地日期 / 时间，返回字符串</td>\n</tr>\n<tr>\n<td><code>parse(CharSequence text)</code></td>\n<td>将指定格式字符串解析为日期 / 时间</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><code>withXxx</code>  方法用于把日期时间对象设置为指定值；</li>\n<li><code>plusXxx</code>  方法用于日期时间对象的加法运输；</li>\n<li><code>minusXxx</code>  方法用于日期时间对象的减法运输。</li>\n</ul>\n<p>与旧 API 不同，新 API 的本地日期和时间总是默认严格按照 ISO-8601 的日期时间格式进行的打印。进行格式化时，字符串按同样的标准也可以进行格式化。</p>\n<h4 id=\"instant\"><a class=\"markdownIt-Anchor\" href=\"#instant\">#</a> Instant</h4>\n<p><code>Instant</code> ：指时间线上的一个瞬时点，可以被用来记录应用程序中事件的时间戳。</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>now()</code></td>\n<td>静态方法，返回默认 UTC 时区的 <code>Instant</code>  对象</td>\n</tr>\n<tr>\n<td><code>ofEpochMilli(long epochMilli)</code></td>\n<td>静态方法，返回加上指定时间戳的 <code>Instant</code>  对象</td>\n</tr>\n<tr>\n<td><code>atOffset(ZoneOffset offset)</code></td>\n<td>结合即时的偏移来创建一个 <code>OffsetDateTime</code></td>\n</tr>\n<tr>\n<td><code>toEpochMilli()</code></td>\n<td>返回时间戳</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"格式化-2\"><a class=\"markdownIt-Anchor\" href=\"#格式化-2\">#</a> 格式化</h4>\n<p>新 API 中提供了 <code>DateTimeFormatter</code>  类用作时间日期的格式化：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ofPattern(String pattern)</code></td>\n<td>静态方法，返回一个指定字符串格式的 <code>DateTimeFormatter</code></td>\n</tr>\n<tr>\n<td><code>format(TemporalAccessor t)</code></td>\n<td>格式化一个日期 / 时间，返回字符串</td>\n</tr>\n<tr>\n<td><code>parse(CharSequence text)</code></td>\n<td>将指定格式的字符串序列解析为一个日期 / 时间</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"其他时间-api\"><a class=\"markdownIt-Anchor\" href=\"#其他时间-api\">#</a> 其他时间 API</h4>\n<ul>\n<li><code>ZoneID/ZonedDateTime</code>\n<ul>\n<li><code>ZoneID</code>  类中包含了所有的时区信息</li>\n<li><code>ZonedDateTime</code>  是一个在 ISO-8601 日历系统时区的日期时间</li>\n</ul>\n</li>\n<li><code>Period/Duration</code>\n<ul>\n<li><code>Period</code> ：日期间隔，用来计算两个日期的间隔</li>\n<li><code>Duration</code> ：持续时间，用于计算两个时间间隔</li>\n</ul>\n</li>\n</ul>\n<p>处理日期和时间时，尽量使用新的 <code>java.time</code>  包；<br>\n在数据库中存储时间戳时，尽量使用 <code>long</code>  型时间戳，它具有省空间、效率高、不依赖数据库的优点。</p>\n<h2 id=\"系统相关类\"><a class=\"markdownIt-Anchor\" href=\"#系统相关类\">#</a> 系统相关类</h2>\n<h3 id=\"system\"><a class=\"markdownIt-Anchor\" href=\"#system\">#</a> System</h3>\n<p><code>System</code>  类代表系统，系统级的很多属性和方法都放在该类内部。<br>\n <code>System</code>  类的构造区被 <code>private</code>  修饰，无法创建该类的对象，但是其内部的成员变量和方法都是静态的。</p>\n<ul>\n<li>\n<p>成员变量<br>\n <code>System</code>  类内部包含 <code>in</code> 、 <code>out</code> 、 <code>err</code>  三个成员变量，分别代表标准输入流、标准输出流和标准错误输出流</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Scanner</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello Java!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>成员方法</p>\n<ul>\n<li>\n<p><code>native long currentTimeMillis()</code> ：返回当前时间戳</p>\n</li>\n<li>\n<p><code>void exit(int status)</code> ：退出程序， <code>status</code>  为 0 代表正常退出</p>\n</li>\n<li>\n<p><code>void gc()</code> ：请求系统进行垃圾回收，具体执行情况由系统实现</p>\n</li>\n<li>\n<p><code>String getProperty(String key)</code> ：获得系统中属性对应的值</p>\n<table>\n<thead>\n<tr>\n<th>属性名（key）</th>\n<th>属性说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>java.version</code></td>\n<td>Java 运行时环境版本</td>\n</tr>\n<tr>\n<td><code>java.home</code></td>\n<td>Java 安装目录</td>\n</tr>\n<tr>\n<td><code>os.name</code></td>\n<td>操作系统名称</td>\n</tr>\n<tr>\n<td><code>os.version</code></td>\n<td>操作系统版本</td>\n</tr>\n<tr>\n<td><code>user.name</code></td>\n<td>用户账号名</td>\n</tr>\n<tr>\n<td><code>user.home</code></td>\n<td>用户主目录</td>\n</tr>\n<tr>\n<td><code>user.dir</code></td>\n<td>用户当前工作目录</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"runtime\"><a class=\"markdownIt-Anchor\" href=\"#runtime\">#</a> Runtime</h3>\n<p>每一个 Java 程序都有一个 <code>Runtime</code>  类实例，使运行程序与其运行环境相连接，常见方法如下：</p>\n<ul>\n<li><code>static Runtime getRuntime()</code> ：返回当前 Java 应用程序相关的运行时对象，应用程序不能创建自己的 Runtime 实例。</li>\n<li><code>long totalMemory()</code> ：返回 JVM 中初始化时内存总量，取决于主机环境，一般默认为物理机的 1/64。</li>\n<li><code>long maxMemory()</code> ：返回 JVM 最大程度能使用的内存总量，一般默认为物理机的 1/4。</li>\n<li><code>long freeMemory()</code> ：返回 JVM 的空闲内存量，调用 gc 方法可能使其增大。</li>\n<li><code>exec(String command)</code> ：在单独的进程中执行指定的字符串命令。</li>\n<li><code>exec(String[] cmdarray)</code> ：在单独的进程中执行指定的命令和命令参数。</li>\n<li><code>load(String filename)</code> ：加载作为动态库的指定文件名。</li>\n<li><code>loadLibrary(String libname)</code> ：加载具有指定库名的动态库。</li>\n</ul>\n",
            "tags": [
                "编程学习",
                "Java基础",
                "Java",
                "Java学习"
            ]
        },
        {
            "id": "https://www.umi.homes/posts/253b/",
            "url": "https://www.umi.homes/posts/253b/",
            "title": "继承与多态",
            "date_published": "2023-04-17T16:00:00.000Z",
            "content_html": "<h2 id=\"继承\"><a class=\"markdownIt-Anchor\" href=\"#继承\">#</a> 继承</h2>\n<p>Java 中使用 <code>extends</code>  来进行继承。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>继承的角度可以自上而下考虑，也可以从下往上考虑，例如：</p>\n<ol>\n<li>自上而下，从更广的 <code>Person</code>  类到更具体的 <code>Student</code>  类：</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">String</span> school<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>从下往上，提取 <code>Cat</code>  类和 <code>Dog</code>  类中公共部分到更大的 <code>Animal</code>  类：</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dog runs.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">jump</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cat jumps.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">makeSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\" makes sound\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"细节说明\"><a class=\"markdownIt-Anchor\" href=\"#细节说明\">#</a> 细节说明</h3>\n<p>继承减少了代码冗余，提高了代码的复用性，但是也增加了类之间的耦合性。<br>\n子类会继承父类所有的成员变量和方法，父类中被 <code>private</code>  修饰的变量和方法不能被子类直接访问。<br>\n一个父类可以有多个子类，子类也可以被它的子类再继承（多重继承），但是一个子类不能继承多个父类（单继承）。<br>\n子类可以对父类进行扩展，可以有自己的属性和方法，也可以用自己的方式实现父类的方法（重写）。</p>\n<h4 id=\"重写与重载\"><a class=\"markdownIt-Anchor\" href=\"#重写与重载\">#</a> 重写与重载</h4>\n<p>重写（Override）发生在继承中，值的是子类使用自己的方式来实现父类中的方法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Phone</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"打电话\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SmartPhone</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"视频通话\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>@Override</code>  写在方法上面，用来检查是否满足重写方法的要求。虽然不写，正确的方法也可以覆盖重写，但是保留可以让编译器帮助格式检查，同时也方便代码阅读，能清晰表明这是重写的方法。</p>\n<p>重写的要求：</p>\n<ul>\n<li>子类重写的方法<strong>必须</strong>和父类被重新的方法有相同的方法签名（方法名和参数列表）；</li>\n<li>子类重写的方法返回值类型<strong>不能大于</strong>父类被重写的方法的返回值类型；</li>\n<li>子类重写的方法的访问权限<strong>不能小于</strong>父类被重写的方法的访问权限；\n<ul>\n<li>父类私有方法不能被重写；</li>\n<li>跨包的父类缺省修饰符的方法不能被重写；</li>\n</ul>\n</li>\n<li>子类方法抛出的异常不能大于父类被重写方法的异常。</li>\n</ul>\n<div class=\"note info\">\n<p>注意与重载的区别。重载发生在一个类中，是同名方法不同的参数列表；重写发生在继承中，是子类用不同的方式实现父类的方法。</p>\n</div>\n<p>关于静态方法：</p>\n<div class=\"note warning\">\n<p>子类可以继承父类的静态方法，但是不能重写（编译器中添加 <code>@Override</code>  会报错）。因为静态方法是属于类的，而不是属于对象的。<br>\n如果父类中定义了一个静态方法，那么该方法是在编译期绑定的，即编译时就已经确定了该方法的调用，所以无法被子类重写。</p>\n</div>\n<p>子类中如果定义了一个与父类同名、同参数列表、同返回值类型的静态方法，实际上这个<strong>子类的方法隐藏（hide）了父类中的同名静态方法</strong>。在子类中调用这个同名的静态方法时，会优先调用子类的方法，但是父类静态方法仍然存在，它们不构成重写。<br>\n子类隐藏父类的静态方法，要求它们的方法签名必须一致，且子类方法的返回值类型必须是父类方法返回值类型的子类型或者相等。</p>\n<h4 id=\"super-关键字\"><a class=\"markdownIt-Anchor\" href=\"#super-关键字\">#</a> super 关键字</h4>\n<p><code>super</code>  可以用来调用父类的指定操作，可以访问父类的成员属性和成员方法。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">String</span> school<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> school<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>school <span class=\"token operator\">=</span> school<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上例中， <code>super(name, age)</code>  调用了父类的构造方法，为 <code>name</code>  和 <code>age</code>  设置了初值。<br>\n实际上，如果没有明确的调用父类的构造方法，编译器会自动加上无参的 <code>super()</code> 。由此也可以看出，子类不会继承父类的任何构造方法，默认的构造方法是编译器自动生成的。<br>\n当<strong>调用父类构造方法时，必须声明在构造器首行</strong>。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">/* 控制台打印</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            Father</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            Son</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Son</span> son <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// class Father</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">Father</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Father\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// class Son</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token class-name\">Son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Son\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>父类中被子类重写的方法，也可以使用 <code>super.method()</code>  的方式进行调用，类似的，当父类实例变量在子类中仍然可见时， <code>super</code>  也可访问父类中的实例变量。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"局部变量a=\"</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 先找局部变量</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"子类变量a=\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 直接从本类成员变量找</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"父类变量a=\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 直接从父类变量找</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b=\"</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 先找局部，局部没有找本类，然后再往父类找</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token class-name\">Son</span> son <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> son<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>son<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>虽然可以通过编译，但是按规范要求，<strong>子类应该避免声明和父类重名的成员变量，非 <code>setter/getter</code>  的参数名也应该避免与成员变量名相同</strong>。</p>\n<h3 id=\"阻止继承\"><a class=\"markdownIt-Anchor\" href=\"#阻止继承\">#</a> 阻止继承</h3>\n<p>被 <code>final</code>  继承的类不能被其他类继承。<br>\n类中被 <code>private</code>  修饰的字段和方法在子类中不可见。<br>\n从 JDK15 开始，允许使用 <code>sealed</code>  修饰 <code>class</code> ，并且通过 <code>permits</code>  明确写出能从该 <code>class</code>  继承的子类名称。这种类被称为<em>密封类</em>。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token keyword\">permits</span> <span class=\"token class-name\">Male</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Female</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如上的 <code>Person</code>  就是一个 <code>sealed</code>  类，它只允许指定的 <code>Male</code>  和 <code>Female</code>  类继承它。并且如果使用其他的，不在指定类列表中类继承会报错，</p>\n<p>密封类的子类需要声明 <code>final</code>  来禁止被继承，或者声明 <code>sealed</code>  使得该子类的直接子类可数；又或者声明 <code>non-sealed</code>  来使得该子类的子类不受限制。<br>\n<strong>密封类可以确保其直接子类可数</strong>。</p>\n<h3 id=\"object\"><a class=\"markdownIt-Anchor\" href=\"#object\">#</a> Object</h3>\n<p>Object 类定义在 <code>java.lang.Object</code>  中，是所有 Java 类的父类。在定义类时，所有没有显式指定 <code>extends</code>  的类，编译器都会自动添加 <code>extends Object</code> 。<br>\n在 <code>Object</code>  中定义了很多方法，包括 <code>clone()</code> 、 <code>equals()</code> 、 <code>toString()</code> …… 所有类都是 <code>Object</code>  的子类，因此任何类都可以重写 <code>Object</code>  类中的方法。<br>\n <code>getClass()</code> 、 <code>notify()</code> 、 <code>wait()</code>  等方法被 <code>final</code>  修饰，因此这些方法不能被重写。</p>\n<h4 id=\"getclass\"><a class=\"markdownIt-Anchor\" href=\"#getclass\">#</a> getClass()</h4>\n<p><code>getClass()</code>  由 <code>Object</code>  类定义，它会返回对象执行时的 <code>Class</code>  实例，然后使用此实例调用 <code>getName()</code>  方法可以取得类的名称。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Object 源代码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token annotation punctuation\">@IntrinsicCandidate</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">native</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>native</code>  关键字说明这个方法是原生函数，是由非 Java 语言实现的，并被编译成了供 Java 调用的方法。</p>\n<h4 id=\"tosting\"><a class=\"markdownIt-Anchor\" href=\"#tosting\">#</a> toSting()</h4>\n<p><code>toString()</code>  方法会将一个对象返回为字符串，包含对象的类名和哈希值。在实际应用时通常会重写 <code>toString()</code>  方法，为对象提供一个特定的输出。当类需要转换为字符串时，会自动调用 <code>toString()</code>  方法。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Object 源代码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token keyword\">return</span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"@\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHexString</span><span class=\"token punctuation\">(</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>默认情况下，返回的是 <code>对象运行时的类型@对象的十六位进制的哈希值</code> 。</p>\n<h4 id=\"equals\"><a class=\"markdownIt-Anchor\" href=\"#equals\">#</a> equals()</h4>\n<p>使用 <code>==</code>  运算符只会比较两个对象的内存地址是否相等， <code>equals()</code>  方法用于比较两个对象的实际内容是否相等。<br>\n如果不进行任何 <code>equals()</code>  重写，那么默认的 <code>equals()</code>  方法也是比较的两个对象的哈希值：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Object 源代码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>equals()</code>  重写应该满足以下条件：</p>\n<ul>\n<li>对称性：如果 <code>x.equals(y)</code>  返回值为 <code>true</code> ，那么 <code>y.equals(x)</code>  也是 <code>true</code> ；</li>\n<li>自反性： <code>x.equals(x)</code>  的返回必须为 <code>true</code> ；</li>\n<li>传递性： <code>x.equals(y)</code>  返回值是 <code>true</code> ， <code>y.equals(z)</code>  返回值为 <code>true</code> ，那么 <code>x.equals(z)</code>  的返回值也必须是 <code>true</code> ；</li>\n<li>一致性：如果 <code>x.equals(y)</code>  的值是 <code>true</code> ，那么在 <code>x</code>  和 <code>y</code>  不变的情况下，多次重复 <code>x.equals(y)</code>  的返回值都应该是 <code>true</code> ；</li>\n<li>任何情况下 <code>x.equals(null)</code>  的返回值都应该是 <code>false</code> ， <code>x.equals(和x不同类型的对象)</code>  永远返回 <code>false</code> 。</li>\n</ul>\n<h4 id=\"hashcode\"><a class=\"markdownIt-Anchor\" href=\"#hashcode\">#</a> hashCode()</h4>\n<p>默认情况下， <code>hashCode()</code>  会返回一个随机的整数，即哈希值，这个值是 JDK 根据对象的地址或者字符串或者其他信息计算出来的。<br>\n在不进行重载的情况下，返回的实际上是该对象在 JVM 的堆上的内存地址。如果进行了重载，则 <code>hashCode()</code>  会根据具体的算法有所区别。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Object 源代码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@IntrinsicCandidate</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">native</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>源码中说明，支持此方法是为了提高哈希表（如 <code>java.util.HashTable</code>  提供的哈希表）的性能。<br>\n源码中还说明了， <code>hashCode()</code>  方法与 <code>equals()</code>  存在的语义关联：</p>\n<blockquote>\n<p>Whenever it is invoked on the same object more than once during an execution of a Java application, the {@code hashCode} method must consistently return the same integer, provided no information used in {@code equals} comparisons on the object is modified.This integer need not remain consistent from one execution of an application to another execution of the same application.</p>\n<p>If two objects are equal according to the {@link equals(Object) equals} method, then calling the {@code hashCode} method on each of the two objects must produce the same integer result.</p>\n<p>It is not required that if two objects are unequal according to the {@link equals(Object) equals} method, then calling the {@code hashCode} method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables.</p>\n</blockquote>\n<p>简单来说，每次 Java 程序执行期间，对同一对象多次调用此方法，只要这个对象 <code>equals()</code>  中比较使用的信息没有被修改，那么 <code>hashCode()</code>  必须返回相同的整数。但是不要求程序多次执行时都要有一样的哈希值。<br>\n两个对象使用 <code>equals()</code>  方法相等，则它们的哈希值必须相等。两个对象的哈希值相等，不要求它们 <code>equals()</code>  方法也一定相等。但是，对不相等的对象使用不同的哈希值，可以提高哈希表的性能。</p>\n<h2 id=\"多态\"><a class=\"markdownIt-Anchor\" href=\"#多态\">#</a> 多态</h2>\n<h3 id=\"多态体现\"><a class=\"markdownIt-Anchor\" href=\"#多态体现\">#</a> 多态体现</h3>\n<p>多态，是指同类型的对象，可以表现出不同的形态。Java 中，父类的引用可以指向子类的对象，就是对象多态性的一种体现。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 这里 Student 是 Person 的子类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Object</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 父类的引用可以指向子类的对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Student -> Person -> Object</span></pre></td></tr></table></figure><p>Java 的引用变量有两个类型，<em>编译时类型</em>和<em>运行时类型</em>，编译时类型由<em>声明</em>该变量时使用的类型决定，运行时类型由<em>实际</em>赋给该变量的对象决定。简称为<strong>编译看左边，运行看右边</strong>。编译时类型和运行时类型不一致，就出现了对象的多态性。<br>\n多态情况下，看左边是看的父类的引用，父类中不具备子类特有的方法和属性；看右边是看的子类的对象，看的是子类中重写的父类的方法。类的继承和方法重写是使用多态的前提。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Pet.java</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Pet</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Pet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">Pet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"吃东西\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// Dog.java</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Pet</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小狗\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"在吃肉\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">watchHouse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小狗\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"在看家\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">// Cat.java</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Pet</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小猫\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"在吃鱼\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">catchMouse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小猫\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"在抓老鼠\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">// Main.java</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token comment\">// 1. 引用体现多态</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token class-name\">Pet</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        p<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小白\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token comment\">// 运行时执行子类 Dog 重写的方法</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        p<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 小狗小白在吃肉</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token comment\">// 编译时看右边，只能调用父类声明的方法，不能调用子类扩展的方法</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token comment\">// p.watchHouse()</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        p<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小黑\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token comment\">// 运行时执行子类 Cat 重写的方法</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        p<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 小猫小黑在吃鱼</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token comment\">// 2. 刑参声明体现多态</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token comment\">// 形参是父类类型，实参是子类类型</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">feedPet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Pet</span> pet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token comment\">//pet 实际指向的对象类型不同，执行的 eat 方法不同</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        pet<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token comment\">// 3. 返回值类型体现多态</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token comment\">// 返回值类型是父类类型，实际返回的是子类对象</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">Pet</span> <span class=\"token function\">keepAPet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> pet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>pet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token string\">\"Dog\"</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token string\">\"Cat\"</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>利用多态可以实现动态绑定。变量引用的子类对象不同，运行时执行的方法就不同。这使得代码的编写更加灵活，程序的维护性和扩展性更好。<br>\n但是，当一个引用类型声明为父类时，如果它实际引用的是子类，它也不能访问子类中额外扩展添加的属性和方法。</p>\n<h3 id=\"类型转换\"><a class=\"markdownIt-Anchor\" href=\"#类型转换\">#</a> 类型转换</h3>\n<p>对象的类型在 <code>new</code>  的时候被确定，它从始至终都不会改变。但是因为多态的存在，当把对象赋值给变量时，因为变量的类型不同，在编译期间就会出现类型转换的现象。</p>\n<ul>\n<li>向上转型<br>\n向上转型即将子类类型对象转为父类类型的对象，此时只能调用父类中拥有的属性和方法。<br>\n<strong>运行时，仍然按照对象本身的类型</strong>，执行的方法时子类重写的方法。<br>\n向上转型一般是安全的，而且一般也是自动完成的。</li>\n<li>向下转型<br>\n将父类类型的对象转为子类类型的对象称为向下转型。成功的向下转型就可以调用子类独有的属性和方法。<br>\n<strong>运行时，对象仍然按照它本身的属性运行</strong>。<br>\n向下转型不一定是安全的，可能会发生 <code>ClassCastException</code>  错误，需要使用 <code>instanceof</code>  进行判断。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Bird</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//... 鸟类共有的属性和方法</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">makeSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bird makes sound.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Pigeon</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Bird</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">//... 鸽子独有的属性和方法</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">makeSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"咕咕咕\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">sendMail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pigeon sends mails.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 向上转型，自动执行，某只鸽子是鸟</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">Bird</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pigeon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 错误，鸟类不能调用鸽子独有的方法，也不能说明某只鸟是鸽子</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// b.sendMail();</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// Pigeon p = b;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 向下转型，强制转换，告诉编译器某只鸟就是鸽子</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">Pigeon</span> p1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Pigeon</span><span class=\"token punctuation\">)</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 安全的向下转型，instanceof 判断，结果为 true 再转型</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Pigeon</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token class-name\">Pigeon</span> p2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Pigeon</span><span class=\"token punctuation\">)</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token comment\">// 可以调用鸽子独有的方法</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            p2<span class=\"token punctuation\">.</span><span class=\"token function\">sendMail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// JDK14 之后有一种更简单的写法</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Pigeon</span> p3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            p3<span class=\"token punctuation\">.</span><span class=\"token function\">sendMail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>只要 <code>instanceof</code>  的结果为 <code>true</code> ，那么该强制类型转换一定是安全的。</p>\n<h3 id=\"抽象类与接口\"><a class=\"markdownIt-Anchor\" href=\"#抽象类与接口\">#</a> 抽象类与接口</h3>\n<h4 id=\"抽象类\"><a class=\"markdownIt-Anchor\" href=\"#抽象类\">#</a> 抽象类</h4>\n<p>使用 <code>abstract</code>  关键字定义的方法被称为抽象方法。抽象方法没有方法体，方法本身没有任何意义，除非它被重写。<br>\n使用 <code>abstract</code>  关键字定义的类被称为抽象类，抽象类除了被继承也没有任何意义。抽象类中可以没有抽象方法，但<strong>一个类中只要有抽象方法，那它就被标记为抽象类</strong>。<br>\n抽象类可以有构造方法，但是<strong>抽象类不能被实例化</strong>，实例化的工作应该交给它的非抽象子类来完成，抽象类的构造方法是供它子类初始化使用的。<br>\n<strong>抽象类的非抽象子类必须实现抽象类中的所有抽象方法</strong>。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Son's method.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>因为抽象类需要被继承，所以 <code>abstract</code>  不能被 <code>final</code>  并类修饰一个类；同时 <code>abstract</code>  也不能与 <code>private</code> 、 <code>static</code> 、 <code>final</code>  或 <code>native</code>  修饰同一个方法。</p>\n<h4 id=\"接口\"><a class=\"markdownIt-Anchor\" href=\"#接口\">#</a> 接口</h4>\n<p>接口是抽象类的延伸，可以将接口看作是纯粹的抽象类。它是抽象方法的集合，<strong>利用接口可以达到 API 定义和实现分离的目的。</strong><br>\n接口不是类，是另一种引用数据类型，Java 中使用 <code>interface</code>  来定义一个接口。接口不能实例化，也不能包含任何非常量成员。<br>\n子接口可以继承父接口，使用 <code>extends</code>  关键字，并且<strong>可以多继承</strong>：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>修饰符<span class=\"token punctuation\">]</span> <span class=\"token keyword\">interface</span> 接口名 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/* 接口的成员列表:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        - 公共的静态常量</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        - 公共的抽象方法</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        - 公共的默认方法（JDK1.8 以上）</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        - 公共的静态方法（JDK1.8 以上）</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        - 私有方法（JDK1.9 以上）</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">USB3</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 静态常量</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">long</span> <span class=\"token constant\">MAX_SPEED</span> <span class=\"token operator\">=</span> <span class=\"token number\">500</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 抽象方法</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">in</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">out</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 默认方法</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"结束\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 静态方法</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"USB3.0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">// 子接口多继承</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Son</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Mother</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>JDK8 之前，接口中只允许出现：</p>\n<ul>\n<li>公共的静态常量， <code>public static final</code>  可以省略。</li>\n<li>公共的抽象方法， <code>public abstract</code>  可以省略。</li>\n</ul>\n<p>JDK8 中，接口允许声明：</p>\n<ul>\n<li>公共的默认的方法， <code>public</code>  可以省略， <code>default</code>  不能省略。</li>\n<li>公共的静态的方法， <code>public</code>  可以省略， <code>static</code>  不能省略。</li>\n</ul>\n<p>JDK9 后，接口又增加了：</p>\n<ul>\n<li>私有方法</li>\n</ul>\n<p>另外，接口中没有构造器，也没有初始化块，因为接口中没有成员变量需要动态初始化。</p>\n<p>与抽象类不同，抽象类使用 <code>extends</code>  继承，并且只能单继承，而接口通过 <code>implements</code>  关键词实现，并且可以<strong>多实现</strong>：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token keyword\">implements</span> interface1<span class=\"token punctuation\">,</span> interface2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 重写接口中的所有抽象方法 （必须）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 重写接口中的默认方法（可选）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Father</span> <span class=\"token keyword\">implements</span> interface1<span class=\"token punctuation\">,</span> interface2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 重写接口中的所有抽象方法 （必须）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 重写接口中的默认方法（可选）</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果实现接口的类是非抽象类，那么它必须重写接口中的所有抽象方法。<em>如果实现的多个接口中有重名的抽象方法，则只需要一次重写</em>。</p>\n<p>默认方法可以保留，也可以被重写，重写时不再保留 <code>default</code> ，但<em>如果一个类实现了多个接口，且多个接口中存在重名的默认方法，则该类必须对此重名的默认方法进行重写</em>。</p>\n<p>接口中的静态方法既不能被继承，也不能被重写。</p>\n<p><em>接口与实现类的对象构成多态引用</em>。</p>\n<h4 id=\"两者对比\"><a class=\"markdownIt-Anchor\" href=\"#两者对比\">#</a> 两者对比</h4>\n<table>\n<thead>\n<tr>\n<th>区别点</th>\n<th>抽象类</th>\n<th>接口</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>定义</td>\n<td>可以包含抽象方法的类</td>\n<td>主要是抽象方法和全局常量的集合</td>\n</tr>\n<tr>\n<td>组成</td>\n<td>构造方法、抽象方法、普通方法、常量和变量</td>\n<td>常量，抽象方法（默认方法和静态方法）</td>\n</tr>\n<tr>\n<td>使用</td>\n<td>子类继承抽象类</td>\n<td>类实现接口</td>\n</tr>\n<tr>\n<td>关系</td>\n<td>抽象类可以实现多个接口</td>\n<td>接口不能继承抽象类，可以继承多个接口</td>\n</tr>\n<tr>\n<td>设计模式</td>\n<td>模板方法</td>\n<td>简单工厂、工厂方法、代理模式等</td>\n</tr>\n<tr>\n<td>实际</td>\n<td>作为一个模板</td>\n<td>作为一种标准或是表示一种能力</td>\n</tr>\n</tbody>\n</table>\n<p>两者都可以通过对象的多态性产生实例化对象，但是抽象类有单继承的限制，而接口没有此限制。如果两者都可也使用的话，可以优先考虑接口。<br>\n在实际使用中，一个类通常不是继承自已经实现好的类，而要么是继承抽象类，要么是实现接口。</p>\n<h2 id=\"包和内部类\"><a class=\"markdownIt-Anchor\" href=\"#包和内部类\">#</a> 包和内部类</h2>\n<h3 id=\"包\"><a class=\"markdownIt-Anchor\" href=\"#包\">#</a> 包</h3>\n<p>包（package）是 Java 管理类文件、组织代码的一种机制，它可以解决类名冲突的问题。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 声明包</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>a</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 另一个包</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>b</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>包的声明使用 <code>package 包名</code> 的形式，包名单词全小写，中间使用 <code>.</code>  来指明包的层次，每一层也就表示一层文件目录。<br>\n一般情况下，会使用反写域名的形式，如域名为 <code>apache.org</code> ，那么包就是 <code>org.apache.something</code> 。<br>\n包可以包含类和子包，方便划分项目层次，控制访问权限，解决命名冲突，便于代码管理。<br>\n使用其他包下的类或接口，需要使用 <code>import 包名.类名</code> 的语句，或者 <code>包名.*</code>  导入这个包下的所有结构，如果导入的是 <code>java.lang</code>  下的包可以省略 <code>import</code> 。</p>\n<h3 id=\"内部类\"><a class=\"markdownIt-Anchor\" href=\"#内部类\">#</a> 内部类</h3>\n<p>如果在一个类的内部定义一个类，则将这个在类中再定义的这个类称为内部类。<br>\n当在一个事物的内部，还有一部分需要一个完整的结构进行描述，而这个内部的完整的结构又不在其他地方单独使用时，那么这个内部的完整结构可以考虑使用内部类。<br>\n内部类可以分为成员内部类和局部内部类。</p>\n<h4 id=\"成员内部类\"><a class=\"markdownIt-Anchor\" href=\"#成员内部类\">#</a> 成员内部类</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">OuterClass</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 内部类</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">InnerClass</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">// 内部类中可以使用外部类的成员</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 静态内部类</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StaticInner</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"静态内部类\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>成员内部类:</p>\n<ol>\n<li>可以声明为 <code>private</code>  或 <code>protected</code></li>\n<li>可以继承自己想要继承的父类，实现自己想要实现的父接口，和外部类的父类、父接口无关</li>\n<li>可以声明为 <code>abstract</code>  被其他类继承，也可以使用 <code>final</code>  阻止继承</li>\n<li>可以声明属性、方法、构造器等结构，但是非静态方法不允许声明静态成员（JDK8）</li>\n<li>非静态内部类可以使用外部类的<strong>所有成员</strong>，静态内部类只能使用外部类的<strong>静态成员</strong></li>\n<li>在外部类外面，非静态内部类的对象<strong>必须通过外部类的对象才能创建</strong>，静态内部类的对象<strong>可以直接创建</strong></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 静态内部类实例化</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">OuterClass<span class=\"token punctuation\">.</span>StaticInner</span> inner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OuterClass<span class=\"token punctuation\">.</span>StaticInner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 非静态内部类实例化</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">OuterClass</span> outer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OuterClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">OuterClass<span class=\"token punctuation\">.</span>InnerClass</span> inner <span class=\"token operator\">=</span> outer<span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InnerClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>其实严格的讲（参见 James Gosling 等人编著的《The Java Language Specification》），静态内部类不是内部类，而是类似于 C++ 的嵌套类的概念，外部类仅仅是静态内部类的一种命名空间的限定名形式而已。所以接口中的内部类通常都不叫内部类，因为接口中的内部成员都是隐式是静态的（即 public static）。例如：Map.Entry。</p>\n</blockquote>\n<p>编译成员内部类会生成 <code>外部类名$内部类名.class</code>  文件。</p>\n<h4 id=\"局部内部类\"><a class=\"markdownIt-Anchor\" href=\"#局部内部类\">#</a> 局部内部类</h4>\n<p>局部内部类是<em>定义在外部类的某个方法中</em>的完整结构。<br>\n局部类前面<strong>不能有权限修饰符</strong>，局部类如同局部变量一样有作用域。<br>\n局部类对外部类成员的访问范围取决于它所在的方法。<br>\n局部类可以使用所在方法的局部常量，JDK8 中，某个局部常量在局部类中被使用了会自动加 <code>final</code> 。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token comment\">// 因为如果 c 不是 final 的，那么 method 方法执行完，method 的栈空间就释放了，那么 c 也就消失了</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">A</span> obj <span class=\"token operator\">=</span> <span class=\"token class-name\">Outer</span><span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tobj<span class=\"token punctuation\">.</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 这里打印 c 就没有值可取了，所以把 c 声明为常量，存储在方法区中</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Outer</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">A</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">Sub</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"method.c = \"</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sub</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>编译局部内部类会生成 <code>外部类名$序号内部类名.class</code>  文件。</p>\n<p>匿名内部类是一种特殊的局部内部类，是只在创建对象时才会编写类体的一种写法，通常用来继承一个父类或者实现一个接口：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">new</span> 父类<span class=\"token operator\">/</span>父接口<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    子类实现的内容</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 或者</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>父类 object <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//... 匿名类代码</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>一个例子如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 创建的匿名类实现了接口 A，并直接调用了 a () 方法</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aaaa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>匿名内部类类中不能写构造方法，也不能定义其他的静态成员。如果匿名内部类创建的对象没有赋值给任何引用变量，则该对象用完一次之后就会被 JVM 销毁。<br>\n编译匿名内部类会生成 <code>外部类名$序号.class</code>  文件。</p>\n<h2 id=\"类和实例的初始化\"><a class=\"markdownIt-Anchor\" href=\"#类和实例的初始化\">#</a> 类和实例的初始化</h2>\n<h3 id=\"代码块\"><a class=\"markdownIt-Anchor\" href=\"#代码块\">#</a> 代码块</h3>\n<p>代码块和构造器一样，也是用于实例变量初始化等操作，也称为构造代码块。<br>\n如果多个重载的构造器有公共代码，并且这些代码都是先于构造器的其他代码执行的，那么可以将这部分代码抽取到代码块中。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 非静态代码块，为非静态变量初始化</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 静态代码块，为静态变量初始化</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>非静态代码块中的代码在 <code>new</code>  对象时自动执行，并且先于构造器</strong>。<br>\n<strong>每一个类的静态代码块只会执行一次，并且执行先于非静态代码块和构造器</strong>。</p>\n<h3 id=\"实例的初始化\"><a class=\"markdownIt-Anchor\" href=\"#实例的初始化\">#</a> 实例的初始化</h3>\n<p>实例的初始化过程，其实就是在 <code>new</code>  对象的过程中为实例变量赋有效初始值的过程。<br>\n过程： <code>super()</code>  或 <code>super(参数列表)</code>  =&gt; 实例变量显示赋值语句或非静态代码块 =&gt; 对应构造器剩下代码</p>\n<p>实例化特点：</p>\n<ul>\n<li>创建对象时才会执行，每次创建对象都会完成该对象的实例初始化</li>\n<li>调用哪个构造器，就是执行它对应的实例初始化方法</li>\n<li>子类实例初始化方法中 <code>super()</code>  或 <code>super(参数列表)</code>  代表了父类构造器对应的实例初始化方法</li>\n</ul>\n<h3 id=\"类的初始化\"><a class=\"markdownIt-Anchor\" href=\"#类的初始化\">#</a> 类的初始化</h3>\n<p>类的初始化其实就是为静态变量初始化。<br>\n类初始化时会调用一个 <code>()</code>  方法，这个方法是编译器自动生成的，编译器会将以下<strong>所有</strong>代码<strong>按顺序</strong>合并到类初始化方法中。</p>\n<ol>\n<li>静态类成员变量的显式赋值语句</li>\n<li>静态代码块中的语句</li>\n</ol>\n<p>每个类初始化只会进行一次，如果子类初始化时，发现父类没有初始化，那么会先初始化父类。<br>\n类的初始化优先于实例初始化</p>\n",
            "tags": [
                "编程学习",
                "Java基础",
                "Java",
                "Java学习"
            ]
        },
        {
            "id": "https://www.umi.homes/posts/9852/",
            "url": "https://www.umi.homes/posts/9852/",
            "title": "面向对象",
            "date_published": "2023-04-12T16:00:00.000Z",
            "content_html": "<h2 id=\"概述\"><a class=\"markdownIt-Anchor\" href=\"#概述\">#</a> 概述</h2>\n<p>面向对象编程（Object Oriented Programming，OOP）是一种程序设计思想，与面向过程不同，OOP 把对象作为程序的基本单元，把对象相关的数据和方法都组织为一个整体来看待。</p>\n<h3 id=\"面向对象与面向过程\"><a class=\"markdownIt-Anchor\" href=\"#面向对象与面向过程\">#</a> 面向对象与面向过程</h3>\n<div class=\"note info 面向对象与面向过程\">\n<p>以一个五子棋游戏为例：</p>\n<details class=\"info\"><summary>面向过程：</summary><div>\n<pre><code class=\"language-row\">五子棋游戏 &#123;\n  开始游戏();\n  黑棋走();\n  绘制画面();\n  判断输赢();\n  白棋走();\n  绘制画面();\n  判断输赢();\n  返回到 黑棋走();\n\n  游戏结束，输出结果;\n&#125;\n</code></pre>\n</div></details>\n<details class=\"info\"><summary>面向对象：</summary><div>\n<pre><code class=\"language-row\">五子棋游戏 &#123;\n  黑白棋子; // 两者行为基本相同，只是先后顺序、颜色属性不同\n  棋盘系统; // 负责绘制游戏图像\n  规则系统; // 判断游戏输赢，开始结束游戏\n&#125;\n</code></pre>\n</div></details>\n</div>\n<p>从上面的例子可以窥见，两者的主要区别在于：</p>\n<ol>\n<li>\n<p>面向过程的程序设计思想（Process-Oriented Programming）</p>\n<ul>\n<li>关注的焦点是过程：过程就是操作数据的步骤，如果某个过程的实现代码在很多地方重复出现，那么就可以把这个过程抽象为一个函数，这样就可以大大简化冗余代码，也便于维护；</li>\n<li>代码结构：以函数为组织单位。独立于函数之外的数据称为全局数据，在函数内部的称为局部数据；</li>\n<li><strong>以过程，步骤为主，考虑怎么做，程序员是具体执行者</strong>；</li>\n<li>制约了软件的可维护性和可扩展性。</li>\n</ul>\n</li>\n<li>\n<p>面向对象的程序设计思想（Object Oriented Programming）</p>\n<ul>\n<li>关注的焦点是类：<strong>面向对象思想</strong>就是在计算机程序设计过程中，参照现实中事物，将事物的<strong>属性特征</strong>、<strong>行为特征</strong>抽象出来，用类来表示。某个事物的一个具体个体称为实例或对象；</li>\n<li>代码结构：以类为组织单位。每种事物都具备自己的<strong>属性</strong>（即表示和存储数据，在类中用成员变量 <code>field</code>  表示）和<strong>行为 / 功能</strong>（即操作数据，在类中用成员方法 <code>method</code>  表示）；</li>\n<li><strong>以对象（谁）为主，考虑谁来做，谁能做，程序员是指挥者</strong>；</li>\n<li>面向对象仍然包含面向过程，只不过关注点变了，关注谁来做；</li>\n<li>软件可重用性、可维护性和可扩展性强。</li>\n</ul>\n</li>\n<li>\n<p>优缺点</p>\n<ul>\n<li>\n<p>面向过程：</p>\n<ul>\n<li>优点：效率高，性能好。面向过程强调代码的短小精悍，可以结合数据结构来开发高效率的程序。</li>\n<li>缺点：代码重用性低，扩展能力差，后期维护难度比较大。</li>\n</ul>\n</li>\n<li>\n<p>面向对象：</p>\n<ul>\n<li>优点：易维护、易扩展、易复用，结构清晰，更加符合人类的思维方式。</li>\n<li>缺点：由于面向更高的逻辑抽象层，使得面向对象在实现的时候，不得不做出性能上面的牺牲。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"类与对象\"><a class=\"markdownIt-Anchor\" href=\"#类与对象\">#</a> 类与对象</h3>\n<p>类（Class）和对象（Object）是面向对象的核心概念。<br>\n类是具有相同特征的事物的抽象描述，它定义了该集合中每个对象所共有的属性和方法。<strong>类是对象的模板</strong>。<br>\n对象指的是具体的某一个事物，<strong>对象是类的实例（instance）</strong>。<br>\nJava 中，使用 <code>class</code>  关键字来定义一个类，通过 <code>new</code>  操作符来创建一个对象：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * class 类名 &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *    成员变量，描述这类事物的属性</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *    成员方法，描述这类事物的行为</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * &#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, my name is %s, and I'm %d years old.\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 通过 new 创建了一个 Student 类型的实例，并通过 john 变量指向了它</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token class-name\">Student</span> john <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 有了指向实例的变量后，就可以通过变量来操作实例</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>john<span class=\"token punctuation\">.</span><span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hello, my name is John, and I'm 24 years old.</span></pre></td></tr></table></figure><p>这里所说的类一般是指实体类（entity），用于描述实体对象的属性和行为。<br>\n实体类中不写 <code>main()</code>  方法。</p>\n<h3 id=\"面向对象三大特点\"><a class=\"markdownIt-Anchor\" href=\"#面向对象三大特点\">#</a> 面向对象三大特点</h3>\n<p>面向对象的三大特性常被总结为<strong>封装、继承、多态</strong>。</p>\n<h4 id=\"封装\"><a class=\"markdownIt-Anchor\" href=\"#封装\">#</a> 封装</h4>\n<ul>\n<li>封装有两层含义：\n<ol>\n<li>指把对象相关的属性和方法封装成一个不可分割的整体（即封装成对象）。</li>\n<li>指的是 “信息隐藏”，隐藏对象的实现细节，只允许用户访问公开的属性和方法。</li>\n</ol>\n</li>\n<li>封装的优点：\n<ul>\n<li>良好的封装能够减少耦合，易于实现 “高内聚，低耦合” 的设计</li>\n<li>类内部的结构可以自由修改</li>\n<li>可以对成员变量进行更精确的控制</li>\n<li>隐藏信息，实现细节</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"继承\"><a class=\"markdownIt-Anchor\" href=\"#继承\">#</a> 继承</h4>\n<p>继承是 Java 面向对象编程技术的一块基石，因为它允许创建分等级层次的类。</p>\n<p>继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/computerscience/java-note/class.2fr1c7y1tdz4.webp\" alt=\"继承\"></p>\n<!-- <pre class=\"mermaid\">\nclassDiagram\nclass Person\nPerson : String name\nPerson : int age\nPerson : hello()\n\nclass Student\nStudent : + String school\nStudent : + String grade\nStudent : + String class\nStudent : + hello()\nStudent : + study()\n\nPerson <-- Student\n</pre> -->\n<p>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。<br>\n子类也可以用自己的方式实现父类的方法。<br>\n<strong>在 Java 中，类只能单继承。</strong></p>\n<h4 id=\"多态\"><a class=\"markdownIt-Anchor\" href=\"#多态\">#</a> 多态</h4>\n<p>所谓多态，指的是同类型的对象，可以表现出不同的形态。<br>\n多态允许在不改变方法调用的情况下，使用不同类型的对象来执行相同的操作，提高了代码的灵活性和可扩展性：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">makeSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Animal makes sound\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">makeSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dog barks\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">makeSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cat meows\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 父类或者接口定义的引用变量可以指向子类或具体实例对象</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">Animal</span> dog <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">Animal</span> cat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        dog<span class=\"token punctuation\">.</span><span class=\"token function\">makeSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Dog barks，调用子类 Dog 的方法</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        cat<span class=\"token punctuation\">.</span><span class=\"token function\">makeSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Cat meows，调用子类 Cat 的方法</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>多态还可分为编译时多态和运行时多态，编译时多态是指方法的重载，而运行时多态则指的是程序中定义的对象引用所指向的具体类型在运行期间才能确定下来。<br>\n在多态中，成员变量，静态方法看左边；非静态方法，编译看左边，运行看右边。<br>\n例如在上面的代码中， <code>Animal dog = new Dog()</code> 。编译时因为 <code>Animal</code>  中有 <code>makeSound()</code>  方法，所以编译成功；但当运行时，因为右边是 <code>new Dog()</code> ，所以调用的是 <code>Dog</code>  中的 <code>makeSound()</code>  方法。</p>\n<h3 id=\"面向对象五大原则\"><a class=\"markdownIt-Anchor\" href=\"#面向对象五大原则\">#</a> 面向对象五大原则</h3>\n<p>面向对象编程和面向对象设计的五大原则又称为 SOLID 原则</p>\n<table>\n<thead>\n<tr>\n<th>首字母</th>\n<th>指代</th>\n<th>概念</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>S(SRP)</td>\n<td>单一功能原则</td>\n<td>一个类，最好只做一件事，最好有且仅有一个引起它变化的原因</td>\n</tr>\n<tr>\n<td>O(OCP)</td>\n<td>开放封闭原则</td>\n<td>软件实体应该是可扩展的，而不可修改的</td>\n</tr>\n<tr>\n<td>L(LSP)</td>\n<td>里氏替换原则</td>\n<td>程序中的对象应该是可以在不改变程序正确性的前提下被它的子类所替换<br/>里氏替换原则是继承和多态的综合体现</td>\n</tr>\n<tr>\n<td>I(ISP)</td>\n<td>接口隔离原则</td>\n<td>多个特定客户端接口要好于一个宽泛用途的接口</td>\n</tr>\n<tr>\n<td>D(DIP)</td>\n<td>依赖倒置原则</td>\n<td>依赖于抽象。具体而言就是高层模块不依赖于底层模块，二者都同依赖于抽象；<br/>抽象不依赖于具体，具体依赖于抽象</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"类\"><a class=\"markdownIt-Anchor\" href=\"#类\">#</a> 类</h2>\n<p>类是封装对象属性和行为的载体，与大多数面向对象编程语言一样，Java 也使用 <code>class</code>  关键字来表示自定义类型。<br>\n使用自定义类型是为了更容易抽象现实事物，类对象的行为是以方法定义的，类对象的属性是以属性定义的。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// String 类型的成员变量</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">//name 的 getter 方法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">//name 的 setter 方法</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">//makeSound 方法</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">makeSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cat meows\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"方法\"><a class=\"markdownIt-Anchor\" href=\"#方法\">#</a> 方法</h3>\n<p>一个方法可以分为方法头和方法体，定义一个方法可以按如下形式：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>修饰符 返回值类型 方法名<span class=\"token punctuation\">(</span>参数类型 参数名<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  方法体</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">return</span> 返回值</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>修饰符：方法的修饰符是可选的，定义了方法的访问类型。</li>\n<li>返回值类型：表示方法结束后返回的结构的数据类型，如果没有返回值应该设为 <code>void</code> 。</li>\n<li>方法名：方法的实际名称，方法名和参数共同构成方法签名。</li>\n<li>参数类型：参数类型和参数名指定了调用方法时如何传值。方法的参数类型、顺序和个数构成参数列表。方法可以不含任何参数。</li>\n<li>方法体：包含具体的语句，定义方法的功能。方法体中还可以调用方法自身（即递归调用）。</li>\n<li><code>return</code> ：返回值需要与声明方法时的返回数据类型相同。 <code>void</code>  方法中可以省略。</li>\n</ul>\n<h4 id=\"方法的修饰符\"><a class=\"markdownIt-Anchor\" href=\"#方法的修饰符\">#</a> 方法的修饰符</h4>\n<p>Java 的方法有几种可选的修饰符，其中，权限修饰符的具体情况如下：</p>\n<table>\n<thead>\n<tr>\n<th>修饰符</th>\n<th>访问范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>public</code></td>\n<td>对所有类可见</td>\n</tr>\n<tr>\n<td><code>protected</code></td>\n<td>对同一个包内的类和所有子类可见</td>\n</tr>\n<tr>\n<td><code>默认（没有额外修饰符）</code></td>\n<td>对同一个包内的类可见</td>\n</tr>\n<tr>\n<td><code>private</code></td>\n<td>只能在同一个类内部可见</td>\n</tr>\n</tbody>\n</table>\n<p>除了权限修饰符，还有其他几种修饰符：</p>\n<ul>\n<li><code>static</code> ：修饰的方法称为静态方法，静态方法属于类而非具体实例，调用时不需要创建对象，使用 <code>类名.方法名</code> 即可。</li>\n<li><code>final</code> ：修饰的方法不允许被子类覆写（Override）。</li>\n<li><code>default</code> ：<strong>接口中使用</strong>。实现此接口的类如果没有覆写此方法则直接继承这个方法，不必强制实现此方法。</li>\n<li><code>abstract</code> ：<strong>抽象类中使用</strong>，被修饰的方法称为抽象方法，抽象方法不能有实体。</li>\n<li><code>synchronized</code> ：<strong>并发编程中使用</strong>，被修饰的方法在一个时刻只允许一个线程使用。</li>\n</ul>\n<h4 id=\"方法的参数\"><a class=\"markdownIt-Anchor\" href=\"#方法的参数\">#</a> 方法的参数</h4>\n<p><strong>Java 中的方法只有值传递</strong>。<br>\n当参数是基础数据类型时，会直接将其拷贝值传递到方法中；当参数时引用数据类型时，会将引用数据类型的地址传递给方法。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 打印结果为 10，i 值未改变</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">cleanArr</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 1,2,4,8，数组的值未改变</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    value <span class=\"token operator\">=</span> value <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cleanArr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当入参的数量不确定的时候，可以使用可变参数，用 <code>类型...</code>  来定义，可变参数相当于数组：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Group</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> names<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setNames</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> names<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>names <span class=\"token operator\">=</span> names<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//... 调用时</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">Group</span> g <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Group</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 传入多个，一个或者 0 个 String 参数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>g<span class=\"token punctuation\">.</span><span class=\"token function\">setNames</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Ann\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>g<span class=\"token punctuation\">.</span><span class=\"token function\">setNames</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>g<span class=\"token punctuation\">.</span><span class=\"token function\">setNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"方法的重载\"><a class=\"markdownIt-Anchor\" href=\"#方法的重载\">#</a> 方法的重载</h4>\n<p>在同一个类中，允许存在一个以上的同名方法，只要它们的参数列表不同即可。<br>\n重载与修饰符、返回值类型无关，只看参数列表，调用时根据参数列表来区分。JVM 会先找个数、类型最匹配的方法，再找个数和类型可以兼容的，如果同时多个方法兼容会报错。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//System.out.println () 方法就是典型的重载方法，其内部的声明形式如下：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PrintStream</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"特殊的方法\"><a class=\"markdownIt-Anchor\" href=\"#特殊的方法\">#</a> 特殊的方法</h4>\n<ol>\n<li>\n<p><code>main</code>  方法<br>\n <code>main()</code>  方法是一种特殊的静态方法，所以 Java 程序都是由 <code>public static void main(String[] args)</code>  方法开始执行的。<br>\n <code>main()</code>  方法中的 <code>args</code>  用来接受命令行参数，例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">java</span> Main.java <span class=\"token parameter variable\">-version</span> <span class=\"token parameter variable\">-author</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 命令行打印</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>-version, -author<span class=\"token punctuation\">]</span></pre></td></tr></table></figure></li>\n<li>\n<p>构造方法<br>\n构造方法在初始化类实例的时，设置实例的状态。<strong>构造方法的名称必须和类名相同</strong>。<br>\n如果没有显式指定构造方法，Java 会为该类提供一个默认构造方法。但当显式指定之后，无参的构造方法也必须显式指定。<br>\n利用方法的重载，<strong>一个类可以有多个构造方法</strong>。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// 如果没有显示指定，会有一个默认构造方法</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token comment\">// 构造方法还可以调用其他构造方法，使用 this (...)，便于代码复用</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">//... 调用时，使用 new 操作符调用构造方法</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"变量\"><a class=\"markdownIt-Anchor\" href=\"#变量\">#</a> 变量</h3>\n<p>Java 中的变量可以分为三种：</p>\n<ul>\n<li>局部变量：类的方法中的变量。</li>\n<li>实例变量：也叫成员变量，类方法外没有被 <code>static</code>  修饰的变量。</li>\n<li>类变量：也叫静态变量，类方法外被 <code>static</code>  修饰的变量。</li>\n</ul>\n<p>使用 <code>final</code>  修饰的变量是一个常量，表示其不可被修改。</p>\n<h4 id=\"局部变量\"><a class=\"markdownIt-Anchor\" href=\"#局部变量\">#</a> 局部变量</h4>\n<ul>\n<li>局部变量声明在方法、构造方法或者语句块中；</li>\n<li>局部变量在方法或语句块被执行时才创建，当执行完成后，变量将会销毁；</li>\n<li>局部变量没有默认值，必须经过初始化才能使用；</li>\n<li>基本类型的局部变量存储在栈中，引用类型的局部变量存储在堆中，栈中存放它的引用；</li>\n<li><strong>访问修饰符不能用于局部变量，局部变量只在声明它的方法或语句块中可见</strong></li>\n</ul>\n<h4 id=\"实例变量\"><a class=\"markdownIt-Anchor\" href=\"#实例变量\">#</a> 实例变量</h4>\n<ul>\n<li>实例变量声明在方法和语句块之外，且不能被 <code>static</code>  修饰符修饰；</li>\n<li>实例变量在对象创建的时候创建，在对象销毁的时候被销毁；</li>\n<li>实例变量具有默认值。变量的值可以在声明时指定，也可以在构造方法中指定；</li>\n<li><strong>实例变量存储在堆中</strong>；</li>\n<li>实例变量在同一个类中是可见的，对外可见的情况由具体的访问修饰符确定。一般情况下应该设为私有的，并对外提供 <code>getter/setter</code></li>\n</ul>\n<h4 id=\"类变量\"><a class=\"markdownIt-Anchor\" href=\"#类变量\">#</a> 类变量</h4>\n<ul>\n<li>类变量也称为静态变量，类变量声明在方法和语句块之外，使用 <code>static</code>  修饰符进行修饰；</li>\n<li>类变量在第一次被访问的时候创建，在程序结束时销毁；</li>\n<li>类变量具有默认值。变量的值可以在声明时指定，可以在构造方法中指定，静态变量还可以在静态语句块中初始化；</li>\n<li><strong>类变量存储在静态存储区</strong>；</li>\n<li>访问修饰符可以用于类变量，但为了对类的使用者可见，大部分都使用 <code>public</code>  修饰；</li>\n<li>与实例变量不同，静态变量使用 <code>类名.属性名</code> 调用，<strong>无论一个类创建了多少个对象，类只拥有类变量的一份拷贝</strong>。</li>\n</ul>\n<h3 id=\"this-关键字\"><a class=\"markdownIt-Anchor\" href=\"#this-关键字\">#</a> this 关键字</h3>\n<p><code>this</code>  关键字用于表示本类当前的对象，它始终指向当前实例。<br>\n <code>this.field</code>  可以访问该成员的实例变量，当没有冲突的时，可以省略 <code>this</code> ，否则需要添加 <code>this</code> 。<br>\n <code>this(参数列表)</code>  可以调用本类的构造方法，实现构造器之间的调用。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> author<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 调用 this (...args)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 如果不调用，字符串默认值会指向 null</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 可以使用这种方法，为无参构造设制初始值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> author<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 变量名相同，需要使用 this</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>author <span class=\"token operator\">=</span> author<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"javabean\"><a class=\"markdownIt-Anchor\" href=\"#javabean\">#</a> JavaBean</h3>\n<p>JavaBean 是 Java 语言编写类的一种标准规范，标准的 JavaBean 一般遵循以下规范：</p>\n<ol>\n<li>类必须是具体的和公开的；</li>\n<li>类必须有无参数的构造方法；</li>\n<li>成员变量私有化，并且提供操作成员变量的 <code>setter/getter</code> ；</li>\n<li>实现 <code>java.io.Serializable</code>  接口，</li>\n</ol>\n<p>例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Serializable</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 两个属性及 getter、setter 方法</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"对象\"><a class=\"markdownIt-Anchor\" href=\"#对象\">#</a> 对象</h2>\n<p>对象通过类实例化而来，Java 中使用 <code>new</code>  操作符创建对象：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Student：类名</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * john：对象的标识符</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * new：创建对象操作符</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * \"john\",24：构造函数方法</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">Student</span> john <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">Student</span> ann <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ann\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">Student</span> s <span class=\"token operator\">=</span> john<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"内存分析\"><a class=\"markdownIt-Anchor\" href=\"#内存分析\">#</a> 内存分析</h3>\n<p><code>Student</code>  对象被创建出来后，标识符 <code>john</code>  就是一个指向它的引用，内存中为它分配了存储空间，如下是一个 JVM 架构图：<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/computerscience/java-note/JVM.79dq8xy54ks0.png\" alt=\"JVM架构图\"></p>\n<ul>\n<li>堆（heap）：此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。</li>\n<li>栈（stack）：这里指的是 Java 虚拟机栈（Java Virtual Machine Stack）。它用于存放局部变量。局部变量存放了编译期可知长度的各种基本数据类型和对象引用（对象在堆内存的首地址）。方法执行完，自动释放。</li>\n<li>方法区（Method Area）：用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</li>\n</ul>\n<p>如上面一段代码：<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/computerscience/java-note/object.3c4umx34jqc0.webp\" alt=\"内存分析\"></p>\n<p>使用 <code>new</code>  创建的结构（数组，对象等）都存放在堆空间中，对象的属性值也在堆空间中。<br>\n对象的标识符存储的是对象在内存中的地址，实际上是对对象的引用。当直接打印对象时，如果没有重写 <code>toString()</code>  方法，会调用 <code>Object</code>  的 <code>toString()</code> ，<strong>打印的对象的 <code>hashCode</code> </strong>。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Object 源代码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Object</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"@\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHexString</span><span class=\"token punctuation\">(</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 以 Student 类为例</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">Student</span> john <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"john\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>john<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印结果：Student@8efb846</span></pre></td></tr></table></figure><p>创建多个对象时，每个对象都拥有当前类的一套属性的副本，通过一个对象修改其属性时，不会影响其他对象的同名属性。<br>\n在进行赋值操作时，如 <code>s = john</code> ，被赋值给变量的是对象的内存地址，没有在堆空间中创建新的对象，而是两个变量指向了同一个对象。因此通过其中一个变量修改对象的属性时，也会影响另一个变量对此属性的调用。</p>\n<h3 id=\"生命周期\"><a class=\"markdownIt-Anchor\" href=\"#生命周期\">#</a> 生命周期</h3>\n<p>每个对象都有其生命周期，当对象的生命周期结束的时，分配给该对象的内存地址需要被回收。Java 中的垃圾回收器会自动回收无用的垃圾。</p>\n<h4 id=\"垃圾回收\"><a class=\"markdownIt-Anchor\" href=\"#垃圾回收\">#</a> 垃圾回收</h4>\n<p>判断对象是否存活有两种常见的方法：引用计数法和可达性分析：</p>\n<ol>\n<li>引用计数法<br>\n给对象添加一个引用计数器，当对象增加一个引用时计数器加 1，引用失效时计数器减 1, 引用为 0 的对象可被回收。<br>\n当两个对象出现循环引用的情况时，引用计数器永远不会为 0，导致无法对它们进行回收，因此 JVM 中不适用引用计数法。</li>\n<li>可达性分析<br>\n从 GC Roots 为起始点进行搜索，JVM 将能够到达的对象视为存活，不可达的对象视为死亡。<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/computerscience/java-note/object2.4w9fidnbm0e0.webp\" alt=\"垃圾回收\"><br>\n<em>当 Object1 不在引用 Object3 后，虽然 Object3 和其他对象还有相互引用，但整个红框中的对象对 JVM 而言都不再可达，所以都被视为垃圾</em></li>\n</ol>\n<p>可以作为 GC Roots 的对象包括：</p>\n<ul>\n<li>虚拟机栈中引用的对象</li>\n<li>本地方法栈中引用的对象（Native 方法）</li>\n<li>方法区中，类静态属性引用的对象</li>\n<li>方法区中，常量引用的对象</li>\n</ul>\n<h4 id=\"finalize\"><a class=\"markdownIt-Anchor\" href=\"#finalize\">#</a> finalize()</h4>\n<p><code>finalize()</code>  在对象被垃圾回收器回收之前调用，用来清除回收对象。<br>\n <code>finalize()</code>  定义在 <code>java.lang.Object</code>  里，因此每个对象都继承了这个方法。这个方法在 GC 启动，该对象被回收时被调用。<br>\n <code>finalize()</code>  通常是不可预测且危险的，并且一般情况下也是不必要的。使用 <code>finalize()</code>  会导致行为的不稳定和其他问题，也会降低性能。<br>\n<strong>最好不要使用 <code>finalize()</code> </strong></p>\n",
            "tags": [
                "编程学习",
                "Java基础",
                "Java",
                "Java学习"
            ]
        },
        {
            "id": "https://www.umi.homes/posts/8b5a/",
            "url": "https://www.umi.homes/posts/8b5a/",
            "title": "数组与String",
            "date_published": "2023-04-08T16:00:00.000Z",
            "content_html": "<h2 id=\"数组\"><a class=\"markdownIt-Anchor\" href=\"#数组\">#</a> 数组</h2>\n<h3 id=\"数组简介\"><a class=\"markdownIt-Anchor\" href=\"#数组简介\">#</a> 数组简介</h3>\n<p>Java 中的数组用于存储多个相同数据类型的元素，是一种引用数据类型，存储的数组元素可以是基本数据类型，也可以是引用数据类型。<br>\n定义一个数组变量的语法为 <code>数据类型[] 标识符</code> 或 <code>数据类型 标识符[]</code> 。定义完成数组变量之后需要对数组进行初始化，所谓初始化，即为数组在内存中开辟<strong>一块连续的内存空间用于存储数据</strong>，数组元素在内存中是紧密有序的排列的。与 JavaStript 不同，Java 数组一旦创建，其大小就不可改变。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 声明数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 推荐的写法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> array2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不会报错，但不推荐的写法</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        array1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        array2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 可以简写如下</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在定义数组的同时为其赋予初始值叫静态初始化，而先声明数组长度，之后再为其赋值的是动态初始化。采用动态初始化声明的数组，Java 会根据声明的数组类型自动为其分配初始值，如：布尔数组元素初始值为 <code>false</code> ，整型数组元素初始值为 <code>0</code> ，浮点型数组元素初始值为 <code>0.0</code> ，引用类型数组元素初始值为 <code>null</code> 。</p>\n<p>类似的，声明二维数组的方法如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 推荐的声明方式</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> matrix1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 不会报错但是不推荐的声明方式</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> matrix2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> matrix3<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>动态初始化时，可以先确定行数和列数 <code>new 数据类型[M][N]</code> ；也可以先确定行数，之后再确定列数 <code>new 数据类型[N][]</code> 。<br>\n数组的长度属性可以使用 <code>array.length</code>  获得。</p>\n<h3 id=\"数组方法\"><a class=\"markdownIt-Anchor\" href=\"#数组方法\">#</a> 数组方法</h3>\n<h4 id=\"数组遍历\"><a class=\"markdownIt-Anchor\" href=\"#数组遍历\">#</a> 数组遍历</h4>\n<p>遍历是一种常用的数组操作。<br>\n数组中的元素可以通过数组下标来获取，数组下标从 <code>0</code>  开始，到 <code>数组长度-1</code>  结束。<br>\n结合循环语句和数组下标，可以实现数组的遍历：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>另外，Java 还提供了一种增强的 <code>for</code>  循环，用于直接遍历数组元素。<br>\n如下所示，在这里， <code>item</code>  为数组元素而非下标：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> item <span class=\"token operator\">:</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"遍历衍生方法\"><a class=\"markdownIt-Anchor\" href=\"#遍历衍生方法\">#</a> 遍历衍生方法</h4>\n<p>从数组遍历上，可以衍生出其他的数组方法，例如：反转数组、数组特征值等：</p>\n<p>反转数组，通过遍历，将前后两个元素交换：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>len <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            array<span class=\"token punctuation\">[</span>len <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// Arrays.toString () 方法由 java.util.Arrays; 提供，用于打印数组</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>数组特征值计算，通过遍历进行统计</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> min <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> max <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> item <span class=\"token operator\">:</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            min <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            max <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            sum <span class=\"token operator\">+=</span> item<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">double</span> average <span class=\"token operator\">=</span> sum <span class=\"token operator\">/</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"最小值为%d，最大值为%d，合计为%d，平均值为%.2f\\n\"</span><span class=\"token punctuation\">,</span> min<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">,</span> average<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"数组排序和查找\"><a class=\"markdownIt-Anchor\" href=\"#数组排序和查找\">#</a> 数组排序和查找</h4>\n<p>排序和查找也是数组中常用的操作。排序的方法有很多，可以参照这个<span class=\"exturl\" data-url=\"aHR0cHM6Ly92aXN1YWxnby5uZXQ=\">可视化网站</span>进行理解和学习。<br>\n这里排序以冒泡排序和快速排序，查找以二分查找为例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义一个 swap 方法用于交换数组元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 冒泡排序</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 已经排好序的不用再排序，j &lt; len - i -i</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 每一轮将最大的数 “冒” 到最后面</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 快速排序</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">//partitionIndex 左侧都是比它小的，右侧都是比它大的</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">int</span> partitionIndex <span class=\"token operator\">=</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 再对它的左侧和右侧进行排序</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> partitionIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> partitionIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 固定选择 left 为基准数，index 记为 left + 1</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 如果小于基准数，则将其进行交换</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\">// 交换，返回排序后基准数的索引</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">return</span> index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\">// 二分查找</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">// 二分查找要求数组是有序排列，这里假设为升序排列</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">==</span> array<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token comment\">// 如果找到，返回数组元素下标</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">></span> array<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token comment\">//target 更大，说明在右侧</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            left <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token comment\">//target 更小，说明在左侧</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            right <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token comment\">// 未找到，返回 - 1</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"数组的存储\"><a class=\"markdownIt-Anchor\" href=\"#数组的存储\">#</a> 数组的存储</h3>\n<p>Java 的数组为引用数据类型，数组标识符中存储的是首个数组元素的内存地址（可以看成是一个指针），这个地址值存储在<strong>栈内存</strong>中。而数组元素占有一片连续的内存空间，存储在<strong>堆内存</strong>中。<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/computerscience/java-note/array.5fwaxw1cxyg0.webp\" alt=\"一维数组\"></p>\n<p>二维数组也是类似，只不过在二维数组中，每一个数组元素又是指向另一个数组的地址值。</p>\n<p>因此，当使用赋值符号 <code>=</code> ，实际上是复制了数组的地址，而非真的复制了数组元素。当希望复制一个数组，需要使用遍历的方法，对数组的每一个元素都进行复制。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr2 <span class=\"token operator\">=</span> arr1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        arr2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 结果为 10，因为 arr1 和 arr2 指向同一个内存地址</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>也是因为同样的原因，两个数组直接使用比较运算符 <code>==</code> ，进行比较的是它们的地址值，而非它们的元素，即使两个数组元素相同，也会返回 <code>false</code> 。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arr1 <span class=\"token operator\">==</span> arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>因此，为了便于进行常见的数组操作，Java 提供了一个 <code>Arrays</code>  工具类，它包括了数组排序、数组查找（二分查找）、数组比较和数组复制（浅拷贝）等操作。</p>\n<h2 id=\"字符串\"><a class=\"markdownIt-Anchor\" href=\"#字符串\">#</a> 字符串</h2>\n<h3 id=\"string-简介\"><a class=\"markdownIt-Anchor\" href=\"#string-简介\">#</a> String 简介</h3>\n<p>字符串在 Java 中是一种引用数据类型，Java 提供了 <code>String</code>  类来创建和操作字符串。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"字符串\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"字符串\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>两种方法的区别在于，使用 <code>&quot;&quot;</code>  方法给出的字符串存储在字符串常量池中，并且相同的内容只会在其中存储一份。但是通过构造方法 <code>new</code>  创建，每次都会产生一个新对象，存储在堆内存中。</p>\n<p>JDK8 中 <code>String</code>  部分源代码如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">String</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">implements</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CharSequence</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/** The value is used for character storage. */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">char</span> value<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/** Cache the hash code for the string */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Default to 0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// ......</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>String</code>  类被 <code>final</code>  修饰，表示不可继承类。<br>\n <code>String</code>  类的数据存储于 <code>char[]</code>  数组中，这个数组也被 <code>final</code>  修饰，表示 <code>String</code>  对象不可被更改。</p>\n<p>在 JDK9 之后，使用 <code>byte[]</code>  数组：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">String</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">implements</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CharSequence</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Constable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ConstantDesc</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Stable</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// ......</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Java 通过这种方法，可以：</p>\n<ol>\n<li>保证 <code>String</code>  对象的安全性，避免 <code>String</code>  被更改。</li>\n<li>保证 <code>hash</code>  值不会频繁变更。</li>\n<li>可以实现字符串常量池。</li>\n</ol>\n<p>当使用 <code>&quot;&quot;</code>  创建字符串时，JVM 会先检查对象是否存在字符串常量池中，如果存在则返回该对象的引用。这样可以减少同一个值的字符串对象重复创建，节约内存。<br>\n当使用 <code>String str = new String(&quot;Hello&quot;)</code>  方法时， <code>&quot;Hello&quot;</code>  常量字符串会先放到常量结构中，类加载的时候， <code>&quot;Hello&quot;</code>  会在常量池中创建。当调用 <code>new</code>  时，JVM 会调用 <code>String</code>  的构造函数，同时引用常量池中的 <code>&quot;Hello&quot;</code>  字符，在堆内存中创建一个 <code>String</code>  对象，然后 <code>str</code>  引用 <code>String</code>  对象。</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/computerscience/java-note/string.30j601t58200.webp\" alt=\"string\"></p>\n<p>JDK6 中，字符串常量池在方法区，JDK7 开始，字符串常量池移动到了堆空间。</p>\n<h3 id=\"string-性能考量\"><a class=\"markdownIt-Anchor\" href=\"#string-性能考量\">#</a> String 性能考量</h3>\n<p>在字符串拼接时，字符串常量进行的拼接，结果仍然存储在字符串常量池中，当有变量参与的时候，结果存储在堆中。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"World\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">String</span> s3 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"World\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">String</span> s4 <span class=\"token operator\">=</span> s1 <span class=\"token operator\">+</span> <span class=\"token string\">\"World\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">String</span> s5 <span class=\"token operator\">=</span> s1 <span class=\"token operator\">+</span> s2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s3 <span class=\"token operator\">==</span> s4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s3 <span class=\"token operator\">==</span> s5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s4 <span class=\"token operator\">==</span> s5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>JDK8 中，在字符串变量拼接时，编译器实际上优化成了 <code>StringBuilder</code>  的方式：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"World\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 实际上的优化</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// String s5 = new StringBuilder().append(s1).append(s2).toString();</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">String</span> s5 <span class=\"token operator\">=</span> s1 <span class=\"token operator\">+</span> s2<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>JDK8 及以后，Java 会根据变量的长度预估计算后的长度，然后创建一个数组，最后将这个数组变为一个字符串。</p>\n<p>不论底层是哪种方法进行的字符串拼接，最终都会 <code>new</code>  一个 <code>String</code>  对象，因此最终的地址值不同，使用 <code>==</code>  判断结果是 <code>false</code> 。<br>\n正确的字符串的比较，应该使用 <code>equals()</code>  方法。</p>\n<p>虽然可以使用 <code>+</code>  直接拼接字符串，但是这种方法会在内存中生成大量临时的字符串对象，不但浪费内存，也影响了程序性能和 GC 效率。正确的拼接方案应该优先考虑用 <code>StringBuilder</code>  的 <code>append()</code>  方法来替代 <code>+</code> 。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token char\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>StringBuilder</code>  是一个可变对象，可以预分配缓冲区，在往其中新增字符时，不会创建新的临时对象。另外， <code>append()</code>  方法会返回 <code>this</code> ，可以实现链式调用。<br>\n在并发编程中， <code>String</code>  对象的拼接涉及到线程安全时，可以考虑使用 <code>StringBuffer</code>  对象，它通过同步来保证多线程操作的安全。因为同步会带来执行速度的下降，与 <code>StringBuilder</code>  相比，它的性能稍差。</p>\n<h3 id=\"string-方法\"><a class=\"markdownIt-Anchor\" href=\"#string-方法\">#</a> String 方法</h3>\n<p><code>String</code>  的所有方法可以在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vZW4vamF2YS9qYXZhc2UvMTcvZG9jcy9hcGkvamF2YS5iYXNlL2phdmEvbGFuZy9TdHJpbmcuaHRtbA==\"> Oracle 的 API 文档</span>上找到。<br>\n一些常用的方法如下：</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>public boolean equals(Object anotherObject)</code></td>\n<td>比较字符串内容是否相同</td>\n</tr>\n<tr>\n<td><code>public boolean equalsIgnoreCase(String anotherString)</code></td>\n<td>忽略大小写比较字符串内容是否一致</td>\n</tr>\n<tr>\n<td><code>public int length()</code></td>\n<td>返回字符串长</td>\n</tr>\n<tr>\n<td><code>public char charAt(int index)</code></td>\n<td>获取某个索引位置的字符</td>\n</tr>\n<tr>\n<td><code>public char[] to CharArray()</code></td>\n<td>字符串转为字符串数组</td>\n</tr>\n<tr>\n<td><code>public String substring(int beginIndex, int endIndex)</code></td>\n<td>根据开始结束位置获取子串（左闭右开）</td>\n</tr>\n<tr>\n<td><code>public String replace(CharSequence target, CharSequence replacement)</code></td>\n<td>用新值替换字符串中的旧值得到新串</td>\n</tr>\n<tr>\n<td><code>public String[] split(String regex)</code></td>\n<td>使用正则表达式分割字符串得到字符串数组</td>\n</tr>\n<tr>\n<td><code>public String toLowerCase()</code></td>\n<td>转为小写字符串</td>\n</tr>\n<tr>\n<td><code>public String toUpperCase()</code></td>\n<td>转为大写字符串</td>\n</tr>\n<tr>\n<td><code>public String intern()</code></td>\n<td>将结果在常量池中共享</td>\n</tr>\n<tr>\n<td><code>public String concat(String str)</code></td>\n<td>字符串拼接</td>\n</tr>\n<tr>\n<td><code>public boolean contains(CharSequence cs)</code></td>\n<td>是否包含指定 <code>char</code>  值序列</td>\n</tr>\n<tr>\n<td><code>public int indexOf(String str)</code></td>\n<td>返回指定子串首次出现在该字符串中的索引</td>\n</tr>\n<tr>\n<td><code>public int lastIndexOf(String str)</code></td>\n<td>返回指定子串最后一次出现在该字符串中的索引</td>\n</tr>\n<tr>\n<td><code>public String trim()</code></td>\n<td>去除字符串开头和结尾的空格</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"练习-demo\"><a class=\"markdownIt-Anchor\" href=\"#练习-demo\">#</a> 练习 demo</h2>\n<ol>\n<li>demo01 打印幻方\n<blockquote>\n<p>幻方（Magic square），又称为纵横图，由于一组排放在正方形中的整数组成，特点是其每行、每列和每对角线的和均相等。<br>\n通常由<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mtext>～</mtext><msup><mi>N</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">1～N^{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord cjk_fallback\">～</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span> 的连续整数组成，其中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> 为正方形的行数或列数。</p>\n</blockquote>\n</li>\n</ol>\n<p>最简单的奇数阶幻方构造方法如下：</p>\n<ul>\n<li>把 1 放在第一行中间；</li>\n<li>按顺序将<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mtext>～</mtext><msup><mi>N</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">2～N^{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord cjk_fallback\">～</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span> 放在 <code>[i+1][j+1]</code>  的方格上；</li>\n<li>当右边出界时，从左边进入；当上方出界时，从下方进入；</li>\n<li>当右上方已填有数，把数填写在它的正下方方格中；</li>\n<li>按以上步骤填写完所有数据。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">magicSquare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入一个大于等于3的奇数：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Scanner</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入错误！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> matrix <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> row <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> col <span class=\"token operator\">=</span> n <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    matrix<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n <span class=\"token operator\">*</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        row <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> row <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        col <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> col <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            row <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> row <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            col <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> col <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        matrix<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>demo02 简易命令行五子棋</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Gomoku</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Gomoku</span> demo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Gomoku</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        demo<span class=\"token punctuation\">.</span><span class=\"token function\">playGame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> matrix <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10*10 矩阵作为棋盘</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Scanner</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Player</span> curPlayer <span class=\"token operator\">=</span> <span class=\"token class-name\">Player</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PLAYER1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 判读当前玩家</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> isOver <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 游戏结束标识</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> playCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 游戏计数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Player</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">PLAYER1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"黑方玩家\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">PLAYER2</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"白方玩家\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> player<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">Player</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> player<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>player <span class=\"token operator\">=</span> player<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">Player</span> <span class=\"token function\">switchPlayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> <span class=\"token constant\">PLAYER1</span> <span class=\"token operator\">?</span> <span class=\"token constant\">PLAYER2</span> <span class=\"token operator\">:</span> <span class=\"token constant\">PLAYER1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     * 打印棋盘</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     * 为 0 打印 \"-\"</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     * 为 1 打印 \"*\"</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     * 为 - 1 打印 \"O\"</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     * */</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printGomoku</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"======================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"   \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\"  \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    <span class=\"token keyword\">case</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"O \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    <span class=\"token keyword\">case</span> <span class=\"token number\">0</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"- \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"* \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>     * 输入处理，合法输入为 0-99 的数字</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">boolean</span> isValid <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isValid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前玩家是：\"</span> <span class=\"token operator\">+</span> curPlayer<span class=\"token punctuation\">.</span>player<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入落子位置：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                <span class=\"token keyword\">int</span> input <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>input <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> input <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                    <span class=\"token keyword\">int</span> row <span class=\"token operator\">=</span> input <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                    <span class=\"token keyword\">int</span> col <span class=\"token operator\">=</span> input <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                        isValid <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                        matrix<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> curPlayer<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                        playCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">judgment</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                            isOver <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                            <span class=\"token function\">printGomoku</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"游戏结束，胜利者为%s。\\n\"</span><span class=\"token punctuation\">,</span> curPlayer<span class=\"token punctuation\">.</span>player<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>playCount <span class=\"token operator\">==</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                            isOver <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"游戏结束，平局。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                        curPlayer <span class=\"token operator\">=</span> curPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">switchPlayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入位置已有棋子，请重新输入！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入不合法（0～99），请重新输入！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入不合法（0～99），请重新输入！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>                sc<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>     * 判断落子后是否分出胜负</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>     * 竖向最多范围 [row-4,row+4]</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>     * 横向最多范围 [col-4,col+4]</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">judgment</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> col<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token keyword\">int</span> minRow <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>row <span class=\"token operator\">-</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token keyword\">int</span> maxRow <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>row <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token keyword\">int</span> minCol <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>col <span class=\"token operator\">-</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token keyword\">int</span> maxCol <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>col <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> minRow<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> maxRow <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> curPlayer<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>                count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>                count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxRow <span class=\"token operator\">-</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> minCol<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> maxCol <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> curPlayer<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>                count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>                count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxCol <span class=\"token operator\">-</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>minRow <span class=\"token operator\">-</span> row<span class=\"token punctuation\">,</span> minCol <span class=\"token operator\">-</span> col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>maxRow <span class=\"token operator\">-</span> row<span class=\"token punctuation\">,</span> maxCol <span class=\"token operator\">-</span> col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>row <span class=\"token operator\">+</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col <span class=\"token operator\">+</span> i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> curPlayer<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>                count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>                count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>minCol <span class=\"token operator\">-</span> col<span class=\"token punctuation\">,</span> row <span class=\"token operator\">-</span> maxRow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>maxCol <span class=\"token operator\">-</span> col<span class=\"token punctuation\">,</span> row <span class=\"token operator\">-</span> minRow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>row <span class=\"token operator\">-</span> j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col <span class=\"token operator\">+</span> j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> curPlayer<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>                count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>                count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">playGame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isOver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>            <span class=\"token function\">printGomoku</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>            <span class=\"token function\">handleInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><!-- // TODO 补充Arrays工具类，补充字符串编码相关，补充String相关 -->\n",
            "tags": [
                "编程学习",
                "Java基础",
                "Java",
                "Java学习"
            ]
        },
        {
            "id": "https://www.umi.homes/posts/f337/",
            "url": "https://www.umi.homes/posts/f337/",
            "title": "Java入门知识",
            "date_published": "2023-04-01T16:00:00.000Z",
            "content_html": "<h2 id=\"初识-java\"><a class=\"markdownIt-Anchor\" href=\"#初识-java\">#</a> 初识 Java</h2>\n<h3 id=\"历史回顾\"><a class=\"markdownIt-Anchor\" href=\"#历史回顾\">#</a> 历史回顾</h3>\n<p>Java 是 1995 年由 Sun 公司推出一门面向对象的程序设计语言，由詹姆斯・高斯林 (James Gosling) 等人开发设计。<br>\n在开发初期，这门语言被命名为 Oak，并被计划应用于家用电器等小型嵌入式设备。但是随着市场需求的转变，Oak 并未被嵌入式设备采用，而 Sun 也发现了 Oak 在互联网中的应用前景，于是对其进行改造后，以 Java 的名义正式发布。<br>\n随着互联网的迅猛发展，Java 也得到了越来越广泛的应用，并且已成为 Internet 中最具有影响力、最受欢迎的编程语言之一。到 2009 年，Sun 公司被 Oracle 收购，Java 也因此成为 Oracle 的产品。</p>\n<h3 id=\"java-的版本\"><a class=\"markdownIt-Anchor\" href=\"#java-的版本\">#</a> Java 的版本</h3>\n<p>由 Oracle 公司推出的 Java 主要分为两个版本：JavaSE 和 JavaEE，即 Java 的标准版和 Java 的企业版。Java 的标准版主要用于桌面应用程序的开发，企业版主要用于服务器应用程序开发，JavaEE 兼容 JavaSE 版本。另外还有一个为移动设备提供的 JavaME。<br>\n以 JavaSE 为例，当前最新的版本为 JavaSE20，而在之前的版本中，JavaSE8、JavaSE11 和 JavaSE17 为三个长期支持版本（LTS）<br>\n除去 Oracle 公司推出的 JDK，还有一个开源的 Java 平台，最早由 Sun 公司推出的 OpenJDK。OpenJDK 中所有代码都是免费开源的，它去除了 OracleJDK 中涉及到知识产权的代码，并被广泛应用于 linux 系统上。OpenJDK 的运行效果与 OracleJDK 是相同的，但是它只包含了 JDK 中最精简的功能。</p>\n<h3 id=\"java-的特性\"><a class=\"markdownIt-Anchor\" href=\"#java-的特性\">#</a> Java 的特性</h3>\n<ul>\n<li>简单易学：与 C/C++ 相比，Java 在它们基础上进行了简化，取消了多态继承和指针，并且进行了垃圾自动收集工作。</li>\n<li>面向对象：面向对象是 Java 的基础，它是一门纯面向对象语言。</li>\n<li>分布性：Java 的分布性包括操作分布和数据分布，它们都可以分布在不同的主机上。</li>\n<li>可移植性：Java 程序具有与体系结构无关的特性，可以非常方便地移植到不同的平台上，Java 的类库也实现了针对不同平台的接口。</li>\n<li>解释型：运行 Java 程序需要解释器，任何移植了 Java 解释器的设备都可以用 Java 字节码进行解释执行。字节码独立于平台，并且本身就携带了编译时的信息。</li>\n<li>安全性：Java 语言取消了类 C 语言中的指针和内存释放等语法，有效地避免了用户对内存的非法操作。</li>\n<li>健壮性：Java 的检查程序会在编译和运行时发现并消除错误，类型检查也可以在开发早期发现错误。</li>\n<li>多线程：Java 的多线程和同步机制可以使程序在同时间进行多项任务并正确地共享数据。</li>\n<li>高性能：Java 编译后的字节码是在解释器中运行的，所以它的速度较多数交互式应用程序提高了很多。字节码可以在程序运行时被翻译成特定平台的机器指令，从而进一步提高运行速度。</li>\n<li>动态：与 C/C++ 相比，Java 可以动态调整库中方法和增加变量，更能够适应发展的环境。</li>\n</ul>\n<h2 id=\"环境配置\"><a class=\"markdownIt-Anchor\" href=\"#环境配置\">#</a> 环境配置</h2>\n<p>开发环境的搭建主要是对 JDK 进行正确配置。JDK，即 Java Development ToolKit (Java 开发工具包)，是整个 Java 开发的核心，它包括了 Java 程序的运行时环境（Java Runtime Environment，JRE）和其他开发人员工具。JRE 中又包括了 Java 语言的标准类库和 Java 虚拟机（Java Virtual Machine，JVM）。<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/computerscience/java-note/JDK.3awjiozo8wo0.webp\" alt=\"JDK\"><br>\n 在三个 LTS 版本中，JDK8 和 JDK11 是目前最受欢迎的 JDK 版本。JDK11 以及更高版本中，针对垃圾回收机制进行了优化，因此受到更多开发者的欢迎，而 JDK8 仍然保有很大的存量，JDK17 由于是较新发布的原因，在数据上不占优势。<br>\n这里以 ubuntu22.04 为例，进行多版本 JDK 的安装。</p>\n<h3 id=\"jdk-安装\"><a class=\"markdownIt-Anchor\" href=\"#jdk-安装\">#</a> JDK 安装</h3>\n<p>首先是进入<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMv\"> Oracle 官网</span>，然后根据操作系统选择对应版本的 JDK 下载，在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">Java archive</span> 还可以找到之前发行版本的 JDK（如，JDK8）。<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/computerscience/java-note/JDK%E4%B8%8B%E8%BD%BD.19qq87f3ec3k.webp\" alt=\"JDK下载\"><br>\n下载完成后，配置 JDK：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 以下载.tar.gz 文件为例</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 在下载目录</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-xf</span> jdk-20_linux-x64_bin.tar.gz</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 然后配置环境变量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># zsh</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'export JAVA_HOME=\"$HOME/jdk-20\"'</span> <span class=\"token operator\">>></span> ~/.zshrc</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'export PATH=\"$PATH:$JAVA_HOME/bin\"'</span> <span class=\"token operator\">>></span> ~/.zshrc</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token builtin class-name\">source</span> ~/.zshrc</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># bash</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'export JAVA_HOME=\"$HOME/jdk-20\"'</span> <span class=\"token operator\">>></span> ~/.bashrc</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'export PATH=\"$PATH:$JAVA_HOME/bin\"'</span> <span class=\"token operator\">>></span> ~/.bashrc</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token builtin class-name\">source</span> ~/.bashrc</pre></td></tr></table></figure><p>成功后，控制台使用 <code>java --version</code>  打印版本信息：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>java --version</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">java</span> <span class=\"token number\">20</span> <span class=\"token number\">2023</span>-03-21</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Java<span class=\"token punctuation\">(</span>TM<span class=\"token punctuation\">)</span> SE Runtime Environment <span class=\"token punctuation\">(</span>build <span class=\"token number\">20</span>+36-2344<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Java HotSpot<span class=\"token punctuation\">(</span>TM<span class=\"token punctuation\">)</span> <span class=\"token number\">64</span>-Bit Server VM <span class=\"token punctuation\">(</span>build <span class=\"token number\">20</span>+36-2344, mixed mode, sharing<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"多版本-jdk\"><a class=\"markdownIt-Anchor\" href=\"#多版本-jdk\">#</a> 多版本 JDK</h3>\n<p>使用 snap 或者 apt 工具，还可以安装 openJDK，如果系统没有自动设置环境的情况，也可以参照上面的方法设置环境。<br>\n当需要在多个版本的 JDK 之间进行切换时，可以使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamVudi5iZS8=\"> jEnv</span> 作为版本管理工具。安装和使用方法如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/jenv/jenv.git ~/.jenv</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">## 安装</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># bash</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'export PATH=\"$HOME/.jenv/bin:$PATH\"'</span> <span class=\"token operator\">>></span> ~/.bashrc</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'eval \"$(jenv init -)\"'</span> <span class=\"token operator\">>></span> ~/.bashrc</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># zsh</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'export PATH=\"$HOME/.jenv/bin:$PATH\"'</span> <span class=\"token operator\">>></span> ~/.zshrc</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'eval \"$(jenv init -)\"'</span> <span class=\"token operator\">>></span> ~/.zshrc</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">## 配置</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>jenv <span class=\"token function\">add</span> <span class=\"token environment constant\">$HOME</span>/jdk-20</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    oracle64-20 added</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>jenv <span class=\"token function\">add</span> <span class=\"token environment constant\">$HOME</span>/jdk-17</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    oracle64-17.0.6 added</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">## 使用</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>jenv versions</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># 列出所有管理的 JDK，* 号为正在使用的 JDK</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token number\">17</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token number\">17.0</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token number\">17.0</span>.6</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>* oracle64-17.0.6</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  oracle64-20</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\"># 使用 jenv global/local/shell + JDK 名，分别设置全局 / 项目 /shell 中使用的 JDK</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>jenv global oracle64-17.0.6</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>jenv <span class=\"token builtin class-name\">local</span> oracle64-17.0.6</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>jenv shell oracle64-17.0.6</pre></td></tr></table></figure><p>再次安装并设置成功后，尝试控制台：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>java --version</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">java</span> <span class=\"token number\">17.0</span>.6 <span class=\"token number\">2023</span>-01-17 LTS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Java<span class=\"token punctuation\">(</span>TM<span class=\"token punctuation\">)</span> SE Runtime Environment <span class=\"token punctuation\">(</span>build <span class=\"token number\">17.0</span>.6+9-LTS-190<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Java HotSpot<span class=\"token punctuation\">(</span>TM<span class=\"token punctuation\">)</span> <span class=\"token number\">64</span>-Bit Server VM <span class=\"token punctuation\">(</span>build <span class=\"token number\">17.0</span>.6+9-LTS-190, mixed mode, sharing<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"开发工具\"><a class=\"markdownIt-Anchor\" href=\"#开发工具\">#</a> 开发工具</h3>\n<p>开发工具中，大名鼎鼎的<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS96aC1jbi9pZGVhL2Rvd25sb2FkLyNzZWN0aW9uPWxpbnV4\"> IDEA</span> 就不用多说了，它有付费的旗舰版和免费的社区版。<br>\n另一个常用的开发工具是开源的<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWNsaXBzZS5vcmcv\"> Eclipse</span>，它也是一个用于 Java 开发的 IDE。<br>\n前端开发人员更熟悉的 vscode，在安装红帽的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPXJlZGhhdC5qYXZh\"> Language Support for Java</span> 后，也可以胜任一些简单的代码工作。</p>\n<p>对于大型的项目开发，IDE 毫无疑问是最佳的选择。在一开始学习或者进行简单的编程任务的时候，编辑器也足以满足要求。<br>\n一开始的时候不必纠结工具，重点应该放在多敲多练习上。</p>\n<h2 id=\"hello-world\"><a class=\"markdownIt-Anchor\" href=\"#hello-world\">#</a> Hello World</h2>\n<h3 id=\"第一个-java-程序\"><a class=\"markdownIt-Anchor\" href=\"#第一个-java-程序\">#</a> 第一个 Java 程序</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在 HelloWorld.java 文件内编辑</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>然后在同目录下使用 <code>javac</code>  命令，这会编译生成一个同名的 <code>.class</code>  文件（字节码文件）：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>javac HelloWorld.java</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ls</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  HelloWorld.class  HelloWorld.java</pre></td></tr></table></figure><p>之后再使用 <code>java</code>  命令运行，即可看到控制台结果：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">java</span> HelloWorld</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Hello World<span class=\"token operator\">!</span></pre></td></tr></table></figure><p>对于非生产环境中的代码，如果只是希望简单查看结果，还可以利用 JIT（Just-In-Time）编译技术，直接使用 <code>java HelloWorld.java</code>  也可以运行代码。在实际运行过程中，会自动进行编译，并且将编译后的字节码文件保存在内存中直接运行。</p>\n<h3 id=\"发生了什么\"><a class=\"markdownIt-Anchor\" href=\"#发生了什么\">#</a> 发生了什么</h3>\n<p>Java 语言编写的程序既是编译型的，又是解释型的。对 Java 程序的开发可以分为编写、编译和执行三个步骤。编写好的源代码，经过编译后转为 Java 的字节码，JVM 对字节码进行解释和运行编译只执行一次，而解释在每次运行程序时都会进行。</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/computerscience/java-note/Java%E8%BF%90%E8%A1%8C.54jiozo8wsdo.webp\" alt=\"Java运行\"></p>\n<h2 id=\"语法基础\"><a class=\"markdownIt-Anchor\" href=\"#语法基础\">#</a> 语法基础</h2>\n<p>Java 是面向对象的语言，每个 Java 程序的基本单位为 class。如这段 HelloWorld 代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>public</code> ：是权限的修饰符，还有 <code>protected、default、private</code>  等。<br>\n <code>class HelloWorld</code> ：声明 <code>HelloWorld</code>  类，在这里也是公共类。<strong>一个 Java 文件中只能有一个公共类，文件名必须和公共类保持一致</strong>，即文件名 <code>HelloWorld.java</code> ，类名采用大驼峰写法。<br>\n <code>public static void main(String[] args) &#123;&#125;</code> ：编写 <code>main</code>  方法，按规范应该写在 <code>public</code>  类中。<br>\n <code>System.out.println(&quot;Hello World!&quot;)</code> ：控制行输出语句，这里是打印 <code>Hello World!</code>  字符串。</p>\n<p>Java 中同样使用 <code>//</code>  进行单行注释， <code>/*...*/</code>  进行多行注释。不同的是，Java 中还有一种，使用 <code>/**...*/</code>  的文档注释，可以使用 <code>javadoc</code>  命令根据文档注释生成相应的 html 文档。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 这是一个 java 的文档注释</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @author admin</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @version v1.0</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用命令行，如下命令指在 doc 文件夹中生成包含作者和版本信息的文档</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>javadoc HelloWorld.java <span class=\"token parameter variable\">-d</span> doc <span class=\"token parameter variable\">-author</span> <span class=\"token parameter variable\">-version</span></pre></td></tr></table></figure><h3 id=\"数据类型\"><a class=\"markdownIt-Anchor\" href=\"#数据类型\">#</a> 数据类型</h3>\n<p>Java 的数据类型分为基本数据类型和引用数据类型，除去 8 种基本数据类型外的都为引用数据类型：</p>\n<pre class=\"mermaid\">flowchart LR\nid0(数据类型) --> id1\nid0 --> id2(引用数据类型)\nid1(基本数据类型) --> number(数值型)\nid1 --> chat(字符型)\nid1 --> boolean(布尔型)\nnumber --> int(整数类型)\nnumber --> float(浮点类型)</pre>\n<p>在基本数据类型中，整数类型包括： <code>byte</code> 、 <code>short</code> 、 <code>int</code> 、 <code>long</code> ，浮点类型包括： <code>float</code> 、 <code>double</code> ，以及字符型 <code>char</code>  和布尔型 <code>boolean</code> 。<br>\n引用类型包括了类、接口、数组、枚举和注解。</p>\n<h4 id=\"基本数据类型\"><a class=\"markdownIt-Anchor\" href=\"#基本数据类型\">#</a> 基本数据类型</h4>\n<p>基本数据类型的具体情况见下：</p>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>位 <code>bit</code></th>\n<th>字节 <code>byte</code></th>\n<th>封装类</th>\n<th>数据范围</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>byte</code></td>\n<td>8</td>\n<td>1</td>\n<td><code>Byte</code></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>7</mn></msup></mrow><annotation encoding=\"application/x-tex\">-2^7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span></span></span></span>～<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>7</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^7-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></td>\n<td><code>0</code></td>\n</tr>\n<tr>\n<td><code>short</code></td>\n<td>16</td>\n<td>2</td>\n<td><code>Short</code></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>15</mn></msup></mrow><annotation encoding=\"application/x-tex\">-2^{15}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span></span>～<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>15</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{15}-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></td>\n<td><code>0</code></td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td>32</td>\n<td>4</td>\n<td><code>Integer</code></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding=\"application/x-tex\">-2^{31}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>～<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{31}-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></td>\n<td><code>0</code></td>\n</tr>\n<tr>\n<td><code>long</code></td>\n<td>64</td>\n<td>8</td>\n<td><code>Long</code></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>63</mn></msup></mrow><annotation encoding=\"application/x-tex\">-2^{63}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">6</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span></span>～<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>63</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{63}-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">6</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></td>\n<td><code>0L</code></td>\n</tr>\n<tr>\n<td><code>float</code></td>\n<td>32</td>\n<td>4</td>\n<td><code>Float</code></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1.4</mn><msup><mi>e</mi><mrow><mo>−</mo><mn>45</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">1.4e^{-45}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">4</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">4</span><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span></span>～<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3.4</mn><msup><mi>e</mi><mn>38</mn></msup><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">3.4e^{38}.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">4</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span><span class=\"mord mtight\">8</span></span></span></span></span></span></span></span></span><span class=\"mord\">.</span></span></span></span></td>\n<td><code>0.0f</code></td>\n</tr>\n<tr>\n<td><code>double</code></td>\n<td>64</td>\n<td>8</td>\n<td><code>Double</code></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4.9</mn><msup><mi>e</mi><mrow><mo>−</mo><mn>324</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">4.9e^{-324}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mord\">.</span><span class=\"mord\">9</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">3</span><span class=\"mord mtight\">2</span><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span></span></span></span></span>～<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1.8</mn><msup><mi>e</mi><mn>308</mn></msup><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">1.8e^{308}.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">8</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span><span class=\"mord mtight\">0</span><span class=\"mord mtight\">8</span></span></span></span></span></span></span></span></span><span class=\"mord\">.</span></span></span></span></td>\n<td><code>0.0d</code></td>\n</tr>\n<tr>\n<td><code>char</code></td>\n<td>16</td>\n<td>2</td>\n<td><code>Character</code></td>\n<td><code>\\u0000</code> ~ <code>\\uffff</code></td>\n<td><code>u0000</code></td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td>1</td>\n<td>不确定</td>\n<td><code>Boolean</code></td>\n<td><code>true</code>  或 <code>false</code></td>\n<td><code>false</code></td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li><code>boolean</code>  一般用 1 <code>bit</code>  来存储，但具体大小并未规定，JVM 在编译期将 <code>boolean</code>  类型转为 <code>int</code> ，此时 1 代表 <code>true</code> ，0 代表 <code>false</code> 。</li>\n<li>使用 <code>long</code>  和 <code>float</code>  需要在结尾加上 <code>l</code>  和 <code>f</code> ，对浮点类型，没有指定是 <code>float</code>  时一律按 <code>double</code>  处理。</li>\n<li>Java 中 <code>char</code>  用单引号 <code>''</code>  将内容括起来，只能存放一个字符，因为 Java 中使用 Unicode 编码，所以一个中文或英文字符都可以用 <code>char</code>  表示。</li>\n</ol>\n<h4 id=\"数据类型转换\"><a class=\"markdownIt-Anchor\" href=\"#数据类型转换\">#</a> 数据类型转换</h4>\n<p>基本数据类型之间，低精度类型可以自动转换为高精度类型，高精度类型转为低精度类型需要<strong>强制转换</strong>。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">long</span> i <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确，整数默认为 int 型，可以转为 long 型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">double</span> j <span class=\"token operator\">=</span> <span class=\"token number\">2.0F</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确，低精度 float 自动转为高精度 double</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">byte</span> k <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确，右边常量在 byte 范围内，jvm 自动转为 byte 类型</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">byte</span> k <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误，超出范围</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token number\">2.9</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 强制转换，精度损失，输出为 2</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">byte</span> m <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 强制转换，数据溢出，输出为 - 56</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>以 <code>int</code>  转为 <code>byte</code>  为例，因为 <code>byte</code>  只有 8 位，转换时直接截取 <code>int</code>  二进制的最后 8 位，有两种情况：<br>\n一种如上述 200，截取后是 <code>11001000</code> ，第一位是 <code>1</code> ，所以是负数。它的反码为 <code>10110111</code> ，计算补码结果为 <code>10111000</code> ，再将补码转为十进制数，得到 - 56。<br>\n另一种，如将 300 转为 <code>byte</code> ，截取后是 <code>00101100</code> ，第一位是 <code>0</code> ，表明是正数，正数的源码反码和补码相同，直接转为十进制数，结果为 44。</p>\n<p>数据在进行运算时，也会发生类型转换，如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">byte</span> a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">byte</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">byte</span> i <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">//  错误，变量进行运算，会自动转为 int 类型，需要强转</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">byte</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//char 参与运算，会自动转为整数进行运算</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 在 ASCII 码表中的字符，使用对应的 ASCII 编码值，如：'0' 对应 48，'A' 对应 65，'a' 对应 97</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 不在 ASCII 码表中的字符，如中文汉字，使用 unicode 编码值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token char\">'0'</span> <span class=\"token operator\">+</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token char\">'A'</span> <span class=\"token operator\">+</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span> <span class=\"token operator\">+</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>特别的，与字符串进行 <code>+</code>  操作，代表的是字符串拼接，拼接后的数据类型是字符串。</p>\n<h3 id=\"标识符与变量\"><a class=\"markdownIt-Anchor\" href=\"#标识符与变量\">#</a> 标识符与变量</h3>\n<p>程序运行中，值可以改变的量称为变量，不能改变的量称为常量。变量和常量的命名都必须使用合法的标识符。</p>\n<h4 id=\"标识符\"><a class=\"markdownIt-Anchor\" href=\"#标识符\">#</a> 标识符</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>数据类型 标识符 <span class=\"token operator\">=</span> 变量初始值</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">final</span> 数据类型 标识符 <span class=\"token operator\">=</span> 常量</pre></td></tr></table></figure><p>Java 语言中，标识符可以由任意大小写字母、下划线、$ 和数字组成，第一个字母不能为数字，<strong>标识符不得是 Java 中的保留字</strong>，并且严格区分大小写。<br>\nJava 中的保留字如下：<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/computerscience/java-note/Java%E4%BF%9D%E7%95%99%E5%AD%97.40oyj91vtgc0.webp\" alt=\"Java保留字\"></p>\n<p>另外还有一些约定的规范：</p>\n<ol>\n<li>最好选择有意义的单词作为变量名。</li>\n<li>包名的多单词组成时所有字母都小写。</li>\n<li>类名、接口名多单词组成时用大驼峰写法。</li>\n<li>变量名、方法名多单词组成时用小驼峰写法。</li>\n<li>常量名所有字母大写，多单词之间用下划线连接。</li>\n</ol>\n<p>另外，在上面的常量前使用了 <code>final</code>  标识符，也是为了表明这是不可改变的常量。</p>\n<h4 id=\"使用变量\"><a class=\"markdownIt-Anchor\" href=\"#使用变量\">#</a> 使用变量</h4>\n<p>变量必须先声明，后使用。可以声明变量时赋予变量初始值，也可以之后再赋值，但是在使用时必须赋值。<br>\n变量可以重新赋值，但是变量只能存储其声明时的数据类型。<br>\n变量有使用范围，在同一范围内不能重复定义同一个变量。</p>\n<p>变量的有效范围是指程序代码能够访问该变量的区域，根据此可以将变量分为成员变量和局部变量。<br>\n如下面这段代码所示：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> z <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其中， <code>x</code>  和 <code>y</code>  为成员变量， <code>x</code>  是实例变量， <code>y</code>  为静态变量（类变量），静态变量可以在声明它的类内存取，也可以用 <code>类名.静态变量</code> 的方式在其他类里面取用。<br>\n <code>z</code>  为局部变量，它在方法内定义，只能在当前代码块中有效。当方法被调用时，Java 虚拟机会为方法中的局部变量分配内存空间，当该方法的调用结束后，则会释放方法中局部变量占用的内存空间，局部变量也将会被销毁。<br>\n常量使用 <code>final</code>  进行修饰，它有和变量一样的作用域范围。</p>\n<h3 id=\"运算符\"><a class=\"markdownIt-Anchor\" href=\"#运算符\">#</a> 运算符</h3>\n<p>赋值运算符： 赋值 <code>=</code> <br>\n 算术运算符： 加 <code>+</code> 、减 <code>-</code> 、乘 <code>*</code> 、除 <code>/</code> 、取余 <code>%</code> 、自加 <code>++</code> 、自减 <code>--</code> <br>\n 关系运算符： 等于 <code>==</code> 、不等 <code>!=</code> 、大于 <code>&gt;</code> 、小于 <code>&lt;</code> 、不小于 <code>&gt;=</code> 、不大于 <code>&lt;=</code> <br>\n 位运算符： 与 <code>&amp;</code> 、或 <code>|</code> 、异或 <code>^</code> 、非 <code>~</code> 、左移 <code>&lt;&lt;</code> 、右移 <code>&gt;&gt;</code> 、右移补零 <code>&gt;&gt;&gt;</code> <br>\n 逻辑运算符： 逻辑与 <code>&amp;&amp;</code> 、逻辑或 <code>||</code> 、逻辑非 <code>!</code> <br>\n 三目运算符： <code>(expression) ? value if true : value if false</code></p>\n<p>运算符一般顺序如下：非和自增自减 &gt;  <code>*</code> 、 <code>/</code> 、 <code>%</code>  &gt;  <code>+</code> 、 <code>-</code>  &gt; 位运算符 &gt; 关系运算符<br>\n Java 中的基本类型比较使用 <code>==</code> ， <code>equals()</code>  方法用于比较两个对象是否相等。</p>\n<div class=\"note info 自增与自减\">\n<p>自增自减符号只能用在变量上，自增自减在变量前，先进行运算，表达式返回值是自增自减后的值；自增自减在变量后，后进行运算，表达式返回值是自增自减前的值。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>i <span class=\"token operator\">=</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 输出为 0</span></pre></td></tr></table></figure><p><code>i = i++</code>  对应步骤如下：</p>\n<ol>\n<li>创建一个临时变量保存 <code>i</code>  的值。 <code>temp = i = 0</code></li>\n<li>对 <code>i</code>  进行自增操作， <code>i</code>  这里变成了 1。</li>\n<li>返回表达式的值，即将 <code>temp</code>  又重新赋值给了 <code>i</code> ，因此最后 <code>i</code>  为 0。</li>\n</ol>\n</div>\n<h3 id=\"流程控制\"><a class=\"markdownIt-Anchor\" href=\"#流程控制\">#</a> 流程控制</h3>\n<h4 id=\"输入输出\"><a class=\"markdownIt-Anchor\" href=\"#输入输出\">#</a> 输入输出</h4>\n<p>Java 的输出可以使用 <code>printf()</code> 、 <code>print()</code>  和 <code>println()</code>  方法，输入这里可以使用 <code>Scanner</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Scanner</span> scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建 Scanner 对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入一个整型：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印提示</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读取一行输入并获取整数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入另一个整数：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印提示</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d + %d = %d\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 格式化输出</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>\n<p>输入<br>\n使用 <code>Scanner</code>  需要先通过 <code>import java.util.Scanner</code>  导入 <code>Scanner</code>  类，然后传入 <code>System.in</code> ，创建 <code>Scanner</code>  对象。 <code>System.in</code>  和 <code>System.out</code>  代表标准输入流和标准输出流。<br>\n用不同的方法处理用户输入， <code>Scanner</code>  会自动转换数据类型，如这里是使用的 <code>nextInt()</code>  它会自动将输入作为 <code>int</code>  型处理。</p>\n<div class=\"note warning\">\n<p>如果输入类型和指定类型不同，会导致报错。可以使用 <code>try...catch</code>  进行错误处理。</p>\n</div>\n</li>\n<li>\n<p>输出<br>\n <code>println()</code>  方法表示输出并换行，如果输出后不希望换行可以使用 <code>print()</code>  方法。<br>\n如果要把数据显示成我们期望的格式，就需要使用格式化输出 <code>printf()</code> 。格式化输出可以通过使用占位符将输出参数格式化成指定格式。</p>\n<table>\n<thead>\n<tr>\n<th>占位符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%d</td>\n<td>格式化输出整数</td>\n</tr>\n<tr>\n<td>%x</td>\n<td>格式化输出十六进制整数</td>\n</tr>\n<tr>\n<td>%f</td>\n<td>格式化输出浮点数</td>\n</tr>\n<tr>\n<td>%e</td>\n<td>格式化输出科学计数法浮点数</td>\n</tr>\n<tr>\n<td>%s</td>\n<td>格式化输出字符串</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ol>\n<p>上面的代码进行了两个整数的输入，并返回了加法运算的结果：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>输入一个整型：13</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>输入另一个整数：23</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">13</span> + <span class=\"token number\">23</span> <span class=\"token operator\">=</span> <span class=\"token number\">36</span></pre></td></tr></table></figure><h4 id=\"条件语句\"><a class=\"markdownIt-Anchor\" href=\"#条件语句\">#</a> 条件语句</h4>\n<pre class=\"mermaid\">flowchart TD\ninput(输入)-->if{条件判断}--true-->true(执行为真的代码)\nif --false--> false(执行为假的代码)</pre>\n<p>条件判断用 <code>if</code>  或者 <code>switch</code>  语句实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Scanner</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入学生成绩：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sc<span class=\"token punctuation\">.</span><span class=\"token function\">hasNextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">int</span> score <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>score <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> score <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入正确\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token function\">switchCase</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入不合法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入不合法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">//switch...case，根据区间对学生成绩评级</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">switchCase</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> score<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>score <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">10</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">9</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>              <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"成绩为优秀\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>              <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">8</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>              <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"成绩为良好\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>              <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>              <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"成绩为合格\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>              <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>              <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"成绩不合格\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>              <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"循环语句\"><a class=\"markdownIt-Anchor\" href=\"#循环语句\">#</a> 循环语句</h4>\n<pre class=\"mermaid\">flowchart TD\n\ninput(输入) --> while{条件判断}\nwhile --满足条件--> do(循环体)\ndo --> while\nwhile --不满足条件--> e(结束)</pre>\n<p>循环语句用 <code>for</code>  或者 <code>while</code>  实现， <code>continue</code>  用于跳过当前循环执行下一轮， <code>break</code>  直接跳出循环。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Scanner</span> scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">boolean</span> isValid <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isValid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入一个正整数：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                num <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    isValid <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                        sum <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1到%d的和是%d\\n\"</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入不是正整数，请重新输入！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入不是正整数，请重新输入！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                scanner<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 清除输入流中的非整数</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这是一个用于计算从 1~<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 等的数字和的程序， <code>while</code>  用于判断输入是否合法，对合法的输入使用 <code>for</code>  求其和，对不合法的输入使用 <code>try...catch...</code>  进行检查，然后重新输入。<br>\n <code>while</code>  循环还有另一种写法， <code>do...while...</code> ，与普通 <code>while</code>  循环不同的是，这种写法循环体中的内容会至少执行一次。</p>\n<h2 id=\"练习-demo\"><a class=\"markdownIt-Anchor\" href=\"#练习-demo\">#</a> 练习 demo</h2>\n<p>demo1 计算 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> 以内的质数</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CountPrimeNumber</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">boolean</span> isValid <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Scanner</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isValid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入一个正整数：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                num <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    isValid <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    sc<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1不是质数\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                        <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"质数有：\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                            <span class=\"token keyword\">boolean</span> isPrimeNumber <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> j <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                                    isPrimeNumber <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isPrimeNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                                s <span class=\"token operator\">=</span> s <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token char\">'，'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d以内的%s\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入不合法，请重新输入！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入不合法，请重新输入！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                sc<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>demo2 一个简单的控制台记账软件</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountBook</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 选项序号，合法范围 1-4</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">boolean</span> isOver <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 循环结束标识</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> balance <span class=\"token operator\">=</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始资金</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">String</span> info <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 收支明细</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Scanner</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 记账单主体内容循环打印，因此放在循环体中</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isOver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n--------------家庭记账--------------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"            1.收支明细\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"            2.登记收入\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"            3.登记支出\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"            4.退    出\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"            请选择1-4：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">// 限定合法输入为 1-4，输入不合法清空输入并重置 index</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                index <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> index <span class=\"token operator\">></span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入不合法，请重新输入！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入不合法，请重新输入！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                sc<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">// 根据 1-4 选择</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------当前收支明细记录----------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"收支\\t余额\\t收支金额\\t说明\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    <span class=\"token comment\">// 记录为空不打印</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>info<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------------------------------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    <span class=\"token keyword\">int</span> income <span class=\"token operator\">=</span> <span class=\"token function\">validInteger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"本次收入金额：\"</span><span class=\"token punctuation\">,</span> sc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                    balance <span class=\"token operator\">+=</span> income<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"本次收入说明：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    <span class=\"token class-name\">String</span> incomeInfo <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    info <span class=\"token operator\">+=</span> <span class=\"token string\">\"收入\\t\"</span> <span class=\"token operator\">+</span> balance <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"+\"</span> <span class=\"token operator\">+</span> income <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\\t\"</span> <span class=\"token operator\">+</span> incomeInfo <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n--------------登记成功--------------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    <span class=\"token keyword\">int</span> outcome <span class=\"token operator\">=</span> <span class=\"token function\">validInteger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"本次支出金额：\"</span><span class=\"token punctuation\">,</span> sc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                    balance <span class=\"token operator\">-=</span> outcome<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"本次支出说明：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                    <span class=\"token class-name\">String</span> outcomeInfo <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                    info <span class=\"token operator\">+=</span> <span class=\"token string\">\"支出\\t\"</span> <span class=\"token operator\">+</span> balance <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> outcome <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\\t\"</span> <span class=\"token operator\">+</span> outcomeInfo <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n--------------登记成功--------------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n是否退出(Y/N)：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                    <span class=\"token class-name\">String</span> isQuit <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isQuit<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Y\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> isQuit<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"y\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"See you!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                        isOver <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                        sc<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>     * 限制输入为正整数</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>     * s，控制台提示字符串</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>     * sc，Scanner</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>     * 返回正整数</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">validInteger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Scanner</span> sc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token keyword\">boolean</span> isValid <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token keyword\">int</span> input <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isValid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                input <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>input <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                    isValid <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入不合法，请重新输入！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入不合法，请重新输入！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                sc<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token keyword\">return</span> input<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "编程学习",
                "Java基础",
                "Java",
                "Java学习"
            ]
        },
        {
            "id": "https://www.umi.homes/posts/5b58/",
            "url": "https://www.umi.homes/posts/5b58/",
            "title": "树",
            "date_published": "2023-02-14T16:00:00.000Z",
            "content_html": "<h1 id=\"树的基本概念\"><a class=\"markdownIt-Anchor\" href=\"#树的基本概念\">#</a> 树的基本概念</h1>\n<h2 id=\"概念与术语\"><a class=\"markdownIt-Anchor\" href=\"#概念与术语\">#</a> 概念与术语</h2>\n<p>树是一种由<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 个有限结点组成的一个具有层次关系的集合。</p>\n<pre class=\"mermaid\">flowchart TD\nA((A)) --- B((B))\nA((A)) --- C((C))\nB((B)) --- D((D))\nB((B)) --- E((E))\nB((B)) --- F((F))\nC((C)) --- G((G))\nC((C)) --- H((H))</pre>\n<ol>\n<li>\n<p>结构特点</p>\n<ul>\n<li>位于树顶部的结点称为<strong>根结点</strong>，根结点没有父结点，非根结点有且只有一个父结点。</li>\n<li>每个结点可以有 0 个或多个子结点。有子结点的称为<strong>内部结点</strong>或<strong>分支结点</strong>，没有子结点的称为<strong>外部结点</strong>或者<strong>叶子结点</strong>。</li>\n<li>结点的高度为结点到叶子结点的最长路径，结点的深度为根结点到这个结点经历的边的条数，在同一层的结点互为<strong>兄弟结点</strong>。</li>\n</ul>\n</li>\n<li>\n<p>术语解释</p>\n<table>\n<thead>\n<tr>\n<th>术语</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>子树</td>\n<td>结点和它的后代一起构成一棵子树</td>\n</tr>\n<tr>\n<td>结点的度</td>\n<td>结点拥有的子树的数目</td>\n</tr>\n<tr>\n<td>叶子结点</td>\n<td>度为零的结点</td>\n</tr>\n<tr>\n<td>分支结点</td>\n<td>度不为零的结点</td>\n</tr>\n<tr>\n<td>树的度</td>\n<td>树中结点的最大的度</td>\n</tr>\n<tr>\n<td>层次</td>\n<td>根结点的层次为 0，其余结点的层次等于该结点的双亲结点的层次加 1</td>\n</tr>\n<tr>\n<td>树的高度</td>\n<td>树中结点的最大层次</td>\n</tr>\n<tr>\n<td>无序树</td>\n<td>树中结点的各子树之间的次序是不重要的，可以交换位置</td>\n</tr>\n<tr>\n<td>有序树</td>\n<td>树中结点的各子树之间的次序是重要的，不可以交换位置</td>\n</tr>\n<tr>\n<td>森林</td>\n<td>0 个或多个不相交的树组成</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>0 还是 1<br>\n 在一些实现中，根结点为第 0 层，而另一些实现中，根结点被定义为第 1 层。<br>\n将根结点定义为第 0 层的方式，通常更符合计算机中数组或其他序列的习惯，因为数组中通常是从 0 开始编号的。<br>\n而将根结点定义为第 1 层的方式，则更符合人类对树形结构的感性认识，因为我们通常从根结点开始数，而不是从 0 开始数。<br>\n两种方式都没有本质上的区别，重要的是在特定的上下文中明确定义，以便清楚地描述树的结构和算法。</p>\n</li>\n</ol>\n<h2 id=\"表示方法\"><a class=\"markdownIt-Anchor\" href=\"#表示方法\">#</a> 表示方法</h2>\n<pre class=\"mermaid\">flowchart TD\nA((A)) --- B((B))\nA((A)) --- C((C))\nA((A)) --- D((D))\nB((B)) --- E((E))\nB((B)) --- F((F))\nC((C)) --- G((G))\nD((D)) --- H((H))\nD((D)) --- I((I))\nD((D)) --- J((J))</pre>\n<p>想要表示如上图所示的树，一般有以下三种方法。</p>\n<h3 id=\"双亲表示法\"><a class=\"markdownIt-Anchor\" href=\"#双亲表示法\">#</a> 双亲表示法</h3>\n<ul>\n<li>采用一组连续的空间来存储每个结点；</li>\n<li>每个结点中设置一个伪指针，伪指针指向该结点的父结点。<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/computerscience/ds-note/tree-parent.xzfjkvi4ts0.webp\" alt=\"tree-parent\"></li>\n</ul>\n<h3 id=\"孩子表示法\"><a class=\"markdownIt-Anchor\" href=\"#孩子表示法\">#</a> 孩子表示法</h3>\n<ul>\n<li>采用顺序结构 + 链式结构；</li>\n<li>每个结点用顺序存储，每个结点的孩子用链表存储。<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/computerscience/ds-note/tree-children.t7ey1o460uo.webp\" alt=\"tree-children\"></li>\n</ul>\n<h3 id=\"孩子兄弟表示法\"><a class=\"markdownIt-Anchor\" href=\"#孩子兄弟表示法\">#</a> 孩子兄弟表示法</h3>\n<ul>\n<li>\n<p>又叫二叉树表示法，以二叉链表作为树的存储结构；</p>\n</li>\n<li>\n<p>每个结点构成为：子结点指针 + 数据 + 兄弟结点指针。</p>\n<pre class=\"mermaid\">  flowchart TD\nA((A)) --> B((B))\nA((A)) --> ida(null)\nB((B)) --> E((E))\nE((E)) --> ide(null)\nE((E)) --> F((F))\nB((B)) --> C((C))\nC((C)) --> G((G))\nC((C)) --> D((D))\nD((D)) --> H((H))\nD((D)) --> idd(null)\nH((H)) --> idh(null)\nH((H)) --> I((I))\nI((I)) --> idi(null)\nI((I)) --> J((J))</pre>\n</li>\n</ul>\n<h1 id=\"树与二叉树\"><a class=\"markdownIt-Anchor\" href=\"#树与二叉树\">#</a> 树与二叉树</h1>\n<p>使用孩子兄弟表示法，即可以将一棵树形式上转变为一棵二叉树。二叉树是指每个结点最多只能有两个孩子结点的树。</p>\n<h2 id=\"二叉树的种类\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的种类\">#</a> 二叉树的种类</h2>\n<h3 id=\"满二叉树\"><a class=\"markdownIt-Anchor\" href=\"#满二叉树\">#</a> 满二叉树</h3>\n<p>一个二叉树，如果每一个层的结点数都达到最大值，则这个二叉树就是满二叉树。 即对 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> 层（以根结点为第 1 层）的二叉树，它的结点总数为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>k</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^k -1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.932438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>，则它为满二叉树。</p>\n<pre class=\"mermaid\">flowchart TD\n1((1)) --> 2((2))\n1((1)) --> 3((3))\n2((2)) --> 4((4))\n2((2)) --> 5((5))\n3((3)) --> 6((6))\n3((3)) --> 7((7))\n4((4)) --> 8((8))\n4((4)) --> 9((9))\n5((5)) --> 10((10))\n5((5)) --> 11((11))\n6((6)) --> 12((12))\n6((6)) --> 13((13))\n7((7)) --> 14((14))\n7((7)) --> 15((15))</pre>\n<h3 id=\"完全二叉树\"><a class=\"markdownIt-Anchor\" href=\"#完全二叉树\">#</a> 完全二叉树</h3>\n<p>一棵深度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> 的有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 个结点的二叉树，对树中的结点按从上至下、从左到右的顺序进行编号，如果编号为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">i(1≤i≤n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.79549em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 的结点与满二叉树中编号为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 的结点在二叉树中的位置相同，则这棵二叉树称为完全二叉树。</p>\n<pre class=\"mermaid\">flowchart TD\n1((1)) --> 2((2))\n1((1)) --> 3((3))\n2((2)) --> 4((4))\n2((2)) --> 5((5))\n3((3)) --> 6((6))\n3((3)) --> 7((7))\n4((4)) --> 8((8))\n4((4)) --> 9((9))\n5((5)) --> 10((10))\n5((5)) --> 11((11))</pre>\n<ul>\n<li>完全二叉树中，叶子结点只会出现在最后一层和倒数第二层；</li>\n<li>一棵满二叉树一定是一棵完全二叉树，反之不然；</li>\n<li>完全二叉树中，度为 1 的结点数 为 0 个或 1 个。</li>\n</ul>\n<h3 id=\"二叉查找树\"><a class=\"markdownIt-Anchor\" href=\"#二叉查找树\">#</a> 二叉查找树</h3>\n<p>二叉查找树（Binary Search Tree, BST）的特征是，左子树上所有结点的值均小于它的根结点的值，而右子树上所有结点的值均大于它的根结点的值。</p>\n<pre class=\"mermaid\">flowchart TD\n17((17)) --> 8((8))\n17((17)) --> 26((26))\n8((8)) --> 4((4))\n8((8)) --> 10((10))\n26(26) --> 20((20))\n26((26)) --> 40((40))</pre>\n<h3 id=\"平衡二叉树\"><a class=\"markdownIt-Anchor\" href=\"#平衡二叉树\">#</a> 平衡二叉树</h3>\n<p>平衡二叉树，又称 AVL 树（Adelson-Velsky and Landis Tree）是一种特殊的二叉树。它的左子树和右子树的高度之差 (平衡因子) 的绝对值不超过 1，且它的左子树和右子树都是一颗平衡二叉树。</p>\n<pre class=\"mermaid\">flowchart TD\n30((30)) --> 10((10))\n30((30)) --> 50((50))\n10((10)) --> 4((4))\n10((10)) --> null(null)\n50((50)) --> 40((40))\n50((50)) --> 70((70))</pre>\n<h2 id=\"二叉树的表示\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的表示\">#</a> 二叉树的表示</h2>\n<h3 id=\"顺序存储\"><a class=\"markdownIt-Anchor\" href=\"#顺序存储\">#</a> 顺序存储</h3>\n<p>顺序存储只适应于完全二叉树，对序号为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 的结点：</p>\n<ul>\n<li>它如果存储在下标为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 的位置；</li>\n<li>左孩子结点下标（如果有）为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">2i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">i</span></span></span></span>，右孩子结点下标（如果有）为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2i+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>；</li>\n<li>父结点下标为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌊</mo><mi>i</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn><mo stretchy=\"false\">⌋</mo></mrow><annotation encoding=\"application/x-tex\">\\lfloor i/2 \\rfloor</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌊</span><span class=\"mord mathnormal\">i</span><span class=\"mord\">/</span><span class=\"mord\">2</span><span class=\"mclose\">⌋</span></span></span></span>。</li>\n</ul>\n<p>更常用的方式是采用链式存储。</p>\n<h3 id=\"链式存储\"><a class=\"markdownIt-Anchor\" href=\"#链式存储\">#</a> 链式存储</h3>\n<p>一个简单的实现方式可能是这样的：</p>\n<ul>\n<li>二叉树的每一个结点，保存着数据和指向左右结点的指针；</li>\n<li>只要知道根结点，就可以通过左右指针访问整棵二叉树。</li>\n</ul>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  left<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  right<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BinaryTree<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  root<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"二叉树的遍历\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的遍历\">#</a> 二叉树的遍历</h2>\n<p>遍历一棵树是指访问树的每一个结点，并对它们进行某种操作。<br>\n访问树的结点有三种方式，分别为先序、中序和后序，它们指的是访问根结点的顺序。<br>\n以下面这棵二叉树为例，分别展示三种遍历方式的结果：</p>\n<pre class=\"mermaid\">flowchart TD\nA((A)) --> B((B))\nA((A)) --> C((C))\nB((B)) --> D((D))\nB((B)) --> E((E))\nC((C)) --> F((F))\nC((C)) --> G((G))\nE((E)) --> H((H))\nE((E)) --> null1(null)\nF((F)) --> null2(null)\nF((F)) --> I((I))</pre>\n<h3 id=\"先序遍历\"><a class=\"markdownIt-Anchor\" href=\"#先序遍历\">#</a> 先序遍历</h3>\n<p>先序遍历的过程为根结点、左结点、右结点：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 作为二叉树的方法，递归实现</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//node 默认为根结点，方法默认为打印结点的值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">preOrderTraverse</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 结点非空，依次访问左结点和右结点</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">preOrderTraverse</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">preOrderTraverse</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 使用非递归的方法则需要一个辅助栈</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">preOrderTraverse</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">// 树不为空，开始遍历</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">let</span> cur <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">// 创建一个辅助栈</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">const</span> stack<span class=\"token operator\">:</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">// 结点非空且栈非空，进行循环</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 第一次访问该结点，将其入栈，并对它的值进行操作</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 然后继续访问它的左结点</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 当栈非空，将其中的结点出栈，并访问该结点的右结点</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      cur <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对示例的二叉树，先序遍历的结果为 <code>A B D E H C F I G</code> 。</p>\n<h3 id=\"中序遍历\"><a class=\"markdownIt-Anchor\" href=\"#中序遍历\">#</a> 中序遍历</h3>\n<p>中序遍历的过程为左结点、根结点、右结点：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在先序遍历的基础上递归实现中序遍历很简单，只需要调换递归结点的顺序</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">inOrderTraverse</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">inOrderTraverse</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">inOrderTraverse</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 使用非递归的方法同样需要一个辅助栈</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">inOrderTraverse</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">let</span> cur <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">const</span> stack<span class=\"token operator\">:</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">// 结点非空且栈非空，进行循环</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 注意对结点的值进行操作的时间，是在结点出栈的时候进行的</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      cur <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>right</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对示例的二叉树，中序遍历的结果为 <code>D B H E A F I C G</code> 。</p>\n<h3 id=\"后序遍历\"><a class=\"markdownIt-Anchor\" href=\"#后序遍历\">#</a> 后序遍历</h3>\n<p>后序遍历的过程为左结点、右结点、根结点：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 使用递归方法实现仍然是简单交换顺序即可</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">postOrderTraverse</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">postOrderTraverse</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">postOrderTraverse</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 使用非递归方法需要使用到一个辅助栈和辅助队列</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">postOrderTraverseStack</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// 空树，不做处理</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 使用一个辅助栈和辅助队列</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">const</span> stack<span class=\"token operator\">:</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">const</span> queue<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token comment\">// 出栈结点进入队列</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">const</span> cur <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token comment\">// 依次再将左右结点入栈</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 队列中，最先入队的为根结点，因此需要逆序访问队列中元素</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对示例的二叉树，后序遍历的结果为 <code>D H E B I F G C A</code> 。</p>\n<h3 id=\"层序遍历\"><a class=\"markdownIt-Anchor\" href=\"#层序遍历\">#</a> 层序遍历</h3>\n<p>还有一种方式为层序遍历，即从上到下，从左到右，依次访问二叉树的结点。<br>\n实现层序遍历需要一个辅助队列：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">levelOrderTraverse</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">const</span> queue<span class=\"token operator\">:</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">const</span> cur <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结合层序遍历，实现二叉树的添加和查找，实现一棵二叉树如下：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BinaryTree<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  root<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 层序插入</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">const</span> queue<span class=\"token operator\">:</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">const</span> cur <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>left <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          cur<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>right <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          cur<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token comment\">// 层序查找</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">const</span> queue<span class=\"token operator\">:</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token keyword\">const</span> cur <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token comment\">// 先序遍历</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token function\">preOrderTraversalRecursion</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">preOrderTraversalRecursion</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">preOrderTraversalRecursion</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token function\">preOrderTraversalIteration</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">let</span> cur <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">const</span> stack<span class=\"token operator\">:</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        cur <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token comment\">// 中序遍历</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token function\">inOrderTraversalRecursion</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">inOrderTraversalRecursion</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">inOrderTraversalRecursion</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>  <span class=\"token function\">inOrderTraversalIteration</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token keyword\">let</span> cur <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token keyword\">const</span> stack<span class=\"token operator\">:</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        cur <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>  <span class=\"token comment\">// 后序遍历</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>  <span class=\"token function\">postOrderTraversalRecursion</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">postOrderTraversalRecursion</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">postOrderTraversalRecursion</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>  <span class=\"token function\">postOrderTraversalIteration</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>      <span class=\"token keyword\">const</span> stack<span class=\"token operator\">:</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>      <span class=\"token keyword\">const</span> queue<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token keyword\">const</span> cur <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>          stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>          stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>  <span class=\"token comment\">// 层序遍历</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>  <span class=\"token function\">levelOrderTraversalIteration</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>      <span class=\"token keyword\">const</span> queue<span class=\"token operator\">:</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token keyword\">const</span> cur <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>          queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>          queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"特殊二叉树\"><a class=\"markdownIt-Anchor\" href=\"#特殊二叉树\">#</a> 特殊二叉树</h2>\n<h3 id=\"二叉查找树-2\"><a class=\"markdownIt-Anchor\" href=\"#二叉查找树-2\">#</a> 二叉查找树</h3>\n<p>二叉查找树（Binary Search Tree, BST），也叫二叉搜索树，简称 BST，特点在于左子树上所有结点的值均小于它的根结点的值，而右子树上所有结点的值均大于它的根结点的值。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// BST 可以继承自二叉树，并在上面重写方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BinarySearchTree<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BinaryTree<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 重写插入方法，BST 中保证左子树 & lt; 根结点 & lt; 右子树</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 定义当前结点和前驱结点</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">let</span> cur<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">let</span> pre<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      pre <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token comment\">// 值小于当前结点，往左子树移动；值大于当前结点，往右子树移动</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> cur<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">></span> cur<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 确定新结点插入左子树还是右子树</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    value <span class=\"token operator\">&lt;</span> pre<span class=\"token punctuation\">.</span>value <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token comment\">// 重写查找方法</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 定义当前结点</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">let</span> cur<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">===</span> cur<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">return</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token comment\">// 值小于当前结点，往左子树移动；值大于当前结点，往右子树移动</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> cur<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">></span> cur<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token comment\">// 返回当前树中最大值</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">let</span> cur <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> cur<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">return</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token comment\">// 返回当前树中最小值</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">let</span> cur <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> cur<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>      cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">return</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token comment\">// 删除方法，确保删除一个结点后仍然满足 BST 结构</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token comment\">// 树空</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token comment\">// 定义 cur 和 pre 结点</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">let</span> cur<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token keyword\">let</span> pre <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token comment\">//while 循环找到值等于 value 的结点和前驱结点</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">===</span> cur<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>      <span class=\"token comment\">// 值小于当前结点，往左子树移动；值大于当前结点，往右子树移动</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>      <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        pre <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        value <span class=\"token operator\">&lt;</span> cur<span class=\"token punctuation\">.</span>value <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token comment\">// 不存在等于 value 的结点</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> left<span class=\"token punctuation\">,</span> right <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token comment\">// 删除的是根结点，且只有根结点或根结点只有一棵子树的情况</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pre <span class=\"token operator\">===</span> cur <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> left <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> left <span class=\"token operator\">?</span> left <span class=\"token operator\">:</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token comment\">// 如果 cur 是叶子结点，直接删除</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> right <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>      pre<span class=\"token punctuation\">.</span>left <span class=\"token operator\">===</span> cur <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token comment\">// 如果 cur 只有左子树或右子树，用左子树或右子树代替它</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>      <span class=\"token punctuation\">(</span>left <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> right <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>      <span class=\"token punctuation\">(</span>left <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> right <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>      <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> left <span class=\"token operator\">?</span> left <span class=\"token operator\">:</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>      pre<span class=\"token punctuation\">.</span>left <span class=\"token operator\">===</span> cur <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token comment\">// 如果 cur 左子树右子树都有，那么用左子树最大值或右子树最小值替代它</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>      <span class=\"token comment\">// 寻找右子树最小值</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>      <span class=\"token keyword\">let</span> minNode <span class=\"token operator\">=</span> right <span class=\"token keyword\">as</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>      <span class=\"token keyword\">let</span> minPre <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>minNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        minPre <span class=\"token operator\">=</span> minNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        minNode <span class=\"token operator\">=</span> minNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>      <span class=\"token comment\">// 边界条件，右子树只有一个结点</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>right <span class=\"token operator\">===</span> minNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        cur<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        cur<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        cur<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> minNode<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        minPre<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"avl-树\"><a class=\"markdownIt-Anchor\" href=\"#avl-树\">#</a> AVL 树</h3>\n<p>平衡二叉树，又称 AVL 树，得名于其发明者的名字（Adelson-Velskii 以及 Landis），是一种特殊的二叉查找树。<br>\n在 BST 的继承上 AVL 树引入了平衡因子，使得它左子树和右子树的高度差（平衡因子）不超过 1，并且其左右子树也都是一棵 AVL 树。<br>\n为了获取结点的高度和计算平衡因子，需要引入新的方法：</p>\n<h4 id=\"平衡因子\"><a class=\"markdownIt-Anchor\" href=\"#平衡因子\">#</a> 平衡因子</h4>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 计算结点高度</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">getNodeHeight</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNodeHeight</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNodeHeight</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 在这里为了避免直接处理平衡因子的数组，使用了枚举</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">enum</span> BalanceFactor <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token constant\">UNBALANCED_RIGHT</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 右重</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token constant\">SLIGHTLY_UNBALANCED_RIGHT</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 轻微右重</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token constant\">BALANCED</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 平衡</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token constant\">SLIGHTLY_UNBALANCED_LEFT</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 轻微左重</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token constant\">UNBALANCED_LEFT</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token comment\">// 右重</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 计算结点平衡因子</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token function\">getBalanceFactor</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">const</span> balanceFactor <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNodeHeight</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNodeHeight</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>balanceFactor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token keyword\">return</span> BalanceState<span class=\"token punctuation\">.</span><span class=\"token constant\">UNBALANCED_RIGHT</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token keyword\">return</span> BalanceState<span class=\"token punctuation\">.</span><span class=\"token constant\">SLIGHTLY_UNBALANCED_RIGHT</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token keyword\">return</span> BalanceState<span class=\"token punctuation\">.</span><span class=\"token constant\">BALANCED</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token keyword\">return</span> BalanceState<span class=\"token punctuation\">.</span><span class=\"token constant\">SLIGHTLY_UNBALANCED_LEFT</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token keyword\">return</span> BalanceState<span class=\"token punctuation\">.</span><span class=\"token constant\">UNBALANCED_LEFT</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"平衡操作\"><a class=\"markdownIt-Anchor\" href=\"#平衡操作\">#</a> 平衡操作</h4>\n<p>AVL 树的实现核心就在于，添加或删除结点之后，计算各结点的高度，确定是否需要进行平衡操作。对应的场景有四种：</p>\n<ol>\n<li>左 - 左（LL）</li>\n</ol>\n<p><img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/computerscience/ds-note/LL.6vb4qt41xgw0.webp\" alt=\"LL\"></p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 左左，向右单旋转</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 左侧高度大于右侧高度，且左侧子结点是平衡或左侧也较重</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *      a</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *     /            b</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *    b  --LL-->   / \\</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *   /            c   a</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *  c</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">rotationLL</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">const</span> tmp <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left <span class=\"token keyword\">as</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  tmp<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">return</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>右 - 右（RR）</li>\n</ol>\n<p><img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/computerscience/ds-note/RR.7iamfs4pfik0.webp\" alt=\"RR\"></p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 右右，向左单旋转</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 右侧结点高度大于左侧高度，且右侧子结点是平衡或右侧也较重</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *  a</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   \\           d</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *    d --RR--> / \\</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *     \\       a   e</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *      e</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">rotationRR</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">const</span> tmp <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right <span class=\"token keyword\">as</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  tmp<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">return</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>左 - 右（LR）</li>\n</ol>\n<p><img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/computerscience/ds-note/LR.7bj7xgwkx0g0.webp\" alt=\"LR\"></p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 左右</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 左侧结点高度大于右侧高度，且左侧子结点右侧较重</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 先对左侧子节点左单旋，再对左侧子节点右单旋</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">rotationLR</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span>TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">rotationRR</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token keyword\">as</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">rotationLL</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>右 - 左（RL）</li>\n</ol>\n<p><img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/computerscience/ds-note/RL.6zz40cx1s6g0.webp\" alt=\"RL\"></p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 右左</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 右侧结点高度大于左侧高度，且右侧子结点左侧较重</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 先对右侧子节点右单旋，再对右侧子节点左单旋</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">rotationRL</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">rotationLL</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token keyword\">as</span> TreeNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">rotationRR</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>小结</li>\n</ol>\n<ul>\n<li>LL、RR、LR、RL 的含义：<br>\n第一个字母表示不平衡发生在哪个方向的子树，第二个字母表示该子树哪个方向较重；<br>\n对 LL 和 RR，表示不平衡发生在左（右）子树，且该子树同侧较重，所以向相反方向旋转操作；<br>\n对 LR、RL，表示不平衡发生在左（右）子树，且该子树另一侧较重，所以进行两次旋转，第一次同侧旋转，将 LR 或 RL 转为 LL 或 RR；第二次再向相反方向旋转，恢复平衡。</li>\n<li>记忆方法：<br>\n对 LR、RL 因为旋转操作和字母含义相同，按照字母含义记忆；<br>\n对 LL 和 RR，可以理解为操作的目的是为了把较高的树提到上层，所以左旋是为了提升右子树，右旋是为了提升左子树，即左旋右提，右旋左提。</li>\n</ul>\n<h2 id=\"树的应用\"><a class=\"markdownIt-Anchor\" href=\"#树的应用\">#</a> 树的应用</h2>\n",
            "tags": [
                "计算机基础",
                "数据结构",
                "计算机基础",
                "数据结构"
            ]
        },
        {
            "id": "https://www.umi.homes/posts/a3a9/",
            "url": "https://www.umi.homes/posts/a3a9/",
            "title": "LeetCode-3-无重复字符的最长子串",
            "date_published": "2023-02-06T16:00:00.000Z",
            "content_html": "<h1 id=\"题目描述\"><a class=\"markdownIt-Anchor\" href=\"#题目描述\">#</a> 题目描述</h1>\n<p>题目来源：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9sb25nZXN0LXN1YnN0cmluZy13aXRob3V0LXJlcGVhdGluZy1jaGFyYWN0ZXJzLw==\">LeetCode</span></p>\n<p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的<strong>最长子串</strong>的长度。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>示例：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>输入: s &#x3D; &quot;abcabcbb&quot;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>输出: 3</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>解释：因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>输入: s &#x3D; &quot;bbbbb&quot;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>输出: 1</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>解释：因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>输入: s &#x3D; &quot;pwwkew&quot;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>输出: 3</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>解释：因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</pre></td></tr></table></figure><h1 id=\"解题思路\"><a class=\"markdownIt-Anchor\" href=\"#解题思路\">#</a> 解题思路</h1>\n<p>这道题目按照官方或者说有刷题经验的标准解法应该是<strong>滑动窗口</strong>，当然我一开始是没有很清晰的思路的……<br>\n 既然返回是最长无重复子串的长度，我的想法是：</p>\n<ul>\n<li>声明两个变量，一个用来存储子串长度，一个用来存储开始位置序号；</li>\n<li>使用字符串的 <code>slice</code>  方法获取子串，然后判断子串中是否有重复字符；</li>\n<li>若没有重复字符，将无重复子串的长度 + 1，重复获取子串的步骤；</li>\n<li>若有重复字符，将起始位置序号移动，然后再重新获取子串判断。</li>\n</ul>\n<p>经修改整理后是这样的：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">lengthOfLongestSubstring</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录最长无重复子串长度</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">let</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录子串开始位置序号</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> max <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span> <span class=\"token comment\">//  子串最大长度不超过无重复字符数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">const</span> len <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 字符串总长度</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 循环，count &lt; max，flag + count &lt; len；</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 长度为 count，判断时取子串长度为 count+1，flag + count + 1 = len 之后也无需再判断（没有更长的子串了）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> max <span class=\"token operator\">&amp;&amp;</span> flag <span class=\"token operator\">+</span> count <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">const</span> sub <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">,</span> flag <span class=\"token operator\">+</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//add 为重复字符的序号，据此来判断 flag 需要往后移动的距离</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">const</span> add <span class=\"token operator\">=</span> <span class=\"token function\">duplicateIndex</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>add <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//  无重复字符，count+1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token comment\">// 有重复字符，flag 移动到第一个不重复的字符的位置</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      flag <span class=\"token operator\">=</span> flag <span class=\"token operator\">+</span> add <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">// 判断子串中重复字符的序号</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">duplicateIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 遍历子串，lastIndexOf 方法，寻找到需要移动的最大距离</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token comment\">// 若有重复字符，寻找的是 flag 移动的最大距离</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token comment\">// 即，如果子串为 abba，那么 flag 至少需要移动 3+1，才能移动到第一个不会重复的字符</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">!==</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        res <span class=\"token operator\">=</span> i <span class=\"token operator\">></span> res <span class=\"token operator\">?</span> i <span class=\"token operator\">:</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 返回最远的一个重复字符的序号，res+1 是 flag 移动的距离</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>通过所有的测试用例的结果：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>执行用时：80 ms, 在所有 JavaScript 提交中击败了 68.81% 的用户</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>内存消耗：44.8 MB, 在所有 JavaScript 提交中击败了 67.84% 的用户</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>通过测试用例：987 &#x2F; 987</pre></td></tr></table></figure><h1 id=\"官方题解\"><a class=\"markdownIt-Anchor\" href=\"#官方题解\">#</a> 官方题解</h1>\n<p>滑动窗口的思路会更清晰一些：<br>\n用两个指针判断子串的左右边界，维护一个哈希集合判断是否有重复字符。<br>\n当没有重复字符时，移动右指针，并将新的字符加入哈希集合；当有重复字符，移动左指针，并将这个字符从哈希集合中删除。<br>\n例如：</p>\n<ul>\n<li>ababc -&gt;  <code>(a)</code> babc -&gt;  <code>(ab)</code> abc -&gt; a <code>(ba)</code> bc -&gt; ab <code>(ab)</code> c -&gt; ab <code>(abc)</code></li>\n</ul>\n<p>官方题解的代码如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">lengthOfLongestSubstring</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 哈希集合，记录每个字符是否出现过</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> occ <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 右指针，初始值为 -1，相当于我们在字符串的左边界的左侧，还没有开始移动</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">let</span> rk <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">// 左指针向右移动一格，移除一个字符</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      occ<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rk <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>occ<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>rk <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token comment\">// 不断地移动右指针</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      occ<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>rk <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token operator\">++</span>rk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 第 i 到 rk 个字符是一个极长的无重复字符子串</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    ans <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> rk <span class=\"token operator\">-</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>感觉官方的思路上还可以有所优化：</p>\n<ol>\n<li>是否借鉴自己实现的思路，左指针并不是指移动一格，而是直接移动到重复字符的后一格？</li>\n<li>左指针移动到重复字符后一格后，右指针直接移动到 <code>left+max+1</code>  格（长度比 <code>max</code>  小的不可能出现更长的子串）？</li>\n</ol>\n",
            "tags": [
                "LeetCode",
                "LeetCode"
            ]
        },
        {
            "id": "https://www.umi.homes/posts/d56/",
            "url": "https://www.umi.homes/posts/d56/",
            "title": "LeetCode-2-两数相加",
            "date_published": "2023-02-01T16:00:00.000Z",
            "content_html": "<h1 id=\"题目描述\"><a class=\"markdownIt-Anchor\" href=\"#题目描述\">#</a> 题目描述</h1>\n<p>题目来源：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9hZGQtdHdvLW51bWJlcnMv\">LeetCode</span></p>\n<p>给你两个<strong>非空</strong>的链表，表示两个非负的整数。它们每位数字都是按照<strong>逆序</strong>的方式存储的，并且每个结点只能存储<strong>一位</strong>数字。</p>\n<p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p>\n<p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>示例：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>输入：l1 &#x3D; [2,4,3], l2 &#x3D; [5,6,4]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>输出：[7,0,8]</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>解释：342 + 465 &#x3D; 807.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>输入：l1 &#x3D; [0], l2 &#x3D; [0]</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>输出：[0]</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>输入：l1 &#x3D; [9,9,9,9,9,9,9], l2 &#x3D; [9,9,9,9]</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>输出：[8,9,9,9,0,0,0,1]</pre></td></tr></table></figure><h1 id=\"解题思路\"><a class=\"markdownIt-Anchor\" href=\"#解题思路\">#</a> 解题思路</h1>\n<h2 id=\"链表\"><a class=\"markdownIt-Anchor\" href=\"#链表\">#</a> 链表</h2>\n<p>这道题首先需要理解的是链表的数据结构。<br>\n链表是一种线性的数据结构，它由一个指向该链表的指针（头指针）和一系列的存储单元（结点）组成。</p>\n<pre class=\"mermaid\">flowchart LR\nid1((data1))-->id2((data2))-->id3((date3))-->null</pre>\n<p>利用 JavaScript 来模拟实现的链表可能是这样的：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 单链表结点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">LinkedListNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">elem</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>elem <span class=\"token operator\">=</span> elem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 单链表</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">LinkedList</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">const</span> linkedList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 头插法逆序创建</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>num<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedListNode</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  node<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> linkedList<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  linkedList<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 创建结束后 linkedList</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token literal-property property\">head</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token literal-property property\">elem</span><span class=\"token operator\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token literal-property property\">next</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token literal-property property\">elem</span><span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token literal-property property\">next</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token literal-property property\">elem</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token literal-property property\">next</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>知道了链表的数据结构后，此题的解法就是遍历链表，并将遍历的值求和，建立一个新链表。<br>\n时间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo separator=\"true\">,</mo><mi>m</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(max(n,m))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> 分别是两个链表的长度。<br>\n空间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"注意事项\"><a class=\"markdownIt-Anchor\" href=\"#注意事项\">#</a> 注意事项</h2>\n<ul>\n<li>题中链表为逆序，给出链表也需要是逆序，因此需要使用尾插法创建。</li>\n<li>两数求和需要注意进位问题。</li>\n</ul>\n<h1 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">addTwoNumbers</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">l1<span class=\"token punctuation\">,</span> l2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> carry <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    head <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    rear <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> l2 <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">const</span> n1 <span class=\"token operator\">=</span> l1 <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> l1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">const</span> n2 <span class=\"token operator\">=</span> l2 <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> l2<span class=\"token punctuation\">.</span>val <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> n2 <span class=\"token operator\">+</span> carry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    carry <span class=\"token operator\">=</span> sum <span class=\"token operator\">></span> <span class=\"token number\">9</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    sum <span class=\"token operator\">%=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      rear <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      rear<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      rear <span class=\"token operator\">=</span> rear<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    l1 <span class=\"token operator\">=</span> l1 <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> l1<span class=\"token punctuation\">.</span>next <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    l2 <span class=\"token operator\">=</span> l2 <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> l2<span class=\"token punctuation\">.</span>next <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>carry <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>carry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    rear<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    rear <span class=\"token operator\">=</span> rear<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "LeetCode",
                "LeetCode"
            ]
        },
        {
            "id": "https://www.umi.homes/posts/a53b/",
            "url": "https://www.umi.homes/posts/a53b/",
            "title": "LeetCode-1-两数之和",
            "date_published": "2023-01-31T16:00:00.000Z",
            "content_html": "<h1 id=\"题目描述\"><a class=\"markdownIt-Anchor\" href=\"#题目描述\">#</a> 题目描述</h1>\n<p>题目来源：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy90d28tc3VtLw==\">LeetCode</span></p>\n<p>给定一个整数数组 <code>nums</code>  和一个整数目标值 <code>target</code> ，请你在该数组中找出<strong>和为目标值</strong> <code>target</code>  的那<strong>两个</strong>整数，并返回它们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>\n<p>你可以按任意顺序返回答案。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>示例：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>输入：nums &#x3D; [2,7,11,15], target &#x3D; 9</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>输出：[0,1]</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>解释：因为 nums [0] + nums [1] &#x3D;&#x3D; 9 ，返回 [0, 1] 。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>输入：nums &#x3D; [3,2,4], target &#x3D; 6</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>输出：[1,2]</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>输入：nums &#x3D; [3,3], target &#x3D; 6</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>输出：[0,1]</pre></td></tr></table></figure><h1 id=\"解题思路\"><a class=\"markdownIt-Anchor\" href=\"#解题思路\">#</a> 解题思路</h1>\n<h2 id=\"方法一暴力枚举\"><a class=\"markdownIt-Anchor\" href=\"#方法一暴力枚举\">#</a> 方法一：暴力枚举</h2>\n<p>遍历数组，对数组的每一个数 <code>x</code>  都查找是否存在 <code>target - x</code> 。<br>\n时间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span><br>\n 空间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"方法二散列表\"><a class=\"markdownIt-Anchor\" href=\"#方法二散列表\">#</a> 方法二：散列表</h2>\n<p>遍历数组，因为返回值是数组下标，因此对数组每一个数 <code>x</code> ，以 <code>target - x</code>  为 <code>key</code> ， <code>index</code>  为 <code>value</code> ，建立哈希表。<br>\n时间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span><br>\n 空间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span></p>\n<h1 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h1>\n<h2 id=\"方法一\"><a class=\"markdownIt-Anchor\" href=\"#方法一\">#</a> 方法一：</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">twoSum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nums<span class=\"token punctuation\">,</span> target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> num1 <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">const</span> num2 <span class=\"token operator\">=</span> target <span class=\"token operator\">-</span> num1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">></span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> num2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"方法二\"><a class=\"markdownIt-Anchor\" href=\"#方法二\">#</a> 方法二：</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//object 对象是 &#123;key:value&#125; 结构的，所以可以使用它构建哈希表</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">twoSum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nums<span class=\"token punctuation\">,</span> target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>obj<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> target <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      obj<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 进一步，可以使用 es6 + 的 Map 来构建哈希表</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">twoSum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nums<span class=\"token punctuation\">,</span> target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">const</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">-</span> num<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "LeetCode",
                "LeetCode"
            ]
        },
        {
            "id": "https://www.umi.homes/posts/c5f/",
            "url": "https://www.umi.homes/posts/c5f/",
            "title": "集合与映射",
            "date_published": "2023-01-31T16:00:00.000Z",
            "content_html": "<h1 id=\"集合\"><a class=\"markdownIt-Anchor\" href=\"#集合\">#</a> 集合</h1>\n<p>集合（Set），简称集，和数字概念中的集合类似，该数据结构由一组无序且唯一的元素组成。<br>\n在 ECMAScript2015 中，Set 类已经成为 JavaScript 的标准内置对象，而在这之前，可以通过 Object 来模拟实现。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MySet<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  items<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 如果元素在集合中，返回 true，否则返回 false</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">has</span><span class=\"token punctuation\">(</span>elem<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">,</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 向集合中添加一个元素，注意集合中元素是唯一的</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>elem<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">[</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> elem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">// 从集合中移除一个元素</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span>elem<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token keyword\">delete</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">[</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token comment\">// 移除集合中所有元素</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token comment\">// 返回集合包含元素数量</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token comment\">// 返回一个包含集合中所有元素的数组</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>作为标准内置对象的 Set 类同样也有类似上述的这些方法，但是稍有区别：</p>\n<ol>\n<li><code>Set()</code>  构造函数可以接受一个数值，或者一个可迭代对象，来创建集合。</li>\n<li><code>.values()</code>  和 <code>.keys()</code>  两者完全相同，返回的是一个迭代器对象，它<strong>按插入顺序</strong>包含集合中每个元素的值。</li>\n<li><code>.forEach()</code>  方法可以对集合中的每个值按插入顺序执行一次提供的函数。</li>\n</ol>\n<h2 id=\"集合运算\"><a class=\"markdownIt-Anchor\" href=\"#集合运算\">#</a> 集合运算</h2>\n<p>集合可以进行以下的运算：</p>\n<table>\n<thead>\n<tr>\n<th>运算</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>并集</td>\n<td>对于给定的两个集合，返回一个包含两个集合元素的新集合</td>\n</tr>\n<tr>\n<td>交集</td>\n<td>对于给定的两个集合，返回一个包含两个集合中共有元素的新集合</td>\n</tr>\n<tr>\n<td>差集</td>\n<td>对于给定两个集合，返回一个包含所有存在一集合而不存在二集合的元素的新集合</td>\n</tr>\n<tr>\n<td>子集</td>\n<td>验证一个集合是否为另一个集合的子集</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MySet<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Set<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>array<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 并集，返回的是包含两个集合元素的新集合</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">union</span><span class=\"token punctuation\">(</span>otherSet<span class=\"token operator\">:</span> MySet<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">const</span> unionSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MySet<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> unionSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    otherSet<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> unionSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> unionSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 交集，返回的是两个集合中共有元素的新集合</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">intersection</span><span class=\"token punctuation\">(</span>otherSet<span class=\"token operator\">:</span> MySet<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">const</span> intersectionSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MySet<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">const</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">></span> otherSet<span class=\"token punctuation\">.</span>size <span class=\"token operator\">?</span> otherSet <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    set<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>otherSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        intersectionSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> intersectionSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\">// 差集，返回的是存在于集合 1 但不存在于集合 2 的所有元素的新集合</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token function\">difference</span><span class=\"token punctuation\">(</span>otherSet<span class=\"token operator\">:</span> MySet<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">const</span> differenceSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MySet<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>otherSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        differenceSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">return</span> differenceSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token comment\">// 子集判断</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token function\">isSubsetOf</span><span class=\"token punctuation\">(</span>otherSet<span class=\"token operator\">:</span> MySet<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">></span> otherSet<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token keyword\">let</span> isSubset<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>isSubset <span class=\"token operator\">=</span> otherSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token keyword\">return</span> isSubset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果使用内置的 Set 类，结合扩展运算符和数组方法，可以写的更简略一些：</p>\n<details class=\"primary\"><summary>并集</summary><div>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">union</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>setA<span class=\"token operator\">:</span> Set<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> setB<span class=\"token operator\">:</span> Set<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>setA<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>setB<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div></details>\n<details class=\"primary\"><summary>交集</summary><div>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">intersection</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>setA<span class=\"token operator\">:</span> Set<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> setB<span class=\"token operator\">:</span> Set<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>setA<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> setB<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div></details>\n<details class=\"primary\"><summary>差集</summary><div>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">difference</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>setA<span class=\"token operator\">:</span> Set<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> setB<span class=\"token operator\">:</span> Set<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>setA<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>setB<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div></details>\n<h1 id=\"映射\"><a class=\"markdownIt-Anchor\" href=\"#映射\">#</a> 映射</h1>\n<p>集合关注的主要是值本身，而在映射（Map）中，则采用键值对的形式来存储数据。<br>\nJavaScript 中的 Object 类是采用键值对形式存储数据的类型，但是能作为键的数据类型只能是 <code>string</code>  或者 <code>symbol</code> 。ECMAScript2015 将 Map 类加入到 JavaScript 的标准内置对象中，在写入删除密集的情况下，它有更好的性能表现。<br>\nMap 与 Object 区别见下：</p>\n<table>\n<thead>\n<tr>\n<th>区别</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>意外的键</td>\n<td>Map 只有显示插入的键，而 Object 有一个原型</td>\n</tr>\n<tr>\n<td>键的类型</td>\n<td>Map 的键可以是任意值，而 Object 的键只能是  <code>string</code>  或  <code>symbol</code>  类型</td>\n</tr>\n<tr>\n<td>键的顺序</td>\n<td>Map 的键按插入顺序，而 Object 的键按数字到字符串顺序</td>\n</tr>\n<tr>\n<td>长度</td>\n<td>Map 有 <code>size</code>  属性获取长度，Object 需要手动统计</td>\n</tr>\n<tr>\n<td>性能</td>\n<td>Map 在频繁增删键值对的场景下表现更好</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"方法与属性\"><a class=\"markdownIt-Anchor\" href=\"#方法与属性\">#</a> 方法与属性</h2>\n<table>\n<thead>\n<tr>\n<th>方法或属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>size</code></td>\n<td>Map 的属性，等于键值对的数量</td>\n</tr>\n<tr>\n<td><code>clear()</code></td>\n<td>删除 Map 中所有元素</td>\n</tr>\n<tr>\n<td><code>delete(key)</code></td>\n<td>删除 Map 中指定元素</td>\n</tr>\n<tr>\n<td><code>get(key)</code></td>\n<td>根据键返回指定的元素</td>\n</tr>\n<tr>\n<td><code>has(key)</code></td>\n<td>判断指定键的元素是否存在</td>\n</tr>\n<tr>\n<td><code>set(key, value)</code></td>\n<td>指定键值对</td>\n</tr>\n<tr>\n<td><code>forEach()</code></td>\n<td>按照插入顺序对 Map 中每个键值对执行一次给定的函数</td>\n</tr>\n</tbody>\n</table>\n<p>另外还有 <code>keys()</code> 、 <code>values()</code>  和 <code>entries()</code>  方法，它们返回的都是一个迭代器对象，分别包含每个元素的 <code>key</code> 、 <code>value</code>  或 <code>[key, value]</code>  对。</p>\n<h2 id=\"散列表\"><a class=\"markdownIt-Anchor\" href=\"#散列表\">#</a> 散列表</h2>\n<p>散列表，也称为哈希表（HashTable、HashMap），是通过键值（key）直接访问对应数值（value）的一种数据结构。它通过计算出一个键值的函数，将所需查询的数据映射到表中一个位置来让人访问，这加快了查找速度。这个映射函数称做散列函数，存放记录的数组称做散列表。<br>\n例如，以电子邮件地址簿为例，它的散列函数和对应的散列表可能是这样的：<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/computerscience/ds-note/epub_26211966_149.3p8zhp0drwu0.webp\" alt=\"散列表\"></p>\n<h3 id=\"简单实现\"><a class=\"markdownIt-Anchor\" href=\"#简单实现\">#</a> 简单实现</h3>\n<p>散列表中的关键是<strong>散列函数</strong>的设计，一般来说，对整数的键值可以考虑取余数转为数组索引，除数一般选择<strong>不超过数组长度的最大质数</strong>，而对字符串类型的键值，最简单的方法是可以转为 ACSII 码求和后再按数值类型的键处理。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">HashMap<span class=\"token operator\">&lt;</span><span class=\"token constant\">K</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">V</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 这里用 Map 存储，实际中使用数组、对象也可以</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">private</span> map<span class=\"token operator\">:</span> Map<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> key<span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">;</span> value<span class=\"token operator\">:</span> <span class=\"token constant\">V</span> <span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 为了信息备份，因此原始的 key 值也需要保留下来</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> key<span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">;</span> value<span class=\"token operator\">:</span> <span class=\"token constant\">V</span> <span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 散列函数，这里假设只处理 key 为字符串的情况</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token function\">hashFn</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> key <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token keyword\">let</span> hashCode <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> key<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        hashCode <span class=\"token operator\">+=</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token comment\">// 通过除以质数取余进行散列</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">return</span> hashCode <span class=\"token operator\">%</span> <span class=\"token number\">37</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token constant\">V</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">const</span> hash <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashFn</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hash <span class=\"token operator\">!==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> key<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">const</span> hash <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashFn</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hash <span class=\"token operator\">!==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">)</span><span class=\"token operator\">?.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">const</span> hash <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashFn</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hash <span class=\"token operator\">!==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"冲突处理\"><a class=\"markdownIt-Anchor\" href=\"#冲突处理\">#</a> 冲突处理</h3>\n<p>有些时候，一些键会有相同的散列值，这与散列函数的设计有关。不同的值在散列表中对应相同位置的时候，称其为冲突。<br>\n例如，如果散列函数设计为 <code>hash = key % 7</code> ，当 <code>key</code>  值为 8、15 和 22 时，它们的散列值都为 1。<br>\n常用解决冲突的方法有两种，分离链接法或线性探测法。</p>\n<h4 id=\"分离链接法\"><a class=\"markdownIt-Anchor\" href=\"#分离链接法\">#</a> 分离链接法</h4>\n<p>分离链接法包括为散列表的每一个位置创建一个链表并将元素存储在里面，它是解决冲突的最简单的方法。如下图所示：<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/computerscience/ds-note/epub_26211966_155.6zirl6m27dc0.webp\" alt=\"分离链接法\"><br>\n相应的各方法也需要进行改写：</p>\n<ul>\n<li><code>put</code>  方法，如果是第一次在该散列值对应的位置放入元素时，应该在该位置初始化一个单链表，当遇到冲突后，冲突的元素继续在链表上进行添加。</li>\n<li><code>get</code>  方法，不仅需要根据散列值找到对应的元素所在的链表，同时还需要检查链表每个结点中的 <code>key</code>  值是否等于查找的 <code>key</code>  值，然后来返回相应的结果。</li>\n<li><code>remove</code>  方法，如果元素删除后，链表非空，可以直接使用链表的删除方法。如果删除元素后链表为空，还需要将对应的散列值删除（或者直接置空）。</li>\n</ul>\n<h4 id=\"线性探测法\"><a class=\"markdownIt-Anchor\" href=\"#线性探测法\">#</a> 线性探测法</h4>\n<p>另一种解决冲突的方法是线性探查。之所以称作线性，是因为它处理冲突的方法是将元素直接存储到表中，而不是在单独的数据结构中。<br>\n当想向表中某个位置添加一个新元素的时候，如果索引为 <code>position</code>  的位置已经被占据了，就尝试 <code>position+1</code>  的位置。如果 <code>position+1</code>  的位置也被占据了，就尝试 <code>position+2</code>  的位置，以此类推，直到在散列表中找到一个空闲的位置。如下图所示：<br>\n<img data-src=\"https://cdn.staticaly.com/gh/umitsurumi/image-hosting@master/blog-images/computerscience/ds-note/epub_26211966_156.7d733xigvm40.webp\" alt=\"线性探测法\"><br>\n与分离探测法类似， <code>get</code>  和 <code>remove</code>  方法也需要检查对应元素的 <code>key</code>  值，确保是需要进行操作的元素。</p>\n",
            "tags": [
                "计算机基础",
                "数据结构",
                "计算机基础",
                "数据结构"
            ]
        },
        {
            "id": "https://www.umi.homes/posts/b712/",
            "url": "https://www.umi.homes/posts/b712/",
            "title": "栈和队列",
            "date_published": "2023-01-23T16:00:00.000Z",
            "content_html": "<h1 id=\"栈\"><a class=\"markdownIt-Anchor\" href=\"#栈\">#</a> 栈</h1>\n<p>栈是一种遵循<strong>后进先出</strong>（Last in First out,LIFO）的数据结构。<br>\n进行出栈和入栈操作的一段称为栈顶，不能进行操作的一段称为栈底。<br>\n当有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 个不同的元素入栈，出栈的元素共有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mn>1</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfrac><mi>C</mi><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mi>n</mi><mrow><mn>2</mn><mi>n</mi></mrow></mfrac><mo fence=\"true\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">{1\\over n+1} C\\binom{n}{2n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.253331em;vertical-align:-0.403331em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.403331em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7453919999999999em;\"><span style=\"top:-2.3550000000000004em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span></span></span></span> 种不同的排列。</p>\n<h2 id=\"数组实现\"><a class=\"markdownIt-Anchor\" href=\"#数组实现\">#</a> 数组实现</h2>\n<p>使用数组来实现是很方便的，因为 JavaScript 数组本身就有 <code>pop</code>  和 <code>push</code>  方法：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  items<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  top<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 栈顶指针，top = items.length -1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 返回栈长度</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 元素入栈</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>elem<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>top<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">// 元素出栈</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>top <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>top<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> res <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">:</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\">// 获取栈顶元素</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token function\">getTop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>top <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token comment\">// 判断栈是否为空</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>top <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token comment\">// 清空栈</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"链表实现\"><a class=\"markdownIt-Anchor\" href=\"#链表实现\">#</a> 链表实现</h2>\n<p>链式栈的实现也只需要在之前单链表的基础上稍作修改。<br>\n为了符合栈 LIFO 的特性，单链表可以使用头插法创建，这样就保证先创建的结点在链表的尾部，而后创建的结点在链表头部。头指针可以作为栈顶指针来实现出栈入栈的操作。</p>\n<details class=\"primary\"><summary>头插法的代码</summary><div>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">headInsert</span><span class=\"token punctuation\">(</span>array<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedListNode</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    node<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div></details>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">LinkedStack<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">LinkedList<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 因为头插法是逆序创建的链表，因此可以实现后进先出</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  initStack <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>headInsert<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 与链表相比，pop 和 push 只是变成了在表头操作</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 使用尾插法也可以实现，但是需要使用一个尾指针来实现栈顶的操作</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">const</span> cur <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>elem<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedListNode</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      node<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token comment\">// 清空操作只需要将表头置空，长度属性变 0 即可</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"栈的应用\"><a class=\"markdownIt-Anchor\" href=\"#栈的应用\">#</a> 栈的应用</h2>\n<p>栈的实际应用非常广泛，在实际应用中，它可以存储访问过的任务或路径、撤销的操作，像是进制转换、表达式求值都可以用到栈，函数的递归调用利用到了栈。</p>\n<h3 id=\"进制转换\"><a class=\"markdownIt-Anchor\" href=\"#进制转换\">#</a> 进制转换</h3>\n<p>十进制转二进制采用 “除二取余，逆序排列” 的方法。<br>\n具体的说，就是将一个十进制数除以二，然后得到商和余数，再把商用来除以二，直到商为 0。然后将这些余数逆序作为二进制数的高位到低位。<br>\n这里这个逆序，即符合栈后进先出的特性。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">decimal_to_binary</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">number</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">//number 大于等于 0 的整数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">number</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 以数组实现的栈</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">const</span> stack<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">number</span> <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">const</span> r <span class=\"token operator\">=</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">number</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      res <span class=\"token operator\">+=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"表达式转换\"><a class=\"markdownIt-Anchor\" href=\"#表达式转换\">#</a> 表达式转换</h3>\n<p>常用的表达式写法，形如：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>A</mi><mo>+</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>C</mi><mo>−</mo><mi>D</mi><mi mathvariant=\"normal\">/</mi><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">(A+B)*C-D/E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span>，被称为<strong>中缀表达式</strong>，它符合人类的表达方式，但是却不容易被计算机解析。<br>\n波兰数学家 Łukasiewicz 发明了<strong>前缀表达式</strong>和<strong>后缀表达式</strong>，两种方式又被分别称为波兰式（Polish notation）和逆波兰式（Reverse Polish notation）。比起中缀表示法，这两种表示法更多得被应用在计算机中。<br>\n用它们来表示上面那个表达式是这样的：</p>\n<ul>\n<li>波兰式：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mo>∗</mo><mo>+</mo><mi>A</mi><mi>B</mi><mi>C</mi><mi mathvariant=\"normal\">/</mi><mi>D</mi><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">-*+ABC/DE</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">+</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span></li>\n<li>逆波兰式：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>B</mi><mo>+</mo><mi>C</mi><mo>∗</mo><mi>D</mi><mi>E</mi><mi mathvariant=\"normal\">/</mi><mo>−</mo></mrow><annotation encoding=\"application/x-tex\">AB+C*DE/-</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">/</span><span class=\"mord\">−</span></span></span></span></li>\n</ul>\n<p>可以利用栈来实现一个中缀表达式到后缀表达式的转换：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 假设输入的中缀表达式是合法的，只有数字、操作符和左右括号</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">toRPN</span><span class=\"token punctuation\">(</span>express<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 设置操作符权重</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">weight</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">const</span> opWeight<span class=\"token operator\">:</span> weight <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token string-property property\">\"+\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token string-property property\">\"-\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token string-property property\">\"*\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token string-property property\">\"/\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// 操作符栈和返回栈顶元素</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">const</span> opStack<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">getTop</span><span class=\"token punctuation\">(</span>stack<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> stack<span class=\"token punctuation\">[</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">// 遍历表达式，将中缀表达式转为后缀表达式</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> express<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> express<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 如果是数字，将其直接加入表达式</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\d</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      res <span class=\"token operator\">+=</span> str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 如果是操作符，</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 将栈中大于等于当前操作符权重的操作符出栈加入表达式，再将当前操作符入栈</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>opWeight<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        opStack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token function\">getTop</span><span class=\"token punctuation\">(</span>opStack<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        opWeight<span class=\"token punctuation\">[</span><span class=\"token function\">getTop</span><span class=\"token punctuation\">(</span>opStack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> opWeight<span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        res <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> opStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      opStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      res <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">// 如果是左括号，直接入栈</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">// 右括号则将栈中直到左括号之前的操作符都出栈加入表达式</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str <span class=\"token operator\">===</span> <span class=\"token string\">\"(\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      opStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str <span class=\"token operator\">===</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getTop</span><span class=\"token punctuation\">(</span>opStack<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token string\">\"(\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        res <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> opStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      opStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>opStack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    res <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> opStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在对后缀表达式进行计算时，也是利用栈来实现的：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 这里假设表达式为上文处理后的后缀表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 即形如 \"A B C * + D -\"，数字、运算符之间两两用空格隔开</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">opRPN</span><span class=\"token punctuation\">(</span>rpn<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 初始化数字栈</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">const</span> numStack<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 假设这里是处理后的后缀表达式</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> rpn<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 遍历表达式，处理每一个数字和运算符</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 如果是数字，将数字直接入栈</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\d</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      numStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token comment\">// 如果是运算符，出栈两个数字，并进行运算，再将运算后的新数字入栈</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> numStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> numStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token string\">\"+\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          numStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token string\">\"-\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          numStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token string\">\"*\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          numStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token string\">\"/\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>          numStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token comment\">// 处理完成后，栈中只有一个数字，即为最终运算结果</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token keyword\">return</span> numStack<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>类似的，中缀表达式转为前缀表达式，以及前缀表达式的计算，也可以使用栈来实现。</p>\n<h1 id=\"队列\"><a class=\"markdownIt-Anchor\" href=\"#队列\">#</a> 队列</h1>\n<p>队列是一种遵循<strong>先进先出</strong>（First in First out,FIFO）的数据结构。<br>\n队头是只允许进行删除操作的一端，与之对应的操作称为出队；队尾是只允许进行插入操作的一端，与之对应的操作称之为入队。</p>\n<h2 id=\"数组实现-2\"><a class=\"markdownIt-Anchor\" href=\"#数组实现-2\">#</a> 数组实现</h2>\n<p>很容易想到，JavaScript 中提供了 <code>shift</code>  方法来操作数组的第一个元素，因此也可以很方便的实现队列，这种方式与数组实现的栈类似。<br>\n但是， <code>shift</code>  方法需要更改其余数组元素的下标，需要<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> 的时间复杂度。因此可以考虑逻辑删除的方式，使出队操作达到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> 的时间复杂度。</p>\n<div id=\"queue\" >\n  <div style=\"display:flex;justify-content:center;width:100%\">\n      <div style=\"width:60px;height:60px;background:grey;border:2px solid grey;text-align:center;line-height:60px;font-size:30px;color:black\">a</div>\n      <div style=\"width:60px;height:60px;background:grey;border:2px solid grey;text-align:center;line-height:60px;font-size:30px;color:black\">b</div>\n      <div style=\"width:60px;height:60px;border:2px solid orange;text-align:center;line-height:60px;font-size:30px;color:orange\">c</div>\n      <div style=\"width:60px;height:60px;border:2px solid orange;text-align:center;line-height:60px;font-size:30px;color:orange\">d</div>\n      <div style=\"width:60px;height:60px;border:2px solid orange;text-align:center;line-height:60px;font-size:30px;color:orange\">e</div>\n  </div>\n  <p style=\"text-align:center;font-size:14px\">front指针指向第三个元素，前面两个元素被视为逻辑删除</p>\n</div>\n<p>此外，在部分语言中，数组的大小在声明后就不能再更改，为了充分利用数组空间，解决单向队列假溢出的问题，还可以进一步优化，在逻辑上形成一个循环队列。</p>\n<div id=\"circularQueue\">\n<div style=\"display:flex;justify-content:center;width:100%\">\n  <div style=\"position:relative;width:200px;height:200px;border:solid 2px orange;border-radius:100px\">\n    <div style=\"position:absolute;top:50px;left:50px;width:100px;height:100px;border:solid 2px orange;border-radius:100px\"></div>\n    <div style=\"position:absolute;top:0;left:99px;height:50px;width:2px;background:orange\">\n    <p style=\"position:absolute;left:30px;font-size:30px\">a</p>\n    </div>\n    <div style=\"transform:rotate(60deg);transform-origin:0px 99px;position:absolute;top:0;left:99px;height:50px;width:2px;background:orange\">\n    <p style=\"position:absolute;left:30px;font-size:30px\">b</p>\n    </div>\n    <div style=\"transform:rotate(120deg);transform-origin:0px 99px;position:absolute;top:0;left:99px;height:50px;width:2px;background:orange\"></div>\n    <div style=\"transform:rotate(180deg);transform-origin:0px 99px;position:absolute;top:0;left:99px;height:50px;width:2px;background:orange\"></div>\n    <div style=\"transform:rotate(240deg);transform-origin:0px 99px;position:absolute;top:0;left:99px;height:50px;width:2px;background:orange\"></div>\n    <div style=\"transform:rotate(300deg);transform-origin:0px 99px;position:absolute;top:0;left:99px;height:50px;width:2px;background:orange\"></div>\n  </div>\n</div>\n<p style=\"text-align:center;font-size:14px\">循环队列把顺序队列首尾相连，在逻辑上是一个环</p>\n</div>\n<details class=\"primary\"><summary>数组方法</summary><div>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Queue<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  items<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 返回队列长度</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 元素入队</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">enQueue</span><span class=\"token punctuation\">(</span>elem<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// 元素出队</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token function\">deQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> res <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">:</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">// 判断队列是否为空</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\">// 清空队列</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div></details>\n<details class=\"primary\"><summary>循环队列</summary><div>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CircularQueue<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token constant\">MAX_SIZE</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  items<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  count<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  front<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  rear<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MAX_SIZE</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_SIZE</span> <span class=\"token operator\">=</span> <span class=\"token constant\">MAX_SIZE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">MAX_SIZE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>front <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rear <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token function\">enQueue</span><span class=\"token punctuation\">(</span>elem<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_SIZE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rear<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> elem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rear <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rear <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_SIZE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token function\">deQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>front<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>front <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>front <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_SIZE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token comment\">// 清空队列</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_SIZE</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>front <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rear <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div></details>\n<h2 id=\"链表实现-2\"><a class=\"markdownIt-Anchor\" href=\"#链表实现-2\">#</a> 链表实现</h2>\n<p>链式队列的实现同样也只需要在之前单链表的基础上稍作修改。<br>\n为了符合栈 FIFO 的特性，单链表可以使用尾插法创建，这样就保证先创建的结点在链表的头部，而后创建的结点在链表尾部。<br>\n需要注意的是，除了头指针，还需要一个尾指针来实现入队的操作。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">LinkedQueue<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">LinkedList<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  tail<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> LinkedListNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 新增一个队尾指针</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 因为尾插法是顺序创建的链表，因此可以实现先进先出</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 尾指针要始终指向队尾最后一个结点</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">initQueue</span><span class=\"token punctuation\">(</span>array<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedListNode</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token function\">enQueue</span><span class=\"token punctuation\">(</span>elem<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedListNode</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token function\">deQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token keyword\">const</span> cur <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token keyword\">return</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token comment\">// 清空操作只需要将表头置空，长度属性变 0 即可</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"队列的应用\"><a class=\"markdownIt-Anchor\" href=\"#队列的应用\">#</a> 队列的应用</h2>\n<p>队列的实际应用也很广泛，诸如操作系统的 I/O 调度、多用户的资源竞争等场景。<br>\n浏览器中的事件循环机制，也使用到了队列。</p>\n<h1 id=\"数组\"><a class=\"markdownIt-Anchor\" href=\"#数组\">#</a> 数组</h1>\n<h2 id=\"js-中的数组\"><a class=\"markdownIt-Anchor\" href=\"#js-中的数组\">#</a> JS 中的数组</h2>\n<p>不同于其他语言中的数组，JavaScript 中的数组实际上也是一种特殊的对象，可以使用 <code>Array instanceof Object</code>  证明。 <code>array[index]</code>  实际上也是对象 <code>object[key]</code>  的语法。<br>\n但是与一般的对象不同，JavaScript 引擎对数组进行了一些特殊的优化，而其中的元素也尽可能一个接一个存储在连续的内存区域内，因此当我们将数组视作一个<strong>有序集合</strong>的特殊结构来使用时，它的效率要高于普通对象。</p>\n<h2 id=\"多维数组\"><a class=\"markdownIt-Anchor\" href=\"#多维数组\">#</a> 多维数组</h2>\n<p>二维数组可以用来表示矩阵，但是在 JavaScript 中，没有简单直接的方式（形如， <code>int array[n][m]</code> ）来创建多维数组。<br>\n如果希望在用 JavaScript 来创建一个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> 行<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 列的二维数组，可以采用以下方法：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> m <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 1.Array.from</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 2.Array.prototype.map</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 3.for 循环</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">const</span> arr3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>直接使用 <code>arr = new Array(m).fill(new Array(n))</code>  是不行的，因为 <code>fill</code>  方法传入的是对象的引用。</p>\n<p>在 typescript 中定义二维数组，可以采用如下方法：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arr1<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> arr2<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">>></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机基础",
                "数据结构",
                "计算机基础",
                "数据结构"
            ]
        },
        {
            "id": "https://www.umi.homes/posts/d64e/",
            "url": "https://www.umi.homes/posts/d64e/",
            "title": "链表",
            "date_published": "2023-01-16T16:00:00.000Z",
            "content_html": "<h1 id=\"链表的数据结构\"><a class=\"markdownIt-Anchor\" href=\"#链表的数据结构\">#</a> 链表的数据结构</h1>\n<h2 id=\"数组\"><a class=\"markdownIt-Anchor\" href=\"#数组\">#</a> 数组</h2>\n<p>数组是最常用来存储多个元素的数据结构，数组可以实现<strong>随机存取</strong>，通过下标 <code>index</code>  在<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> 的时间复杂度中访问元素。<br>\n但是在大多数语言中，数组的大小是固定的，而在数组的起点和中间插入或移除元素的时间成本也较高。</p>\n<h2 id=\"链表\"><a class=\"markdownIt-Anchor\" href=\"#链表\">#</a> 链表</h2>\n<p>链表存储有序的元素集合，但不同于数组，链表中的元素在内存中并不是连续放置的。每个元素由一个存储元素本身的结点和一个指向下一个元素的引用（也称指针或链接）组成。<br>\n相对于传统的数组，链表的好处在于，它的长度并不是固定的，方便后续增加新的元素，同时在添加或移除元素的时候不需要移动其他元素。</p>\n<pre class=\"mermaid\">flowchart LR\nhead --> D1((data))-->D2((data))-->D3((data))-->null</pre>\n<h1 id=\"单向链表\"><a class=\"markdownIt-Anchor\" href=\"#单向链表\">#</a> 单向链表</h1>\n<h2 id=\"单链表结点\"><a class=\"markdownIt-Anchor\" href=\"#单链表结点\">#</a> 单链表结点</h2>\n<p>单项链表的每个结点应该包含存储的元素和指向下一个点的指针。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">LinkedListNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  elem<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  next<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> LinkedListNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>elem<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>elem <span class=\"token operator\">=</span> elem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"创建单链表\"><a class=\"markdownIt-Anchor\" href=\"#创建单链表\">#</a> 创建单链表</h2>\n<p>定义单链表：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">LinkedList<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 头指针，指向第一个结点</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">private</span> head<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> LinkedListNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 表长属性</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">private</span> length<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>从数组创建单链表：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">LinkedList<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 头插法创建，单链表中数据元素为输入数组逆序</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">headInsert</span><span class=\"token punctuation\">(</span>array<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedListNode</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      node<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 尾插法创建，单链表中数据元素为输入数组顺序</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">tailInsert</span><span class=\"token punctuation\">(</span>array<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">let</span> rear <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedListNode</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rear <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        rear <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        rear<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        rear <span class=\"token operator\">=</span> rear<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"单链表方法\"><a class=\"markdownIt-Anchor\" href=\"#单链表方法\">#</a> 单链表方法</h2>\n<p>定义单链表的一些操作（类的方法）：</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>size()</code></td>\n<td>求表长</td>\n</tr>\n<tr>\n<td><code>isEmpty()</code></td>\n<td>链表判空</td>\n</tr>\n<tr>\n<td><code>getHead()</code></td>\n<td>获取表头</td>\n</tr>\n<tr>\n<td><code>indexOf(elem)</code></td>\n<td>按值查找</td>\n</tr>\n<tr>\n<td><code>getNode(index)</code></td>\n<td>按位查找（结点）</td>\n</tr>\n<tr>\n<td><code>getElem(index)</code></td>\n<td>按位查找（值）</td>\n</tr>\n<tr>\n<td><code>remove(elem)</code></td>\n<td>按值删除</td>\n</tr>\n<tr>\n<td><code>removeAt(index)</code></td>\n<td>按位删除</td>\n</tr>\n<tr>\n<td><code>insertElem(elem,index)</code></td>\n<td>按位插入</td>\n</tr>\n<tr>\n<td><code>toString()</code></td>\n<td>转为字符串</td>\n</tr>\n</tbody>\n</table>\n<div class=\"note info\">\n<p>以下这些方法都在 <code>class LinkedList</code>  中定义</p>\n</div>\n<details class=\"primary\"><summary>size()</summary><div>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 求表长</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 对于有 length 属性的链表，可以直接返回 this.length</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 对于没有 length 属性的链表需要进行一次遍历</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> cur<span class=\"token operator\">:</span><span class=\"token keyword\">null</span><span class=\"token operator\">|</span>LinkedListNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        count<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div></details>\n<details class=\"primary\"><summary>isEmpty()</summary><div>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 链表判空</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 同样，可以从表长判断，也可以从头指针判断</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div></details>\n<details class=\"primary\"><summary>getHead()</summary><div>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 返回头指针</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 因为 head 由 private 修饰，使用 getHead 获得 head</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">getHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div></details>\n<details class=\"primary\"><summary>indexOf(elem)</summary><div>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 按值查找</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 与数组相同，结点序号从 0 开始，找到返回结点序号，否则返回 - 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>elem<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">let</span> cur<span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> cur<span class=\"token punctuation\">.</span>elem <span class=\"token operator\">!==</span> elem<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>elem <span class=\"token operator\">!==</span> elem<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div></details>\n<details class=\"primary\"><summary>getNode(index)</summary><div>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 按位查找，返回结点，如果未找到，返回 null</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">getNode</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">let</span> cur <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> index <span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> index <span class=\"token operator\">&amp;&amp;</span> cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        i<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div></details>\n<details class=\"primary\"><summary>getElem(index)</summary><div>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 按位查找，返回结点的值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">getElem</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> cur <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNode</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> cur<span class=\"token punctuation\">.</span>elem</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div></details>\n<details class=\"primary\"><summary>removeAt(index)</summary><div>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 按位删除</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">removeAt</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> index <span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">const</span> cur <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>next</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 找到需要删除结点的前驱结点</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">const</span> pre <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNode</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> LinkedListNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 前驱结点的 next 为需要删除的结点</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">const</span> cur <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">.</span>next <span class=\"token keyword\">as</span> LinkedListNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 前驱结点的 next 指向需要删除结点的后继，使被删除结点从链表中脱离</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    pre<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>next</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> cur</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div></details>\n<details class=\"primary\"><summary>remove(elem)</summary><div>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 按值删除</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>elem<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">const</span> del <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeAt</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> del</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div></details>\n<details class=\"primary\"><summary>insertElem(elem, index)</summary><div>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 按位插入</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">insertElem</span><span class=\"token punctuation\">(</span>elem<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> index <span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedListNode</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 对第一个结点单独处理</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        node<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 找到插入位的前一个结点</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">const</span> pre <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNode</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> LinkedListNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 先让待插入结点的 next 指向 pre 的 next</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 再将 pre 的 next 指向待插入结点</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 不可颠倒顺序</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    node<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    pre<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div></details>\n<details class=\"primary\"><summary>toString()</summary><div>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 重写 toString () 方法，从第一个结点到最后一个结点打印链表的值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>elem<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">let</span> cur <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            str <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>str<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">,</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>cur<span class=\"token punctuation\">.</span>elem<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div></details>\n<p>因为单链表只能从第一个结点开始按顺序查找，相关操作多需要遍历链表，所以时间复杂度多为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span></p>\n<h1 id=\"双向链表\"><a class=\"markdownIt-Anchor\" href=\"#双向链表\">#</a> 双向链表</h1>\n<p>单向链表只能从头依次顺序地向后遍历，双向链表的每个结点存有 <code>prior</code>  和 <code>next</code>  两个指针，一个指向它的前驱结点，一个指向它的后继结点。因此双向链表既可以很容易找到当前结点的前驱结点。</p>\n<h2 id=\"双链表结点\"><a class=\"markdownIt-Anchor\" href=\"#双链表结点\">#</a> 双链表结点</h2>\n<p>双链表和单链表最大的区别在于它的每个结点还有指向上一个结点的指针。<br>\n就像表尾结点的 <code>next</code>  指针指向 <code>null</code>  一样，双链表表头结点的 <code>prior</code>  指针也指向 <code>null</code> 。</p>\n<pre class=\"mermaid\">flowchart LR\nhead --> id1((DuNode)) --next-->id2((DuNode))--next--> id3((DuNode))--next--> idEnd(null)\nid3((DuNode))--prior-->id2((DuNode)) --prior--> id1((DuNode)) --prior-->  idStart(null)</pre>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">DuLinkedListNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  elem<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  next<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> DuLinkedListNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  prior<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> DuLinkedListNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>elem<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>elem <span class=\"token operator\">=</span> elem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prior <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"创建双链表\"><a class=\"markdownIt-Anchor\" href=\"#创建双链表\">#</a> 创建双链表</h2>\n<p>定义双链表</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">DuLinkedList<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">private</span> head<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> DuLinkedListNode<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">private</span> length<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>从数组创建双链表：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">LinkedList<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 头插法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">headInsert</span><span class=\"token punctuation\">(</span>array<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DuLinkedListNode</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token comment\">// 头指针为空时单独处理</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        node<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>prior <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">// 尾插法</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function\">tailInsert</span><span class=\"token punctuation\">(</span>array<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">let</span> rear <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DuLinkedListNode</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token comment\">// 头指针为空时单独处理</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rear <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        rear <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        rear<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        node<span class=\"token punctuation\">.</span>prior <span class=\"token operator\">=</span> rear<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        rear <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"双单链表方法\"><a class=\"markdownIt-Anchor\" href=\"#双单链表方法\">#</a> 双单链表方法</h2>\n<p>定义双链表的一些操作（类的方法）：</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>size()</code></td>\n<td>求表长</td>\n</tr>\n<tr>\n<td><code>isEmpty()</code></td>\n<td>链表判空</td>\n</tr>\n<tr>\n<td><code>getHead()</code></td>\n<td>获取表头</td>\n</tr>\n<tr>\n<td><code>indexOf(elem)</code></td>\n<td>按值查找</td>\n</tr>\n<tr>\n<td><code>getNode(index)</code></td>\n<td>按位查找（结点）</td>\n</tr>\n<tr>\n<td><code>getElem(index)</code></td>\n<td>按位查找（值）</td>\n</tr>\n<tr>\n<td><code>remove(elem)</code></td>\n<td>按值删除</td>\n</tr>\n<tr>\n<td><code>removeAt(index)</code></td>\n<td>按位删除</td>\n</tr>\n<tr>\n<td><code>insertElem(elem,index)</code></td>\n<td>按位插入</td>\n</tr>\n<tr>\n<td><code>toString()</code></td>\n<td>转为字符串</td>\n</tr>\n</tbody>\n</table>\n<p>双链表操作的实现上与单链表并无太大区别。主要在于引入了 <code>prior</code>  指针，在对结点进行增删操作时，一是可以很方便的找到结点的前驱结点，二是修改后需要对 <code>prior</code>  指针进行处理。</p>\n<h3 id=\"增加操作\"><a class=\"markdownIt-Anchor\" href=\"#增加操作\">#</a> 增加操作</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 增加操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DuLinkedListNode</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 1. 第一个结点的情况</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>node<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//node.next === null 说明 node 是第一个结点，不用再进行额外处理</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  node<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>prior <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 2. 其他结点的情况</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//index 的合法范围应该在 0~length，表尾结点仍可添加结点</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">const</span> pre <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNode</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>node<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>pre<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>node<span class=\"token punctuation\">.</span>prior <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//node.next === null 说明 node 是最后一个结点，不用再进行额外处理</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  node<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>prior <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"删除操作\"><a class=\"markdownIt-Anchor\" href=\"#删除操作\">#</a> 删除操作</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 删除操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 1. 第一个结点的情况</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 删除后 this.head === null 说明次数链表已经为空，不用再做处理</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>prior <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 2. 其他结点的情况</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> cur <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNode</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>cur<span class=\"token punctuation\">.</span>prior<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//cur.next === null 说明 cur 是最后一个结点，不用再进行额外处理</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  cur<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>prior <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>prior<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"循环链表\"><a class=\"markdownIt-Anchor\" href=\"#循环链表\">#</a> 循环链表</h1>\n<p>循环链表可以是单链表也可以是双链表，与这两种链表的区别在于，如果是循环单链表，那么它的最后一个结点的 <code>next</code>  指向的是第一个结点；而如果是循环双链表，那么它的第一结点的 <code>prior</code>  指针指向它的最后一个结点，而它的最后一个结点的 <code>next</code>  指针也是指向它的第一个结点</p>\n<p>循环单链表</p>\n<pre class=\"mermaid\">flowchart LR\nhead-->id1((data1))--next-->id2((data2))--next-->id3((data3))--next-->id1</pre>\n<p>循环双链表：</p>\n<pre class=\"mermaid\">flowchart LR\nhead-->id1((data1))--next-->id2((data2))--next-->id3((data3))--next-->id1\nid3--prior-->id2--prior-->id1--prior-->id3</pre>\n",
            "tags": [
                "计算机基础",
                "数据结构",
                "计算机基础",
                "数据结构"
            ]
        },
        {
            "id": "https://www.umi.homes/posts/cb89/",
            "url": "https://www.umi.homes/posts/cb89/",
            "title": "概述",
            "date_published": "2023-01-14T16:00:00.000Z",
            "content_html": "<h1 id=\"基本概念\"><a class=\"markdownIt-Anchor\" href=\"#基本概念\">#</a> 基本概念</h1>\n<h2 id=\"基本术语\"><a class=\"markdownIt-Anchor\" href=\"#基本术语\">#</a> 基本术语</h2>\n<table>\n<thead>\n<tr>\n<th>术语</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数据</td>\n<td>信息的载体</td>\n</tr>\n<tr>\n<td>数据元素</td>\n<td>数据的基本单位</td>\n</tr>\n<tr>\n<td>数据对象</td>\n<td>具有相同性质的数据元素的集合，是数据的一个子集</td>\n</tr>\n<tr>\n<td>数据类型</td>\n<td>一个值的集合和定义在此集合上的一系列操作的总称</td>\n</tr>\n<tr>\n<td>数据结构</td>\n<td>相互之间存在一种或多种特定关系的数据元素的集合</td>\n</tr>\n</tbody>\n</table>\n<p>数据类型又包含三类：</p>\n<ul>\n<li>原子类型：其值不可再分的数据类型</li>\n<li>结构类型：其值可以再分解为若干成分的数据类型</li>\n<li>抽象数据类型：抽象数据组织及与之相关的操作</li>\n</ul>\n<h2 id=\"数据结构三要素\"><a class=\"markdownIt-Anchor\" href=\"#数据结构三要素\">#</a> 数据结构三要素</h2>\n<h3 id=\"逻辑结构\"><a class=\"markdownIt-Anchor\" href=\"#逻辑结构\">#</a> 逻辑结构</h3>\n<ul>\n<li>数据元素之间的逻辑关系，即从逻辑关系上描述数据</li>\n<li>它与数据的存储无关，是独立于计算机的</li>\n<li>逻辑结构主要分为线性结构（线性表，栈，队列）和非线性结构（图、树，集合）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>常见的逻辑结构</th>\n<th>数据元素的关系</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>集合</td>\n<td>同属一个集合</td>\n</tr>\n<tr>\n<td>线性结构</td>\n<td>一对一</td>\n</tr>\n<tr>\n<td>树形结构</td>\n<td>一对多</td>\n</tr>\n<tr>\n<td>图状结构或网状结构</td>\n<td>多对多</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"物理结构\"><a class=\"markdownIt-Anchor\" href=\"#物理结构\">#</a> 物理结构</h3>\n<ul>\n<li>数据结构在计算机中的表示（又称映像），也称存储结构</li>\n<li>包括数据元素的表示和关系的表示</li>\n<li>它是用计算机语言实现的逻辑结构，它依赖于计算机语言</li>\n<li>主要的存储结构：顺序存储、链式存储、索引存储、散列存储。</li>\n</ul>\n<h3 id=\"数据的运算\"><a class=\"markdownIt-Anchor\" href=\"#数据的运算\">#</a> 数据的运算</h3>\n<ul>\n<li>包括运算的定义和实现</li>\n<li>运算的定义是针对逻辑结构的，指出运算的功能</li>\n<li>运算的实现是针对存储结构的，指出运算的具体操作步骤</li>\n</ul>\n<h1 id=\"算法概念\"><a class=\"markdownIt-Anchor\" href=\"#算法概念\">#</a> 算法概念</h1>\n<p>算法是对特定问题求解步骤的一种描述，是指令的有限序列，其中的每条指令都代表一个或多个操作。<br>\n特性：有穷性、确定性、可行性、输入、输出<br>\n好的算法：正确性、可读性、健壮性、高效率与低存储量的需求<br>\n算法评价：时间复杂度和空间复杂度</p>\n",
            "tags": [
                "计算机基础",
                "数据结构",
                "计算机基础",
                "数据结构"
            ]
        },
        {
            "id": "https://www.umi.homes/posts/c8f1/",
            "url": "https://www.umi.homes/posts/c8f1/",
            "title": "事件初步",
            "date_published": "2022-11-12T08:10:35.000Z",
            "content_html": "<h2 id=\"事件基础\"><a class=\"markdownIt-Anchor\" href=\"#事件基础\">#</a> 事件基础</h2>\n<h3 id=\"事件简介\"><a class=\"markdownIt-Anchor\" href=\"#事件简介\">#</a> 事件简介</h3>\n<h4 id=\"常见事件\"><a class=\"markdownIt-Anchor\" href=\"#常见事件\">#</a> 常见事件</h4>\n<p><strong>事件</strong>是某事发生的信号，所有 DOM 节点都生成这样的信号。这是一些常见的 DOM 事件：</p>\n<ol>\n<li>\n<p>鼠标事件</p>\n<ul>\n<li><code>click</code> ：鼠标点击一个元素时</li>\n<li><code>contextmenu</code> ：鼠标右键点击一个元素时</li>\n<li><code>mouseover/mouseout</code> ：鼠标指针移入 / 离开一个元素时</li>\n<li><code>mousedown/mouseup</code> ：在元素上按下 / 释放鼠标时</li>\n<li><code>mousemove</code> ：鼠标移动时</li>\n</ul>\n</li>\n<li>\n<p>键盘事件</p>\n<ul>\n<li><code>keydown/keyup</code> ：按下和松开一个按键时</li>\n</ul>\n</li>\n<li>\n<p>表单元素</p>\n<ul>\n<li><code>submit</code> ：用户提交了一个 <code>&lt;form&gt;</code>  时</li>\n<li><code>focus</code> ：用户聚焦于一个元素时</li>\n</ul>\n</li>\n<li>\n<p>Document 事件</p>\n<ul>\n<li><code>DOMContentLoaded</code> ：在 HTML 被加载和处理完成时，DOM 被完全构建完成时</li>\n</ul>\n</li>\n<li>\n<p>CSS 事件</p>\n<ul>\n<li><code>transitioned</code> ：在一个 CSS 动画完成时</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"事件处理程序\"><a class=\"markdownIt-Anchor\" href=\"#事件处理程序\">#</a> 事件处理程序</h4>\n<p>处理程序可以对事件做出响应，在发生对应行为时运行相应的 JavaScript 代码。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 为 input 分配一个 click 处理程序，在 HTML 设置 on&lt;event > 特性 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Click me<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Click!'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">&lt;!-- 当代码较多时，可以将其设置为函数 --></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">alertHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">alertHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Hello! * 3<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">&lt;!-- 通过 DOM 属性 on&lt;event > 的方式和直接设置 HTML 特性是相同的 --></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>elem<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>click<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">let</span> elem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"elem\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  elem<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>这两种方法中，一种是通过 HTML 特性初始化的，另一种是通过脚本初始化的，除此之外它们是相同。<br>\n因为只有一个 <code>onclick</code>  属性，设置 <code>onclick = null</code>  即可移除设置的处理程序。<br>\n在处理程序中 <code>this</code>  指向这个对应元素。</p>\n<p><code>addEventListener</code>  方法可以为一个事件分配多个处理程序。<br>\n <code>elem.addEventListener(event, handler[, options])</code> ：</p>\n<ul>\n<li><code>event</code> ：事件名</li>\n<li><code>handler</code> ：处理程序</li>\n<li><code>options</code> ：可选关键词\n<ul>\n<li><code>once</code> ：如果为 <code>true</code> ，那么在触发后自地删除监听器</li>\n<li><code>capture</code> ：事件处理阶段，冒泡或者捕获</li>\n<li><code>passive</code> ：如果为 <code>true</code> ，那么处理程序将不会被调用默认行为</li>\n</ul>\n</li>\n</ul>\n<p><code>elem.removeEventListener(event, handler[, options])</code>  移除添加的监听器</p>\n<div class=\"note info\">\n<p>移除时需要相同的函数，如果是使用箭头函数而没有将函数存储在变量中，则无法移除它。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>elem<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 这样并不能移除函数，因为它们是不同的函数对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>elem<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n<h4 id=\"事件对象\"><a class=\"markdownIt-Anchor\" href=\"#事件对象\">#</a> 事件对象</h4>\n<p>事件发生的时候，浏览器会创建一个 <code>event</code>  对象，将信息放入其中并传递给处理程序。<br>\n <code>event</code>  对象通常有这些属性：</p>\n<ul>\n<li><code>event.type</code> ：事件类型，如 <code>click</code></li>\n<li><code>event.currentTarget</code> ：处理事件的元素，这里与 <code>this</code>  相同</li>\n<li><code>event.clientX/event.clientY</code> ：指针事件的指针的窗口的相对坐标</li>\n</ul>\n<h3 id=\"冒泡与捕获\"><a class=\"markdownIt-Anchor\" href=\"#冒泡与捕获\">#</a> 冒泡与捕获</h3>\n<h4 id=\"冒泡\"><a class=\"markdownIt-Anchor\" href=\"#冒泡\">#</a> 冒泡</h4>\n<p>冒泡（bubbling）是指，<strong>当一个事件发生在元素上时，它会首先运行在该元素上的处理程序，然后在运行其父元素上的处理程序，然后一直向上直达其他祖先元素</strong>。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 这里有三层嵌套，它们各自拥有一个处理程序 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">&lt;!-- 先运行 p 上的，然后是 p 外的 div，然后是 div 外的 div，直到最后的 document 对象 --></span></pre></td></tr></table></figure><div onclick=\"alert('1')\" style=\"width:200px;height:160px;background:orange;\">\n    <div onclick=\"alert('2')\" style=\"margin:auto;width:160px;height:120px;background:yellow;transform:translateY(20px)\">\n        <p onclick=\"alert('3')\" style=\"margin:auto;width:120px;height:80px;background:green;transform:translateY(20px)\"></p>\n    </div>\n</div>\n<p>点击绿色的区域，将依次看见 3，2，1 三个 <code>alert</code> 。</p>\n<p>事件从内部元素 “冒泡” 到几乎所有父级，这个过程称为 “冒泡”。<br>\n冒泡事件从目标元素（ <code>event.target</code> ）开始向上，到 <code>&lt;html&gt;</code>  甚至 <code>window</code> ，它们会调用路径上的所有处理程序。<br>\n <code>event.stopPropagation()</code>  方法可以停止冒泡，但是如果一个元素在一个事件上有多个处理程序，即使其中一个停止冒泡，其他处理程序仍会执行。<br>\n冒泡带来了很多方便，阻止冒泡可能会导致一些意想不到的问题，<strong>除非有显而易见的需要，否则不应该随便停止冒泡</strong>。</p>\n<h4 id=\"捕获\"><a class=\"markdownIt-Anchor\" href=\"#捕获\">#</a> 捕获</h4>\n<p>捕获（capturing）是事件处理的另一个阶段。<br>\nDOM 事件标准中，事件传播有三个阶段，捕获阶段 - 目标阶段 - 冒泡阶段。<br>\n捕获阶段最先发生，事件向下走近元素，目标阶段事件到达元素，然后事件开始冒泡。<br>\n使用 <code>on&lt;event&gt;</code>  和 <code>addEventListener</code>  处理的事件仅在第二第三阶段进行。</p>\n<p>如果要在捕获阶段处理事件，需要将 <code>capture</code>  设置为 <code>true</code> ：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>elem<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">capture</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"事件委托\"><a class=\"markdownIt-Anchor\" href=\"#事件委托\">#</a> 事件委托</h3>\n<p>冒泡与委托结合，可以实现更灵活的事件处理模式 —— 事件委托。<br>\n事件委托模式可以用于为相似元素添加相同的处理，通常如下：</p>\n<ol>\n<li>在容器上放置一个处理程序</li>\n<li>在处理程序中，检查源元素 <code>event.target</code></li>\n<li>事件发生在目标元素上，处理事件</li>\n</ol>\n<div class=\"tab\" data-id=\"eventTab\" data-title=\"优点\">\n<ol>\n<li>简化初始化事件处理程序，节省内存</li>\n<li>添加移除元素时，无需修改处理程序</li>\n<li>方便 DOM 修改</li>\n</ol>\n</div>\n<div class=\"tab\" data-id=\"eventTab\" data-title=\"缺点\">\n<ol>\n<li>仅适用于可以冒泡的事件</li>\n<li>委托可能增加负载，因为容器级的处理程序会对容器内任意位置的事件都做出反应</li>\n</ol>\n</div>\n<p>一个事件委托的例子如下，事件处理程序并不是在每一个元素上添加的，而是在它们的父元素上：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token selector\">#container</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 340px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 340px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token property\">align-content</span><span class=\"token punctuation\">:</span> space-between<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> space-between<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token property\">flex-wrap</span><span class=\"token punctuation\">:</span> wrap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token selector\">.box</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid black<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>red<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>blue<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>yellow<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>orange<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>green<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>purple<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>pink<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>grey<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>darkred<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">let</span> color <span class=\"token operator\">=</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    container<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>className <span class=\"token operator\">==</span> <span class=\"token string\">\"box\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">let</span> box <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        color <span class=\"token operator\">==</span> <span class=\"token string\">\"white\"</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>color <span class=\"token operator\">=</span> box<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>color <span class=\"token operator\">=</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        box<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"默认行为\"><a class=\"markdownIt-Anchor\" href=\"#默认行为\">#</a> 默认行为</h3>\n<p>默认行为是指事件被触发时，浏览器自动执行的行为，例如：</p>\n<ul>\n<li>点击一个 <code>&lt;a&gt;</code>  标签，触发导航到该 URL</li>\n<li>点击表单提交按钮，触发提交到服务器行为</li>\n<li>文本上按下鼠标并移动，选中文本</li>\n</ul>\n<p>大部分情况下它们都很有用，但是少部分的场景可能并不希望浏览器的默认行为。<br>\n一种方法是 <code>on&lt;event&gt;=&quot;return false</code> ，它会阻止默认事件，如果事件由 <code>on&lt;event&gt;</code>  分配；<br>\n另一种方法是使用 <code>event</code>  对象，有一个 <code>event.preventDefault()</code>  方法。<br>\n <code>addListener</code>  方法中的 <code>passive: true</code>  选项告诉浏览器该行为不会被阻止。<br>\n如果默认行为被阻止， <code>event.defaultPrevented</code>  的值会变成 <code>true</code> ，否则为 <code>false</code> 。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>Click<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\">event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>Click<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"ui-事件\"><a class=\"markdownIt-Anchor\" href=\"#ui-事件\">#</a> UI 事件</h2>\n<h3 id=\"鼠标事件\"><a class=\"markdownIt-Anchor\" href=\"#鼠标事件\">#</a> 鼠标事件</h3>\n<h4 id=\"鼠标事件简介\"><a class=\"markdownIt-Anchor\" href=\"#鼠标事件简介\">#</a> 鼠标事件简介</h4>\n<ol>\n<li>\n<p>事件类型<br>\n在元素上点击 / 释放鼠标按钮： <code>mousedown/mouseup</code> <br>\n 鼠标指针从元素上移入 / 移出： <code>mouseover/mouseout</code> <br>\n 鼠标在元素上移动： <code>mousemove</code> <br>\n 鼠标左键点击元素，在 <code>mousedown</code>  和 <code>mouseup</code>  后触发 <code>click</code> <br>\n 鼠标右键按下触发上下文菜单： <code>contextmenu</code></p>\n<p>当一个用户操作会触发多个事件时，事件的顺序是固定的：如点击鼠标左键，会遵循 <code>mousedown</code> -&gt; <code>mouseup</code> -&gt; <code>click</code>  的顺序。</p>\n<p><code>event.button</code>  记录了鼠标按键的类型：</p>\n<table>\n<thead>\n<tr>\n<th>鼠标按键类型</th>\n<th><code>event.button</code>  的值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>左键（主要按键）</td>\n<td>0</td>\n</tr>\n<tr>\n<td>中键（辅助按键）</td>\n<td>1</td>\n</tr>\n<tr>\n<td>右键（次要按键）</td>\n<td>2</td>\n</tr>\n<tr>\n<td>X1（后退按键）</td>\n<td>3</td>\n</tr>\n<tr>\n<td>X2（前进按键）</td>\n<td>4</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>组合按键<br>\n所有鼠标事件都包含以下组合键的信息：<br>\n <code>shiftKey</code> ：shift 键<br>\n <code>altKey</code> ：alt 键<br>\n <code>ctrlKey</code> ：ctrl 键<br>\n <code>metaKey</code> ：windows 的 win 键和 mac 的 cmd 键</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Alt + Shift + Click<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">&lt;!-- 组合点击键，按下 alt+shift 键同时点击才生效 --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  button<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>altKey <span class=\"token operator\">&amp;&amp;</span> event<span class=\"token punctuation\">.</span>shiftKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>鼠标坐标<br>\n所有鼠标事件都提供了两种形式的坐标：<br>\n <code>clientX/clientY</code> ：相较于窗口的坐标<br>\n <code>pageX/pageY</code> ：相较于文档的坐标<br>\n<input onmousemove=\"this.value=event.clientX+':'+event.clientY\" value=\"\"></p>\n</li>\n<li>\n<p>防止鼠标选中<br>\n阻止浏览器的 <code>mousedown</code>  操作，可以防止双击时鼠标选中文本或者按下鼠标选中文本。</p>\n  <div onmousedown=\"return false\" style=\"font-style:italic\">这是一段鼠标按下或者双击不会选中的文字</div>\n<p>同样的，阻止 <code>copy</code>  事件也可以防止右键复制或者快捷键复制。</p>\n  <div oncopy=\"alert('禁止复制');return false\" style=\"font-style:italic\">这是一段禁止复制的文字</div>\n</li>\n</ol>\n<h4 id=\"移动鼠标\"><a class=\"markdownIt-Anchor\" href=\"#移动鼠标\">#</a> 移动鼠标</h4>\n<p>当鼠标移动到某个元素上时， <code>mouseover</code>  事件发生，鼠标离开这个元素时， <code>mouseout</code>  事件发生<br>\n这两个事件具备 <code>relatedTarget</code>  属性：</p>\n<ul>\n<li>在 <code>mouseover</code>  中，是鼠标来自的那个元素 <code>relatedTarget</code>  -&gt;  <code>target</code></li>\n<li>在 <code>mouseout</code>  中，是鼠标移动到的，当下的元素 <code>target</code>  -&gt;  <code>relatedTarget</code></li>\n</ul>\n<p>鼠标移动时会触发 <code>mouseover</code>  事件，但是并不是每一个像素变化都会触发。<br>\n浏览器会检测鼠标的位置，如果发生了变化就会触发事件，当访问者非常快速地移动鼠标时，某些 DOM 元素可能被跳过。<br>\n <code>mouseout</code>  事件在鼠标指针从元素移动到其后代时也触发（浏览器默认鼠标指针随时位于嵌套最多的那个单个元素上），而在后代中的 <code>mouseover</code>  事件还会冒泡，所以如果父元素有 <code>mouseover</code>  处理程序也会被触发。<br>\n在这种情况下，如果不检查 <code>event.target</code> ，似乎认为鼠标离开了父元素，但是鼠标此时仍然在父元素范围内，它只是更深入地指向了父元素中的子元素。</p>\n<p>有些时候为了阻止这种情况可以使用 <code>mouseenter</code>  和 <code>mouseleave</code> ：</p>\n<ul>\n<li>它们元素内部和后代之间的转换不会发生影响</li>\n<li>这两个事件不会冒泡</li>\n</ul>\n<p>鼠标进入一个元素，触发 <code>mouseenter</code> ，鼠标离开该元素，触发 <code>mouseleave</code> 。</p>\n<h4 id=\"鼠标拖拽\"><a class=\"markdownIt-Anchor\" href=\"#鼠标拖拽\">#</a> 鼠标拖拽</h4>\n<p>一个基础的拖拽算法如下：</p>\n<ol>\n<li>在 <code>mousedown</code>  上根据需要准备好要移动的元素</li>\n<li>在 <code>mouseover</code>  上通过更改 <code>position: absolute</code>  情况下的 <code>left/top</code>  来移动它</li>\n<li>在 <code>mouseup</code>  上执行与完成拖放相关行为</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 禁用浏览器默认拖拽处理</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ball<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">ondragstart</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ball<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmousedown</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 准备移动，设置为绝对定位，层级 z-index 最高保证在顶部</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  ball<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> <span class=\"token string\">\"absolute\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  ball<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>zIndex <span class=\"token operator\">=</span> <span class=\"token number\">999</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// 将其从当前父元素移动到 body 中，保证定位是相对 body 的</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>ball<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// 现在球的中心在 (pageX,pageY) 坐标上</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">moveAt</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pageX<span class=\"token punctuation\">,</span> pageY</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    ball<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> pageX <span class=\"token operator\">-</span> ball<span class=\"token punctuation\">.</span>offsetWidth <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"px\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    ball<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> pageY <span class=\"token operator\">-</span> ball<span class=\"token punctuation\">.</span>offsetHeight <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"px\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">// 将绝对定位的球移到指针下</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token function\">moveAt</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>pageX<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>pageY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">onMouseMove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">moveAt</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>pageX<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>pageY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token comment\">// 在 mousemove 事件上移动球</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mousemove\"</span><span class=\"token punctuation\">,</span> onMouseMove<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token comment\">// 放下球并移除不需要的处理程序</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  ball<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmouseup</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mousemove\"</span><span class=\"token punctuation\">,</span> onMouseMove<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    ball<span class=\"token punctuation\">.</span>onmouseup <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>优化：</p>\n<ol>\n<li>保持元素相对于鼠标指针的初始偏移：</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 访问者按下鼠标时，记住鼠标指针到球左上角的距离</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//onmousedown</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> shiftX <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>clientX <span class=\"token operator\">-</span> ball<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> shiftY <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>clientY <span class=\"token operator\">-</span> ball<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 移动时，将偏移量也纳入考虑</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//onmousemove</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ball<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> pageX <span class=\"token operator\">-</span> shiftX <span class=\"token operator\">+</span> <span class=\"token string\">\"px\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ball<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> pageY <span class=\"token operator\">-</span> shiftY <span class=\"token operator\">+</span> <span class=\"token string\">\"px\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>可放置的目标<br>\n在可拖到元素中，被拖到的元素始终在其他元素之上，因此在较低的元素上设置的处理程序都不会起作用。<br>\n <code>document.elementFromPoint(clientX, clientY)</code>  可以返回在给定窗口相对处嵌套最深的元素，如果同坐标上有多个则返回最上面的一个元素。<br>\n利用这个方法可以改进拖拽：</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 正在飞过的潜在 droppable 元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//currentDroppable 用于存储当前放置目标</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> currentDroppable <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 改进 onMouseMove</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">onMouseMove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">moveAt</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>pageX<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>pageY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 先隐藏拖动的元素，否则获得的是拖到的元素（在最上面）</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  ball<span class=\"token punctuation\">.</span>hidden <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">let</span> elemBelow <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">elementFromPoint</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>clientX<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>clientY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  ball<span class=\"token punctuation\">.</span>hidden <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// 边界条件，如果 clientX/clientY 在窗口，拖到对象拖出窗口时</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>elemBelow<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">// 潜在可放置对象使用 “droppable” 标记</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">let</span> droppableBelow <span class=\"token operator\">=</span> elemBelow<span class=\"token punctuation\">.</span><span class=\"token function\">closest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".droppable\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentDroppable <span class=\"token operator\">!=</span> droppableBelow<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 正在飞入或飞出</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentDroppable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token comment\">// 飞出 droppable 元素的相关处理函数</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token function\">leaveDroppable</span><span class=\"token punctuation\">(</span>currentDroppable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    currentDroppable <span class=\"token operator\">=</span> droppableBelow<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentDroppable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token comment\">// 飞入 droppable 元素的相关处理函数</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token function\">enterDroppable</span><span class=\"token punctuation\">(</span>currentDroppable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"指针事件\"><a class=\"markdownIt-Anchor\" href=\"#指针事件\">#</a> 指针事件</h4>\n<p>指针事件是鼠标事件的扩展，用于处理包括鼠标、触控等现代输入方法。<br>\n指针事件具备和鼠标事件完全相同的属性，包括 <code>clientX/Y</code>  和 <code>target</code>  等，还有一些其他属性：</p>\n<ul>\n<li><code>pointerID</code> ：触发当前事件指针的唯一标识符，由浏览器生成的，用于处理多指针的情况</li>\n<li><code>pointerType</code> ：指针设备的类型，字符串。如： <code>mouse</code> 、 <code>pen</code>  或 <code>touch</code></li>\n<li><code>isPrimary</code> ：指针是否为首要指针（如多点触控按下第一根手指时）</li>\n</ul>\n<p>对于多点触控的设备（如平板或手机），每一个触摸都会分配一个 <code>pointerID</code> ，利用 <code>pointerID</code> ，可以追踪到多根正在触碰的手指。第一个触摸相关联的事件总有 <code>isPrimary = true</code> 。</p>\n<p>指针捕获（Pointer capturing）是针对指针事件的一个特性。主要方法是：<br>\n <code>elem.setPointerCapture(pointerID)</code> ：将给定的 <code>pointerID</code>  绑定到 <code>elem</code>  上，在调用后，所有具有相同 <code>pointerID</code>  的指针都将 <code>elem</code>  作为目标，无论 <code>elem</code>  在文档中的实际位置。<br>\n以下情况会移除绑定：</p>\n<ul>\n<li>当 <code>pointerup</code>  或者 <code>pointercancel</code>  事件出现时，绑定会被自动移除</li>\n<li>当 <code>elem</code>  元素从文档中删除后，绑定被移除</li>\n<li><code>elem.releasePointerCapture(pointerID)</code>  调用后，移除绑定</li>\n</ul>\n<p>在一个元素启用触发后， <code>gotpointercapture</code>  会触发。同样的，当绑定被移除后， <code>lostpointercapture</code>  会触发。</p>\n<h3 id=\"键盘与滚动\"><a class=\"markdownIt-Anchor\" href=\"#键盘与滚动\">#</a> 键盘与滚动</h3>\n<ol>\n<li>\n<p>键盘事件<br>\n当按键被按下时，会触发 <code>keydown</code>  事件，按键释放时，触发 <code>keyup</code>  事件。<br>\n事件对象的 <code>key</code>  获取按键字符， <code>code</code>  获取按键代码。<br>\n一般来说： - 字符键的代码为 <code>Key&lt;letter&gt;</code>  - 数字键的代码为 <code>Digit&lt;number&gt;</code>  - 特殊按键代码为特殊按键名字 <code>Enter</code> 、 <code>Tab</code> 、 <code>ShiftRight</code>  等</p>\n<div class=\"note info\">\n<p>大多数键盘事件的默认行为可以被阻止，但是 OS 相关的特殊按键除外（如 alt+F4 关闭浏览器窗口），它们无法通过 JavaScript 进行阻止。</p>\n</div>\n</li>\n<li>\n<p>滚动事件<br>\n <code>scroll</code>  事件允许对页面或元素滚动做出反应。<br>\n通过滚动，可以根据用户在文档中位置显示 / 隐藏其他控件或信息</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"scroll\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElmentById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"showScroll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    window<span class=\"token punctuation\">.</span>pageYOffset <span class=\"token operator\">+</span> <span class=\"token string\">\"px\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"表单与控件\"><a class=\"markdownIt-Anchor\" href=\"#表单与控件\">#</a> 表单与控件</h3>\n<h4 id=\"表单属性和方法\"><a class=\"markdownIt-Anchor\" href=\"#表单属性和方法\">#</a> 表单属性和方法</h4>\n<p>表单是特殊集合 <code>document.forms</code>  的成员</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myForm<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>one<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>two<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">let</span> form <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>forms<span class=\"token punctuation\">.</span>myForm<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">//  获取 name 为 myForm 的表单，也可以使用如下方式：</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">//  let form = document.forms[0]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">//  获取文档中的第一个表单</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">let</span> elem <span class=\"token operator\">=</span> form<span class=\"token punctuation\">.</span>elements<span class=\"token punctuation\">.</span>one<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// 表单中的元素都可以通过命名的集合 form.elements 来访问到</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// 如果有多个名字相同的元素，那么 form.elements [name] 获得的是一个集合</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 表单中的元素，反过来也可以通过 element.form 找到它所处的表单</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>form <span class=\"token operator\">===</span> elem<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"表单控件\"><a class=\"markdownIt-Anchor\" href=\"#表单控件\">#</a> 表单控件</h4>\n<ol>\n<li>\n<p>input 和 textarea<br>\n <code>input.value</code>  或者 <code>input.checked</code>  可以访问 <code>input</code>  控件中的 <code>value</code>  值<br>\n <code>textarea.value</code>  访问 <code>textarea</code>  中的 <code>value</code>  值</p>\n</li>\n<li>\n<p>select 和 option<br>\n <code>select</code>  有以下三个重要属性：</p>\n<ul>\n<li><code>select.options</code> ： <code>option</code>  的子元素的集合</li>\n<li><code>select.value</code> ：当前所选的 <code>option</code>  的值</li>\n<li><code>select.selectedIndex</code> ：当前所选的 <code>option</code>  的编号</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>select<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>apple<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Apple<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>banana<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Banana<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pear<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Pear<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 以下三种操作所作的都是同一件事</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  select<span class=\"token punctuation\">.</span>option<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>selected <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  select<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  select<span class=\"token punctuation\">.</span>selectedIndex <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"focusblur\"><a class=\"markdownIt-Anchor\" href=\"#focusblur\">#</a> focus/blur</h4>\n<p>当元素聚焦时，触发 <code>focus</code>  事件，当元素失去焦点时，触发 <code>blur</code>  事件。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token selector\">.invalid</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">border-color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token selector\">#error</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>请输入邮箱：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>input<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>error<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  input<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onblur</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>input<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      input<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".invalid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      error<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"请输入一个邮箱！\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  input<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onfocus</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".invalid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".invalid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      error<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><code>elem.focus()</code>  和 <code>elem.blur()</code>  方法可以设置和移除元素身上的焦点。<br>\n <code>focus</code>  和 <code>blur</code>  不会冒泡，但是可以改在捕获阶段触发，或者使用 <code>focusin/focusout</code>  替代。<br>\n大多数元素支持聚焦，但是可以通过 <code>tabindex</code>  使元素变为可聚焦的。<br>\n <code>document.activeElement</code>  获取当前所聚焦的元素。</p>\n<h4 id=\"表单更新事件\"><a class=\"markdownIt-Anchor\" href=\"#表单更新事件\">#</a> 表单更新事件</h4>\n<ol>\n<li>change<br>\n 当元素更改完成，发生 <code>change</code>  事件</li>\n</ol>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 当输入完成后，切换到其他地方时，触发 change 事件 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">onchange</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">&lt;!--select 或者 checkbox/radio 会在选项更新后触发 change 事件 --></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onchange</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>options<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>option1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>option2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"2\">\n<li>\n<p>input<br>\n 每次用户对输入值进行修改后，触发 <code>input</code>  事件。<br>\n只要值改变了， <code>input</code>  事件就会发生，包括语言输入，鼠标粘贴等。</p>\n</li>\n<li>\n<p>cut，copy 和 paste<br>\n 发生在剪切 / 拷贝或者粘贴一个值时。<br>\n使用 <code>event.preventDefault()</code>  可以阻止复制 / 粘贴行为。</p>\n</li>\n</ol>\n<h4 id=\"表单提交\"><a class=\"markdownIt-Anchor\" href=\"#表单提交\">#</a> 表单提交</h4>\n<p>点击 <code>&lt;input type=&quot;submit&quot;&gt;</code>  或在 <code>input</code>  字段中按下回车键，都可以触发 <code>submit</code>  事件。<br>\n如果要手动提交表单可以调用 <code>form.submit()</code>  方法。</p>\n",
            "tags": [
                "编程学习",
                "前端基础",
                "前端",
                "JavaScript",
                "BOM",
                "DOM"
            ]
        }
    ]
}